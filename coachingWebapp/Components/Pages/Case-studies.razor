@page "/services/coaching/Case-studies"

@rendermode InteractiveServer

<MudSnackbarProvider />

@inject ILogger<Case_studies> Logger

<SeoComponent Title="@pageTitle" 
              Description="Real success stories from Ítala Veloso's coaching clients. See how life and career coaching transformed clients' lives through overcoming challenges and achieving breakthrough results."
              Keywords="coaching success stories, case studies, client testimonials, life coaching results, career coaching success, transformation stories, coaching outcomes"
              CanonicalUrl="https://italaveloso.com/services/coaching/Case-studies"
              JsonLdStructuredData="@GetCaseStudiesStructuredData()" />

<PageTitle>@pageTitle</PageTitle>

<div class="case-studies-page">
    <div class="testimonials-wave-top"></div>
    
    <MudContainer MaxWidth="MaxWidth.Large" Class="hero-section">
        <div class="hero-content" data-aos="fade-up">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="3">
                <div class="hero-badge">
                    <MudIcon Icon="Icons.Material.Filled.Star" Size="Size.Small" />
                    <MudText Typo="Typo.caption">Real Success Stories</MudText>
                </div>
                
                <MudText Typo="Typo.h2" Class="hero-title" Align="Align.Center">
                    Transformative <span class="highlight">Success Stories</span>
                </MudText>
                
                <MudText Typo="Typo.h6" Class="hero-subtitle" Align="Align.Center">
                    Discover how life-changing coaching journeys have empowered clients to overcome challenges, unlock potential, and achieve remarkable breakthroughs
                </MudText>
                
                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="4" Class="hero-stats">
                    <div class="stat-item" data-aos="zoom-in" data-aos-delay="100">
                        <MudText Typo="Typo.h4" Class="stat-number">20+</MudText>
                        <MudText Typo="Typo.body2" Class="stat-label">Lives Transformed</MudText>
                    </div>
                    <div class="stat-item" data-aos="zoom-in" data-aos-delay="200">
                        <MudText Typo="Typo.h4" Class="stat-number">99%</MudText>
                        <MudText Typo="Typo.body2" Class="stat-label">Success Rate</MudText>
                    </div>
                    <div class="stat-item" data-aos="zoom-in" data-aos-delay="300">
                        <MudText Typo="Typo.h4" Class="stat-number">7</MudText>
                        <MudText Typo="Typo.body2" Class="stat-label">Featured Stories</MudText>
                    </div>
                </MudStack>
            </MudStack>
        </div>
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.Large" Class="filter-section">
        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2" Wrap="Wrap.Wrap">
            <MudChip T="string" 
                     Color="@(selectedCategory == "all" ? Color.Primary : Color.Default)"
                     Variant="@(selectedCategory == "all" ? Variant.Filled : Variant.Outlined)"
                     OnClick="@(() => FilterByCategory("all"))"
                     Class="filter-chip">
                All Stories
            </MudChip>
            <MudChip T="string" 
                     Color="@(selectedCategory == "career" ? Color.Primary : Color.Default)"
                     Variant="@(selectedCategory == "career" ? Variant.Filled : Variant.Outlined)"
                     OnClick="@(() => FilterByCategory("career"))"
                     Class="filter-chip">
                Career Growth
            </MudChip>
            <MudChip T="string" 
                     Color="@(selectedCategory == "business" ? Color.Primary : Color.Default)"
                     Variant="@(selectedCategory == "business" ? Variant.Filled : Variant.Outlined)"
                     OnClick="@(() => FilterByCategory("business"))"
                     Class="filter-chip">
                Business Transformation
            </MudChip>
            <MudChip T="string" 
                     Color="@(selectedCategory == "personal" ? Color.Primary : Color.Default)"
                     Variant="@(selectedCategory == "personal" ? Variant.Filled : Variant.Outlined)"
                     OnClick="@(() => FilterByCategory("personal"))"
                     Class="filter-chip">
                Personal Development
            </MudChip>
            <MudChip T="string" 
                     Color="@(selectedCategory == "transformation" ? Color.Primary : Color.Default)"
                     Variant="@(selectedCategory == "transformation" ? Variant.Filled : Variant.Outlined)"
                     OnClick="@(() => FilterByCategory("transformation"))"
                     Class="filter-chip">
                Life Transformation
            </MudChip>
        </MudStack>
    </MudContainer>
    
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="case-studies-container">
        <div class="case-studies-grid">
            @foreach (var testimonial in filteredTestimonials)
            {
                <MudCard Class="@($"case-study-card {(testimonial.IsPlaying ? "playing" : "")}")" 
                         data-aos="fade-up" 
                         data-aos-delay="@(testimonial.Id * 100)"
                         @key="@($"{selectedCategory}-{testimonial.Id}")">
                    
                    <div class="case-study-media">
                        <div class="video-container">
                            <OptimizedVideo LowQualityVideo="@GetOptimizedVideoPath(testimonial.Path, "low")"
                                           MediumQualityVideo="@GetOptimizedVideoPath(testimonial.Path, "medium")"
                                           PosterImage="@GetPosterImagePath(testimonial.Path)"
                                           Alt="@($"Case study testimonial from {testimonial.Author}, {testimonial.Role}")"
                                           IsTestimonial="true"
                                           OnVideoStarted="@OnTestimonialVideoStarted"
                                           VideoSize="@GetVideoSizeInfo(testimonial.Path)" />
                        </div>
                        
                        <MudCardContent Class="client-info-section">
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <div class="client-details">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.h6" Class="client-name">@testimonial.Author</MudText>
                                        <MudText Typo="Typo.body2" Class="client-role">@testimonial.Role</MudText>
                                        <MudChip T="string" 
                                               Size="Size.Small" 
                                               Color="Color.Secondary" 
                                               Variant="Variant.Outlined"
                                               Class="journey-duration">
                                            @testimonial.Duration
                                        </MudChip>
                                    </MudStack>
                                </div>
                                
                                <div class="success-indicators">
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        <MudIcon Icon="Icons.Material.Filled.Star" 
                                               Color="Color.Warning" 
                                               Size="Size.Small" 
                                               Class="success-star" />
                                    }
                                </div>
                            </MudStack>
                        </MudCardContent>
                    </div>
                    
                    <MudCardContent Class="case-study-content">
                        <MudExpansionPanels MultiExpansion="false" Class="results-expansion">
                            <MudExpansionPanel Class="results-panel">
                                <TitleContent>
                                    <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                                        <MudText Typo="Typo.subtitle1" Class="panel-title">Transformation Results</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Outlined">
                                            Success Story
                                        </MudChip>
                                    </MudStack>
                                </TitleContent>
                                <ChildContent>
                                    <MudText Typo="Typo.body2" Class="results-text">
                                        @testimonial.Results
                                    </MudText>
                                    
                                    <div class="achievements-section">
                                        <MudText Typo="Typo.subtitle2" Class="achievements-title">Key Achievements:</MudText>
                                        <MudStack Spacing="1" Class="achievements-list">
                                            @foreach (var achievement in testimonial.KeyAchievements)
                                            {
                                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                    <MudIcon Icon="Icons.Material.Filled.CheckCircle" 
                                                           Color="Color.Success" 
                                                           Size="Size.Small" />
                                                    <MudText Typo="Typo.body2">@achievement</MudText>
                                                </MudStack>
                                            }
                                        </MudStack>
                                    </div>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudCardContent>
                    
                    <MudCardActions Class="card-actions">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="width: 100%;">
                            <MudButton Color="Color.Info" 
                                     Variant="Variant.Outlined"
                                     Size="Size.Medium"
                                     OnClick="() => ShareStory(testimonial.Id)"
                                     Class="share-story-btn">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Share" Size="Size.Small" />
                                    <MudText>Share Story</MudText>
                                </MudStack>
                            </MudButton>
                            
                            <MudButton EndIcon="Icons.Material.Filled.ArrowForward" 
                                     Color="Color.Primary" 
                                     Variant="Variant.Filled"
                                     Size="Size.Medium"
                                     Href="/UserDashboard"
                                     Class="start-journey-btn"
                                     Style="text-transform: none; font-weight: 600; padding: 10px 20px; border-radius: 25px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: all 0.3s ease;">
                                Start Your Journey
                            </MudButton>
                        </MudStack>
                    </MudCardActions>
                </MudCard>
            }
        </div>
        
        @if (hasMoreStories)
        {
            <div class="load-more-section" data-aos="fade-up">
                <MudButton Variant="Variant.Outlined" 
                         Color="Color.Primary" 
                         Size="Size.Large"
                         StartIcon="Icons.Material.Filled.ExpandMore"
                         OnClick="LoadMoreStories"
                         Class="load-more-btn">
                    Load More Success Stories
                </MudButton>
            </div>
        }
    </MudContainer>

    <div class="cta-section" data-aos="fade-up">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudCard Class="cta-card" Elevation="8">
                <MudCardContent>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="3">
                        <div class="cta-icon-group">
                            <MudIcon Icon="Icons.Material.Filled.Psychology" Size="Size.Large" Color="Color.Primary" />
                            <MudIcon Icon="Icons.Material.Filled.TrendingUp" Size="Size.Large" Color="Color.Success" />
                            <MudIcon Icon="Icons.Material.Filled.EmojiEvents" Size="Size.Large" Color="Color.Warning" />
                        </div>
                        
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="cta-title">
                            Ready to Write Your Own Success Story?
                        </MudText>
                        
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="cta-description">
                            Join hundreds of successful clients who have transformed their lives through personalized coaching. 
                            Your breakthrough moment is just one conversation away.
                        </MudText>
                        
                        <MudStack Row="true" Justify="Justify.Center" Spacing="2" Wrap="Wrap.Wrap">
                            <MudButton Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     Size="Size.Large"
                                     StartIcon="Icons.Material.Filled.CalendarMonth"
                                     Href="/UserDashboard"
                                     Class="primary-cta-btn">
                                Book Free Consultation
                            </MudButton>
                            
                            <MudButton Variant="Variant.Outlined" 
                                     Color="Color.Primary" 
                                     Size="Size.Large"
                                     StartIcon="Icons.Material.Filled.Info"
                                     Href="/about/process"
                                     Class="secondary-cta-btn">
                                Learn More About Coaching
                            </MudButton>
                        </MudStack>
                        
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2" Class="guarantee-section">
                            <MudIcon Icon="Icons.Material.Filled.Security" Color="Color.Success" Size="Size.Small" />
                            <MudText Typo="Typo.caption" Class="guarantee-text">
                                30-minute free consultation • No obligation • 100% confidential
                            </MudText>
                        </MudStack>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    </div>

    <div class="testimonials-wave-bottom"></div>
</div>

@code {
    private string pageTitle = "Case Studies | Ítala Veloso";
    private string selectedCategory = "all";
    private bool hasMoreStories = false;
    private int displayedStoriesCount = 10;
    
    private List<Testimonial> testimonials = new List<Testimonial>
        {
            new Testimonial
            {
                Id = 7,
                Path = "https://italaveloso.com/Testimonials/testimonial_Fran.mp4",
                Challenge = "Feeling stuck with work-life, emotional and career growth obstacles.",
                Solution = "Implemented emotional healing, patterns awareness and life coaching strategy. Tailored to personal growth, self love and self-development skills.",
                Results = "When I started my coaching journey with Itala, I thought I had things pretty well sorted. What extra help I could get was going to be great. Little did I know I was going to get a lot of help. Ideas that have been floating around in my entrepreneurial brain, some for more than a decade, are now on paper in a roadmap. They are tangible, and it’s fantastic I can now implement them. Itala really is a bright spark of joy. Sometimes, if I didn't feel that great going into a session, I felt like a million bucks afterwards because her personality is so bubbly and bright. I just love working with her, and I can't imagine a better life coach. If you're thinking about coaching, give Itala a chance because you really won't regret it. There's no way I could have thought of these things on my own, but with the right guidance, it's come together wonderfully. Itala, thank you from the bottom of my heart. You're amazing, and I can't wait to continue the journey with you.",
                Author = "Fran",
                Role = "Business Owner",
                Duration = "3 Month Journey",
                VideoDuration = "2:45",
                Category = "business",
                KeyAchievements = new List<string> 
                { 
                    "Transformed decade-old ideas into actionable roadmap",
                    "Improved emotional wellbeing and session satisfaction",
                    "Gained clarity on personal and professional goals"
                }
            },
            new Testimonial
            {
                Id = 1,
                Path = "https://italaveloso.com/Testimonials/testimonial_Laviniah.mp4",
                Challenge = "Feeling stuck with work-life, emotional and career growth obstacles.",
                Solution = "Implemented emotional healing, patterns awareness and life coaching strategy. Tailored to personal growth, self love and self-development skills.",
                Results = "Ítala been really helpful in terms of giving me concrete knowledge about things to do with trauma, how it affects our behaviours, thinking, patterns; in order to change our actions and outputs into this world. There has been such growth and work of development and I am very proud with where I am right now. Thank you and highly recommend Ítala",
                Author = "Laviniah",
                Role = "Cyber Security Analyst",
                Duration = "6 Month Journey",
                VideoDuration = "1:58",
                Category = "career",
                KeyAchievements = new List<string> 
                { 
                    "Overcame trauma-related behavioral patterns",
                    "Significant personal growth and development",
                    "Enhanced professional performance and confidence"
                }
            },
            new Testimonial
            {
                Id = 2,
                Path = "https://italaveloso.com/Testimonials/testimonial_Fi.mp4",
                Challenge = "Feeling overwhelmed, anxious about life and work.",
                Solution = "Structured life coaching strategy combined with confidence, self-love, forgiveness-building exercises.",
                Results = "Ítala kept getting me into this place that it is ok to feel what I was feeling and to no rush it! It is ok to feel a bit weird, it is ok to feel the love (I've never known how to deal with and how to receive love and all of the sudden there was so much love in the atmosphere - Praise God)... She gave me the time that I really needed to process that and I am eternally grateful.",
                Author = "Fi",
                Role = "Civil Servant",
                Duration = "8 Month Journey",
                VideoDuration = "3:12",
                Category = "transformation",
                KeyAchievements = new List<string> 
                { 
                    "Learned to process and accept emotions healthily",
                    "Developed capacity to receive and give love",
                    "Created lasting emotional healing and growth"
                }
            },
            new Testimonial
            {
                Id = 3,
                Path = "https://italaveloso.com/Testimonials/testimonial_Monica.mp4",
                Challenge = "Feeling stuck with work-life, emotional and career growth obstacles.",
                Solution = "Implemented forgiveness, emotional healing and life coaching strategy, to break free and start to move foward in life.",
                Results = "With coaching, Ítala really helped me to get to know myself better; to believe more in myself... I am really grateful to have unlocked and let go of things that happened in my past that was preventing me to move forward and improve myself. I am really thankful for that. The biggest knowledge I took from this transformation is that I am Capable of more things that I thought that I was. I am such a Stronger person now, since coaching. I highly recommend!",
                Author = "Mónica",
                Role = "Oral Health Professional",
                Duration = "1 Year Journey",
                VideoDuration = "2:34",
                Category = "transformation",
                KeyAchievements = new List<string> 
                { 
                    "Released past traumas preventing progress",
                    "Discovered inner strength and capabilities",
                    "Built unshakeable self-belief and confidence"
                }
            },
            new Testimonial
            {
                Id = 4,
                Path = "https://italaveloso.com/Testimonials/testimonial_Yannick.mp4",
                Challenge = "Career transition, feelings of stuck about life and work.",
                Solution = "Holistic life coaching strategy combined with self-confidence boost, planning, self-prioritisation-building exercises.",
                Results = "Successfully moved into a new country and is now living in the UK, London. With new role, clearer direction and purpose in life.",
                Author = "Yanick",
                Role = "Hospitality Manager",
                Duration = "Life Long Journey",
                VideoDuration = "2:08",
                Category = "career",
                KeyAchievements = new List<string> 
                { 
                    "Successfully relocated to London, UK",
                    "Secured new hospitality management role",
                    "Gained clarity on life direction and purpose"
                }
            },
            new Testimonial
            {
                Id = 5,
                Path = "https://italaveloso.com/Testimonials/testimonial_Neuza.mp4",
                Challenge = "Feeling overwhelmed, burnout about life and work.",
                Solution = "Implemented boundaries through life coaching strategy combined with confidence, self-love -building exercises.",
                Results = "Achieved healthy life-work boundaries and balance. Successfully prioritising herself.",
                Author = "Neuza",
                Role = "Psychomotor Therapist",
                Duration = "8 Month Journey",
                VideoDuration = "1:45",
                Category = "personal",
                KeyAchievements = new List<string> 
                { 
                    "Established healthy work-life boundaries",
                    "Overcame burnout and overwhelm",
                    "Learned effective self-prioritization strategies"
                }
            },
            new Testimonial
            {
                Id = 6,
                Path = "https://italaveloso.com/Testimonials/testimonial_Erica.mp4",
                Challenge = "Career transition, feelings of stuck about life and work.",
                Solution = "Holistic life coaching strategy combined with perseverance and resilience boost, planning, self-prioritisation-building exercises.",
                Results = "Successfully moved into a new job role and soon to get married.",
                Author = "Érica",
                Role = "Council Officer",
                Duration = "1 Year Journey",
                VideoDuration = "2:56",
                Category = "career",
                KeyAchievements = new List<string> 
                { 
                    "Secured new council officer position",
                    "Built resilience and perseverance skills",
                    "Achieved personal life goals (engagement)"
                }
            }
        };

    private List<Testimonial> filteredTestimonials = new List<Testimonial>();

    // Helper methods for optimized video paths
    private string GetOptimizedVideoPath(string originalPath, string quality)
    {
        try
        {
            var fileName = Path.GetFileNameWithoutExtension(originalPath);
            
            // For testimonial videos, use the local Videos folder structure
            if (fileName.StartsWith("testimonial_"))
            {
                return quality switch
                {
                    "low" => $"/Videos/{fileName}_low.mp4",
                    "medium" => $"/Videos/{fileName}_medium.mp4",
                    _ => $"/Videos/{fileName}.mp4"
                };
            }
            
            var directory = Path.GetDirectoryName(originalPath) ?? "";
            
            // Convert external URLs to local paths for non-testimonial videos
            if (originalPath.StartsWith("https://italaveloso.com/"))
            {
                var localPath = originalPath.Replace("https://italaveloso.com/", "/");
                directory = Path.GetDirectoryName(localPath) ?? "";
                fileName = Path.GetFileNameWithoutExtension(localPath);
            }
            
            return quality switch
            {
                "low" => $"{directory}/{fileName}_low.mp4",
                "medium" => $"{directory}/{fileName}_medium.mp4",
                _ => originalPath
            };
        }
        catch
        {
            return originalPath; // Fallback to original
        }
    }
    
    private string GetPosterImagePath(string videoPath)
    {
        try
        {
            var fileName = Path.GetFileNameWithoutExtension(videoPath);
            
            // For testimonial videos, distinguish between phone and PC recordings
            if (fileName.StartsWith("testimonial_"))
            {
                // Fran is PC recording (landscape) - use letterboxed version
                if (fileName.Contains("Fran"))
                {
                    return $"/Images/{fileName}_poster_portrait_v2.jpg?v=2024122704";
                }
                // All others are phone recordings (portrait) - use full height versions
                else
                {
                    return $"/Images/{fileName}_poster_phone_final.jpg?v=2024122704";
                }
            }
            
            var directory = Path.GetDirectoryName(videoPath) ?? "";
            
            // Convert external URLs to local paths
            if (videoPath.StartsWith("https://italaveloso.com/"))
            {
                var localPath = videoPath.Replace("https://italaveloso.com/", "/");
                directory = Path.GetDirectoryName(localPath) ?? "";
                fileName = Path.GetFileNameWithoutExtension(localPath);
            }
            
            return $"/Images/{fileName}_poster.jpg";
        }
        catch
        {
            return "/Images/iconI.png"; // Fallback poster
        }
    }
    
    private string GetVideoSizeInfo(string videoPath)
    {
        var fileName = Path.GetFileNameWithoutExtension(videoPath);
        return fileName switch
        {
            "testimonial_Fi" => "~76MB → ~25MB",
            "testimonial_Monica" => "~66MB → ~22MB", 
            "testimonial_Fran" => "~36MB → ~12MB",
            "testimonial_Laviniah" => "~19MB → ~6MB",
            "testimonial_Yannick" => "~12MB → ~4MB",
            "testimonial_Neuza" => "~23MB → ~8MB",
            "testimonial_Erica" => "~12MB → ~4MB",
            _ => "Optimized for faster loading"
        };
    }

    protected override void OnInitialized()
    {
        filteredTestimonials = testimonials.Take(displayedStoriesCount).ToList();
        hasMoreStories = testimonials.Count > displayedStoriesCount;
    }

    private void FilterByCategory(string category)
    {
        selectedCategory = category;
        displayedStoriesCount = 6; // Reset to initial count when filtering
        
        if (category == "all")
        {
            filteredTestimonials = testimonials.Take(displayedStoriesCount).ToList();
            hasMoreStories = testimonials.Count > displayedStoriesCount;
        }
        else
        {
            var categoryTestimonials = testimonials.Where(t => t.Category == category).ToList();
            filteredTestimonials = categoryTestimonials.Take(displayedStoriesCount).ToList();
            hasMoreStories = categoryTestimonials.Count > displayedStoriesCount;
            
            // Debug logging
            Logger.LogInformation($"Filtering by {category}. Found {filteredTestimonials.Count} testimonials:");
            foreach (var t in filteredTestimonials)
            {
                Logger.LogInformation($"  - Id: {t.Id}, Author: {t.Author}, Category: {t.Category}, Role: {t.Role}");
            }
        }
        
        // Reset video states when filtering - but use the original objects
        foreach (var testimonial in testimonials)
        {
            if (testimonial.IsPlaying)
            {
                _ = JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + testimonial.Id);
                testimonial.IsPlaying = false;
            }
        }
        
        // Force video elements to reload their sources after filtering
        _ = Task.Run(async () =>
        {
            await Task.Delay(100); // Small delay to ensure DOM is updated
            foreach (var t in filteredTestimonials)
            {
                await JSRuntime.InvokeVoidAsync("reloadVideo", "video-" + t.Id);
            }
        });
        
        StateHasChanged();
    }

    private void LoadMoreStories()
    {
        displayedStoriesCount += 6;
        
        // Update filtered testimonials based on current category and new count
        if (selectedCategory == "all")
        {
            filteredTestimonials = testimonials.Take(displayedStoriesCount).ToList();
            hasMoreStories = testimonials.Count > displayedStoriesCount;
        }
        else
        {
            var categoryTestimonials = testimonials.Where(t => t.Category == selectedCategory).ToList();
            filteredTestimonials = categoryTestimonials.Take(displayedStoriesCount).ToList();
            hasMoreStories = categoryTestimonials.Count > displayedStoriesCount;
        }
        
        StateHasChanged();
    }

    private async Task OnTestimonialVideoStarted(string videoId)
    {
        // Pause all other testimonial videos when one starts playing
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", $@"
                const startedVideoId = 'video-{videoId}';
                const allVideos = document.querySelectorAll('video[id^=""video-""]');
                allVideos.forEach(video => {{
                    if (video.id !== startedVideoId && !video.paused) {{
                        video.pause();
                    }}
                }});
            ");
        }
        catch
        {
            // Ignore errors
        }
    }

    private async Task ShareStory(int testimonialId)
    {
        var testimonial = testimonials.FirstOrDefault(t => t.Id == testimonialId);
        if (testimonial != null)
        {
            var shareText = $"🌟 Inspiring transformation story! Check out {testimonial.Author}'s amazing journey with Ítala Veloso's life coaching.";
            var shareUrl = $"https://italaveloso.com/services/coaching/Case-studies#{testimonial.Id}";
            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.share", new
                {
                    title = $"✨ {testimonial.Author}'s Success Story",
                    text = shareText,
                    url = shareUrl
                });
                Snackbar.Add($"Shared {testimonial.Author}'s story successfully! 🎉", Severity.Success);
                StateHasChanged();
            }
            catch
            {
                try
                {
                    var clipboardText = $"{shareText}\n\n👉 Read the full story: {shareUrl}\n\n#LifeCoaching #Transformation #SuccessStory";
                    await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", clipboardText);
                    Snackbar.Add($"📋 {testimonial.Author}'s story link copied to clipboard! Share it with friends!", Severity.Success);
                    StateHasChanged();
                }
                catch
                {
                    Snackbar.Add($"Please copy this link to share: {shareUrl}", Severity.Info);
                    StateHasChanged();
                }
            }
        }
        else
        {
            Snackbar.Add("Story not found. Please try again.", Severity.Warning);
            StateHasChanged();
        }
    }

    private async Task ToggleVideo(int testimonialId)
    {
        try
        {        
            var currentTestimonial = testimonials.First(t => t.Id == testimonialId);

            // Pause all other videos
            foreach(var testimonial in testimonials) 
            {
                if(testimonial.Id != testimonialId && testimonial.IsPlaying)
                {
                    await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + testimonial.Id);
                    testimonial.IsPlaying = false;
                }
            }

            if(!currentTestimonial.IsPlaying)
            {
                await JSRuntime.InvokeVoidAsync("playVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = true;
            } 
            else 
            {
                await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = false;
            }
        } 
        catch(Exception ex) 
        {
            Logger.LogError($"Error toggling video: {ex.Message}");
            Snackbar.Add("Unable to play video. Please try again.", Severity.Error);
        }

        StateHasChanged();        
    }

    private void OnVideoPlay(int testimonialId)
    {
        var testimonial = testimonials.FirstOrDefault(t => t.Id == testimonialId);
        if (testimonial != null)
        {
            testimonial.IsPlaying = true;
            StateHasChanged();
        }
    }

    private void OnVideoPause(int testimonialId)
    {
        var testimonial = testimonials.FirstOrDefault(t => t.Id == testimonialId);
        if (testimonial != null)
        {
            testimonial.IsPlaying = false;
            StateHasChanged();
        }
    }

    private void OnVideoEnded(int testimonialId)
    {
        var testimonial = testimonials.First(t => t.Id == testimonialId);
        testimonial.IsPlaying = false;
        StateHasChanged();
    }

    private string GetCaseStudiesStructuredData()
    {
        var reviews = testimonials.Take(3).Select(t => "{ " +
            "\"@type\": \"Review\", " +
            "\"reviewRating\": { " +
                "\"@type\": \"Rating\", " +
                "\"ratingValue\": \"5\", " +
                "\"bestRating\": \"5\" " +
            "}, " +
            "\"author\": { " +
                "\"@type\": \"Person\", " +
                "\"name\": \"" + t.Author + "\" " +
            "}, " +
            "\"reviewBody\": \"" + t.Results.Substring(0, Math.Min(200, t.Results.Length)) + "...\" " +
        "}").ToList();

        return "{ " +
            "\"@context\": \"https://schema.org\", " +
            "\"@type\": \"CollectionPage\", " +
            "\"name\": \"Case Studies - Coaching Success Stories\", " +
            "\"description\": \"Real success stories from Ítala Veloso's coaching clients showing transformation through life and career coaching.\", " +
            "\"url\": \"https://italaveloso.com/services/coaching/Case-studies\", " +
            "\"about\": { " +
                "\"@type\": \"Service\", " +
                "\"name\": \"Life and Career Coaching\", " +
                "\"provider\": { " +
                    "\"@type\": \"Person\", " +
                    "\"name\": \"Ítala Veloso\", " +
                    "\"url\": \"https://italaveloso.com\" " +
                "}, " +
                "\"aggregateRating\": { " +
                    "\"@type\": \"AggregateRating\", " +
                    "\"ratingValue\": \"5\", " +
                    "\"reviewCount\": \"" + testimonials.Count + "\", " +
                    "\"bestRating\": \"5\" " +
                "} " +
            "}, " +
            "\"mainEntity\": [" + string.Join(",", reviews) + "] " +
        "}";
    }

    public class Testimonial
    {
        public int Id { get; set; }
        public string Path { get; set; } = string.Empty;
        public string Challenge { get; set; } = string.Empty;
        public string Solution { get; set; } = string.Empty;
        public string Results { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public string Duration { get; set; } = string.Empty;
        public string VideoDuration { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public List<string> KeyAchievements { get; set; } = new List<string>();
        public bool IsPlaying { get; set; } = false;
    }
}