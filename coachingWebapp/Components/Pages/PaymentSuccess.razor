@page "/payment-success"
@rendermode InteractiveServer

<MudSnackbarProvider />

<section id="payment-status">
    <div class="payment-box">
        <MudPaper Elevation="1" Class="pa-6 d-flex flex-column align-center text-center">
            <MudText Typo="Typo.h5" Class="mb-4">Processing Payment</MudText>

            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-2">Verifying your payment...</MudText>
            }
            else if (isSuccess)
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-4">
                    Payment successful! Your session is confirmed.
                </MudAlert>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ReturnToDashboard">
                    Return to Dashboard
                </MudButton>
            }
            else
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-4">
                    @errorMessage
                </MudAlert>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ReturnToDashboard">
                    Return to Dashboard
                </MudButton>
            }
        </MudPaper>
    </div>
</section>

@code {
    [SupplyParameterFromQuery(Name = "sessionId")]
    public string? StripeSessionId { get; set; }

    private bool isLoading = true;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(StripeSessionId))
        {
            isLoading = false;
            isSuccess = false;
            errorMessage = "Invalid payment session. Please try again.";
            Snackbar.Add(errorMessage, Severity.Error);
            return;
        }

        try
        {
            var paymentConfirmed = await StripeService.ConfirmPaymentAsync(StripeSessionId);
            if (!paymentConfirmed)
            {
                isLoading = false;
                isSuccess = false;
                errorMessage = "Payment verification failed. Please contact support.";
                Snackbar.Add(errorMessage, Severity.Error);
                return;
            }

            var dbSession = await SessionService.GetAllSessionsAsync();
            var session = dbSession.FirstOrDefault(s => s.StripeSessionId == StripeSessionId);
            if (session == null)
            {
                isLoading = false;
                isSuccess = false;
                errorMessage = "Session not found. Please contact support.";
                Snackbar.Add(errorMessage, Severity.Error);
                await LogService.LogError("PaymentSuccess: Session not found", $"StripeSessionId: {StripeSessionId}");
                return;
            }

            if (!session.IsPaid)
            {
                session.IsPaid = true;
                session.PaidAt = DateTime.UtcNow;
                SessionService.UpdateSession(session);
            }

            var sessions = await SessionService.GetAllSessionsAsync();
            var videoSession = sessions
                .Select(s => s.VideoSession)
                .FirstOrDefault(vs => vs?.SessionRefId == session.Id);

            if (videoSession == null)
            {
                videoSession = new VideoSession
                {
                    UserId = session.Email,
                    SessionId = Guid.NewGuid().ToString(),
                    ScheduledAt = session.PreferredDateTime,
                    IsActive = true,
                    CreatedAt = DateTime.UtcNow,
                    Session = session,
                    SessionRefId = session.Id
                };
                await SessionService.CreateSessionAsync(session);
            }

            var subscriptionId = session.PackId;
            if (!string.IsNullOrEmpty(subscriptionId))
            {
                var registerUsageSuccess = await UserSubscriptionService.RegisterMonthlyUsage(session.Email, subscriptionId);

                if (registerUsageSuccess)
                {
                    await LogService.LogInfo("PaymentSuccess", $"Successfully registered monthly usage for user {session.Email}, subscription {subscriptionId}");
                }
                else
                {
                    await LogService.LogInfo("PaymentSuccess", $"No monthly usage registered for {session.Email}, PackId {subscriptionId} - likely a pack or single session");
                }
            }

            isLoading = false;
            isSuccess = true;
            Snackbar.Add("Payment successful! Your session is confirmed.", Severity.Success);
        }
        catch (Exception ex)
        {
            isLoading = false;
            isSuccess = false;
            errorMessage = "An error occurred while processing your payment. Please contact support.";
            Snackbar.Add(errorMessage, Severity.Error);
            await LogService.LogError("PaymentSuccess Error", ex.Message);
        }
    }

    private void ReturnToDashboard()
    {
        NavigationManager.NavigateTo("/UserDashboard");
    }
}
