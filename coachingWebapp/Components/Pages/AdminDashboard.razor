@page "/AdminDashboard"
@rendermode InteractiveServer

@inject SignInManager<IdentityUser> SignInManager
@inject IDialogService DialogService
<MudPopoverProvider/> @*only works if its in the page of the mud component*@
<MudDialogProvider/>
<MudSnackbarProvider />

@attribute [Authorize(Roles = "Admin")]
<PageTitle>@pageTitle</PageTitle>

<section id="adminDashboard">
    <div class="dashboard-header">
        <div>
            <h1><span class="highlight">Admin</span> Dashboard</h1>  
        
            <MudPaper Class="dashboard-welcome" Elevation="1">
                <MudText Typo="Typo.h5" Class="welcome-title">
                    Welcome back, @adminName!
                </MudText>

                <MudText Typo="Typo.subtitle1">
                    Here's a quick overview of your responsibilities today.
                </MudText>

                <MudStack Class="mt-4" Spacing="2">
                    <MudText Typo="Typo.body1">📅 <strong>@nextSessions.Count</strong> upcoming session(s) scheduled.</MudText>
                </MudStack>
            </MudPaper>
        </div>
    </div>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Calendar">
            <MudText Typo="Typo.h4">Sessions</MudText>
            <MudCalendar @ref="calendar" Items="@calendarItems" ItemClicked="OnSessionClicked" />

            <MudText Class="mt-3 mb-3" Typo="Typo.h4">Busy Time</MudText>
           <MudGrid Class="mt-2" Gutter="GutterSize.Small">
                <MudItem xs="12" sm="6">
                    <MudCard Class="p-4">
                        <MudCardContent>
                            <MudForm @ref="_busyForm" Model="_newUnavailableTime">
                                <MudGrid Dense="true" Class="busy-time-form">
                                    <MudItem xs="12" sm="12">
                                        <MudSelect T="DayOfWeek?" Label="Day of the week" Dense="true"
                                                @bind-Value="_newUnavailableTime.DayOfWeek" Required="true"
                                                RequiredError="Day of the week is required">
                                            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                                            {
                                                <MudSelectItem T="DayOfWeek?" Value="@day">@day</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>

                                    <MudItem xs="6" sm="6">
                                        <MudTimePicker Label="Start time" Dense="true" @bind-Time="_newUnavailableTime.StartTime"
                                                    Required="true" RequiredError="Start time is required" />
                                    </MudItem>

                                    <MudItem xs="6" sm="6">
                                        <MudTimePicker Label="End time" Dense="true" @bind-Time="_newUnavailableTime.EndTime"
                                                    Required="true" RequiredError="End time is required" />
                                    </MudItem>

                                    <MudItem xs="12">
                                        <MudCheckBox T="bool" Label="Recurring weekly" @bind-Checked="_newUnavailableTime.IsRecurring" />
                                    </MudItem>

                                    <MudItem xs="12">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                StartIcon="@Icons.Material.Filled.Add"
                                                OnClick="HandleAddUnavailability">
                                            Add
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudForm>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudPaper Class="p-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Unavailable Times:</MudText>
                       <MudList T="UnavailableTime" Dense="true" Hover="true">
                        @if (_adminUnavailableTimes.Any())
                        {
                            @foreach (var time in _adminUnavailableTimes)
                            {
                                <MudListItem Class="busy-time-entry">
                                    <div class="busy-time-info">
                                        <strong>@time.DayOfWeek</strong>: @time.StartTime - @time.EndTime
                                        @if (time.IsRecurring)
                                        {
                                            <span class="ml-2 text-success d-inline-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Loop" Size="Size.Small" Class="mr-1" />
                                                Recurring
                                            </span>
                                        }
                                        <div class="busy-time-actions">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                        Color="Color.Primary"
                                                        OnClick="@(() => StartEditUnavailability(time))"
                                                        Size="Size.Small" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                        Color="Color.Error"
                                                        OnClick="@(() => DeleteUnavailableTime(time.Id))"
                                                        Size="Size.Small" />
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem>
                                <MudText>No unavailable times defined.</MudText>
                            </MudListItem>
                        }
                    </MudList>

                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        <MudTabPanel Text="Sessions">
            <MudDataGrid T="Session" Items="@sessions" Breakpoint="Breakpoint.Sm" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true"
                         Hideable="true" QuickFilter="@quickFilterSessions">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Contacts</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchContactsString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                    <MudTooltip Text="Export to Excel">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportContactsToExcel">
                            <i class="fa-solid fa-file-csv"></i>
                        </MudButton>
                    </MudTooltip>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="Session" />
                    <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                    <PropertyColumn Property="x => x.FullName" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false" Filterable="true" />
                    <PropertyColumn Property="x => x.SessionCategory" Title="Session" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Message" Title="Message" Sortable="false" Filterable="true">
                        <CellTemplate>
                            <div style="overflow-y: auto; max-height: 60px; max-width: 450px; white-space: normal; word-wrap: break-word; padding: 0; margin: 0;">
                                @context.Item.Message
                            </div>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.CreatedAt" Title="CreatedAt" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @context.Item.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Session" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Email Subscriptions">
            <MudDataGrid T="EmailSubscription" Items="@emailSubscriptions" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true"
                         Hideable="true" QuickFilter="@quickFilterEmailSubscriptions" @ref="emailSubscriptionGrid">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Email Subscriptions</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!emailSubscriptionGrid.SelectedItems.Any())" OnClick="OpenEmailDialogAsync">
                        Send Email
                    </MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchEmailSubscriptionsString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                    <MudTooltip Text="Export to Excel">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportEmailSubscriptionsToExcel">
                            <i class="fa-solid fa-file-csv"></i>
                        </MudButton>
                    </MudTooltip>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="EmailSubscription" />
                    <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                    <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.IsSubscribed" Title="Subscribed" Sortable="false" Filterable="true" >
                        <CellTemplate>
                            @if (context.Item.IsSubscribed)
                            {
                                <span class="text-success"><i class="fas fa-check-circle"></i> Yes</span>
                            }
                            else
                            {
                                <span class="text-danger"><i class="fas fa-times-circle"></i> No</span>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SubscribedAt" Title="Subscribed Date" Sortable="true" Filterable="true">
                        <CellTemplate>
                            @context.Item.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.UnsubscribedAt" Title="Unsubscribed Date" Sortable="false" Filterable="true" />
                    <PropertyColumn Property="x => x.CreatedAt" Title="Created Date" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @context.Item.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="EmailSubscription" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Session Prices">
            <MudText Typo="Typo.h5" Class="mb-2">Session Prices</MudText>

            <MudTable Items="@sessionPrices" Hover="true">
                <HeaderContent>
                    <MudTh>Session Type</MudTh>
                    <MudTh>Price (EUR)</MudTh>
                    <MudTh>Last Updated</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudSelect T="SessionType" @bind-Value="context.SessionType" Dense="true">
                            @foreach (var type in GetAvailableSessionTypes(context))
                            {
                                <MudSelectItem Value="@type">@type.GetDisplayName()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd>
                        <MudNumericField T="decimal" @bind-Value="context.PriceEUR" Adornment="Adornment.Start" AdornmentText="€" />
                    </MudTd>
                    <MudTd>@context.LastUpdated.ToString("dd-MM-yyyy")</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SavePrice(context)">
                            Save
                        </MudButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeletePrice(context.Id)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudButton Class="mt-3" Color="Color.Secondary" Variant="Variant.Filled" OnClick="AddNewPrice">
                Add Configuration Price
            </MudButton>
        </MudTabPanel>

        <MudTabPanel Text="Session Packs">
            <MudText Typo="Typo.h5" Class="mb-3">Manage Session Pack Definitions</MudText>

            <MudTable Items="@sessionPackDefinitions" Hover="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Total Sessions</MudTh>
                    <MudTh>Price (EUR)</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><MudTextField @bind-Value="context.Name" /></MudTd>
                    <MudTd><MudTextField @bind-Value="context.Description" /></MudTd>
                    <MudTd><MudNumericField T="int" @bind-Value="context.TotalSessions" /></MudTd>
                    <MudTd><MudNumericField T="decimal" @bind-Value="context.PriceEUR" Adornment="Adornment.Start" AdornmentText="€" /></MudTd>
                    <MudTd>
                        <MudButton OnClick="() => SavePackDefinition(context)">Save</MudButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeletePackDefinition(context.Id)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudButton Class="mt-3" OnClick="AddNewPackDefinition" Variant="Variant.Filled" Color="Color.Secondary">
                Add New Pack
            </MudButton>
        </MudTabPanel>

        <MudTabPanel Text="Subscription Plans">
            <MudText Typo="Typo.h5" Class="mb-3">Manage Subscription Plans</MudText>

            <MudTable Items="@subscriptionPlans" Hover="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Monthly Limit</MudTh>
                    <MudTh>Price (EUR)</MudTh>
                    <MudTh>Stripe ID</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudTextField @bind-Value="context.Name" />
                    </MudTd>
                    <MudTd>
                        <MudNumericField T="int" @bind-Value="context.MonthlySessionLimit" />
                    </MudTd>
                    <MudTd>
                        <MudNumericField T="decimal" @bind-Value="context.PriceEUR" Adornment="Adornment.Start" AdornmentText="€" />
                    </MudTd>
                    <MudTd>
                        <MudTextField @bind-Value="context.StripePriceId" />
                    </MudTd>
                    <MudTd>
                        <MudButton Color="Color.Primary" OnClick="() => SavePlan(context)">Save</MudButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeletePlan(context.Id)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddNewPlan">
                Add New Plan
            </MudButton>
        </MudTabPanel>

    </MudTabs>
</section>

@code {
    private string pageTitle = "Admin Dashboard | Ítala Veloso";
    private string adminName;
    private List<Session> nextSessions = new();
    private AuthenticationState authState;
    private List<Session> sessions;
    private List<EmailSubscription> emailSubscriptions;
    private MudDataGrid<EmailSubscription> emailSubscriptionGrid;
    private MudCalendar calendar;
    private List<CalendarItem> calendarItems = new();
    private MudForm _busyForm;

    private string loginError = string.Empty;
    private string searchContactsString {get; set;}
    private string searchEmailSubscriptionsString {get; set;}

    private Func<Session, bool> quickFilterSessions => c =>
        string.IsNullOrEmpty(searchContactsString) ||
        c.FullName.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Email.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Message.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase);

    private Func<EmailSubscription, bool> quickFilterEmailSubscriptions => e =>
        string.IsNullOrEmpty(searchEmailSubscriptionsString) ||
        e.Name.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase) ||
        e.Email.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase);

    private UnavailableTime _newUnavailableTime = new();
    private List<UnavailableTime> _adminUnavailableTimes = new();
    private List<SessionPrice> sessionPrices = new();
    private List<SessionPackDefinition> sessionPackDefinitions = new();
    private List<SubscriptionPlan> subscriptionPlans = new();

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var identityUser = await UserManager.FindByNameAsync(user.Identity.Name);
            adminName = identityUser?.UserName ?? "Admin";
        }

        sessions = await SessionService.GetAllSessionsAsync() ?? new List<Session>();
        emailSubscriptions = EmailSubscriptionService.GetAllEmailSubscriptions() ?? new List<EmailSubscription>();
        calendarItems = sessions.Select(c => new CalendarItem
        {
            Start = c.PreferredDateTime,
            End = c.PreferredDateTime.AddMinutes(45),
            Text = $"{c.FullName} - {c.SessionCategory}"
        }).ToList();
        _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();

        nextSessions = sessions
                .Where(s => s.CreatedAt >= DateTime.UtcNow)
                .ToList();

        sessionPrices = await SessionPriceService.GetAllAsync();
        sessionPackDefinitions = await SessionPackDefinitionService.GetAllAsync();
        subscriptionPlans = await SubscriptionPlanService.GetAllAsync();

        StateHasChanged();
    }

    private async Task OnSessionClicked(CalendarItem item)
    {
        var session = sessions.FirstOrDefault(s => 
            s.PreferredDateTime == item.Start && 
            item.Text.Contains(s.FullName));

        if (session == null)
            return;

        var parameters = new DialogParameters
        {
            { "Session", session }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true 
        };

        await DialogService.ShowAsync<SessionDialog>("Session Details", parameters, options);
    }

    private async Task HandleAddUnavailability()
    {
        await _busyForm.Validate();

        if (!_busyForm.IsValid)
            return;

        await AddUnavailability();
    }

    private async Task AddUnavailability()
    {
        if (_newUnavailableTime.Id == 0)
        {
            await UnavailableTimeService.CreateUnavailableTimeAsync(_newUnavailableTime);
        }
        else
        {
            await UnavailableTimeService.UpdateUnavailableTimeAsync(_newUnavailableTime);
        }

        _newUnavailableTime = new(); // reset
        _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
    }


    private void StartEditUnavailability(UnavailableTime time)
    {
        _newUnavailableTime = new UnavailableTime
        {
            Id = time.Id,
            DayOfWeek = time.DayOfWeek,
            StartTime = time.StartTime,
            EndTime = time.EndTime,
            IsRecurring = time.IsRecurring
        };
    }

    private async Task DeleteUnavailableTime(int id)
    {
        await UnavailableTimeService.DeleteUnavailableTimeAsync(id);
        _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
    }

    private IEnumerable<SessionType> GetAvailableSessionTypes(SessionPrice current)
    {
        var usedTypes = sessionPrices
            .Where(p => p != current)
            .Select(p => p.SessionType)
            .ToHashSet();

        return Enum.GetValues<SessionType>()
            .Where(t => !usedTypes.Contains(t));
    }

    private async Task SavePrice(SessionPrice price)
    {
        try
        {
            await SessionPriceService.AddOrUpdateAsync(price);
            Snackbar.Add("Price saved successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving price.", Severity.Error);
        }
    }

    private async Task DeletePrice(int id)
    {
        try
        {
            await SessionPriceService.DeleteAsync(id);
            sessionPrices = await SessionPriceService.GetAllAsync();
            Snackbar.Add("Price deleted.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting price.", Severity.Error);
        }
    }

    private void AddNewPrice()
    {
        var available = GetAvailableSessionTypes(null).ToList();

        if (available.Any())
        {
            sessionPrices.Add(new SessionPrice
            {
                SessionType = available.First(),
                PriceEUR = 0
            });
            Snackbar.Add("New session price added. Don’t forget to save!", Severity.Info);
        }
        else
        {
            Snackbar.Add("All session types already have prices configured.", Severity.Warning);
        }
    }

    private Task OpenEmailDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "RecipientEmails", emailSubscriptionGrid.SelectedItems.Select(e => e.Email).ToList() }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true,
            CloseOnEscapeKey = true, 
            MaxWidth = MaxWidth.Large, 
            FullWidth = true
        };

        return DialogService.ShowAsync<SendEmailDialog>("Compose Email", parameters, options);
    }

    private async Task ExportContactsToExcel()
    {
        using var workbook = new ClosedXML.Excel.XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Contacts");

        worksheet.Cell(1, 1).Value = "Id";
        worksheet.Cell(1, 2).Value = "FullName";
        worksheet.Cell(1, 3).Value = "Email";
        worksheet.Cell(1, 4).Value = "Session";
        worksheet.Cell(1, 5).Value = "Message";
        worksheet.Cell(1, 6).Value = "CreatedAt";

        var filteredSessions = sessions.Where(quickFilterSessions).ToList();

        for (int i = 0; i < filteredSessions.Count; i++)
        {
            var contact = filteredSessions[i];
            worksheet.Cell(i + 2, 1).Value = contact.Id;
            worksheet.Cell(i + 2, 2).Value = contact.FullName;
            worksheet.Cell(i + 2, 3).Value = contact.Email;
            worksheet.Cell(i + 2, 4).Value = contact.SessionCategory.ToString();
            worksheet.Cell(i + 2, 5).Value = contact.Message;
            worksheet.Cell(i + 2, 6).Value = contact.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        var fileName = $"Contacts_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
    }

    private async Task ExportEmailSubscriptionsToExcel()
    {
        using var workbook = new ClosedXML.Excel.XLWorkbook();
        var worksheet = workbook.Worksheets.Add("EmailSubscriptions");

        worksheet.Cell(1, 1).Value = "Id";
        worksheet.Cell(1, 2).Value = "Name";
        worksheet.Cell(1, 3).Value = "Email";
        worksheet.Cell(1, 4).Value = "IsSubscribed";
        worksheet.Cell(1, 5).Value = "SubscribedAt";
        worksheet.Cell(1, 6).Value = "UnsubscribedAt";
        worksheet.Cell(1, 7).Value = "CreatedAt";

        var filteredEmailSubscriptions = emailSubscriptions.Where(quickFilterEmailSubscriptions).ToList();

        for (int i = 0; i < filteredEmailSubscriptions.Count; i++)
        {
            var subscription = filteredEmailSubscriptions[i];
            worksheet.Cell(i + 2, 1).Value = subscription.Id;
            worksheet.Cell(i + 2, 2).Value = subscription.Name;
            worksheet.Cell(i + 2, 3).Value = subscription.Email;
            worksheet.Cell(i + 2, 4).Value = subscription.IsSubscribed ? "Yes" : "No";
            worksheet.Cell(i + 2, 5).Value = subscription.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
            worksheet.Cell(i + 2, 6).Value = subscription.UnsubscribedAt?.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
            worksheet.Cell(i + 2, 7).Value = subscription.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        var fileName = $"EmailSubscriptions_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
    }

    private void AddNewPackDefinition()
    {
        sessionPackDefinitions.Add(new SessionPackDefinition
        {
            Name = "New Pack",
            Description = "Enter description...",
            TotalSessions = 5,
            PriceEUR = 0
        });

        Snackbar.Add("New session pack definition added. Don’t forget to save!", Severity.Info);
    }

    private async Task SavePackDefinition(SessionPackDefinition pack)
    {
        if (pack.Id == 0)
        {
            await SessionPackDefinitionService.CreateAsync(pack);
            Snackbar.Add("Session pack definition created.", Severity.Success);
        }
        else
        {
            await SessionPackDefinitionService.UpdateAsync(pack);
            Snackbar.Add("Session pack definition updated.", Severity.Success);
        }

        sessionPackDefinitions = await SessionPackDefinitionService.GetAllAsync();
    }

    private async Task DeletePackDefinition(int id)
    {
        await SessionPackDefinitionService.DeleteAsync(id);
        sessionPackDefinitions = await SessionPackDefinitionService.GetAllAsync();
        Snackbar.Add("Session pack definition deleted.", Severity.Info);
    }

    private async Task SavePlan(SubscriptionPlan plan)
    {
        await SubscriptionPlanService.AddOrUpdateAsync(plan);
        Snackbar.Add("Subscription plan saved.", Severity.Success);
        subscriptionPlans = await SubscriptionPlanService.GetAllAsync();
    }

    private async Task DeletePlan(int id)
    {
        await SubscriptionPlanService.DeleteAsync(id);
        subscriptionPlans = await SubscriptionPlanService.GetAllAsync();
        Snackbar.Add("Subscription plan deleted.", Severity.Info);
    }

    private void AddNewPlan()
    {
        subscriptionPlans.Add(new SubscriptionPlan
        {
            Name = "New Plan",
            MonthlySessionLimit = 4,
            PriceEUR = 0,
            StripePriceId = ""
        });
        Snackbar.Add("New plan added. Don’t forget to save!", Severity.Info);
    }
}