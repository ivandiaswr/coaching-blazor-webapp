@page "/AdminDashboard"
@rendermode InteractiveServer

<MudPopoverProvider/>
<MudSnackbarProvider />
<MudDialogProvider />

@attribute [Authorize(Roles = "Admin")]
<PageTitle>@pageTitle</PageTitle>

<section id="adminDashboard">
    <div class="dashboard-header">
        <div>
            @* <h1><span class="highlight">Admin</span> Dashboard</h1> *@
        
            <MudPaper Class="dashboard-welcome" Elevation="1">
                <MudText Typo="Typo.h5" Class="welcome-title">
                    Welcome back, @adminName!
                </MudText>

               @if (nextSessions.Any(s => s.VideoSession != null && s.VideoSession.ScheduledAt >= DateTime.UtcNow))
                {
                    var closestSession = nextSessions
                        .Where(s => s.VideoSession != null && s.VideoSession.ScheduledAt >= DateTime.UtcNow)
                        .OrderBy(s => s.VideoSession.ScheduledAt)
                        .First();
                    var sessionLocalTime = TimeZoneInfo.ConvertTimeFromUtc(closestSession.VideoSession.ScheduledAt, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone));
                    var currentLocalTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone));
                    var isToday = sessionLocalTime.Date == currentLocalTime.Date;
                    <MudText Typo="Typo.subtitle1" Class="mb-4">
                        Your next session is scheduled for
                        <strong>@(isToday ? $"Today at {sessionLocalTime:HH:mm}" : sessionLocalTime.ToString("MMMM dd 'at' HH:mm")) (@adminTimeZone)</strong>. Prepare to guide your client!
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Class="mb-4">
                        No upcoming sessions scheduled. Check back later or review past sessions.
                    </MudText>
                }

                <MudStack Class="mt-4" Spacing="2">
                    <MudText Typo="Typo.body1">📅 <strong>@nextSessions.Count(s => (s.VideoSession != null && s.VideoSession.ScheduledAt >= DateTime.UtcNow) || (s.VideoSession == null && s.PreferredDateTime >= DateTime.UtcNow))</strong> upcoming session(s) scheduled.</MudText>
                </MudStack>
            </MudPaper>
        </div>
    </div>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Calendar">
            <!-- Calendar Legend -->
            <MudPaper Class="pa-3 mb-4" Elevation="1">
                <MudText Typo="Typo.h6" Class="mb-2">Session Status Legend:</MudText>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6" md="3">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="color: #4caf50;" Size="Size.Small" />
                            <MudText Typo="Typo.body2">Completed</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="color: #f44336;" Size="Size.Small" />
                            <MudText Typo="Typo.body2">Missed/No-show</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="color: #ffc107;" Size="Size.Small" />
                            <MudText Typo="Typo.body2">Unscheduled Requests</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="color: #9e9e9e;" Size="Size.Small" />
                            <MudText Typo="Typo.body2">Upcoming</MudText>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
            
            <MudCalendar @ref="calendar" 
                        Items="@calendarItems" 
                        ItemClicked="OnSessionClicked"
                        View="CalendarView.Week"
                        ShowTodayButton="true"/>

            <MudGrid Class="mt-2" Spacing="3">
                <MudItem xs="12" sm="6">
                    <MudCard Elevation="3">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mr-2" />
                                    Add New Unavailable Time
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-6">
                            <MudForm @ref="_busyForm">
                                <MudStack Spacing="4">
                                    <MudPaper Class="pa-4" Elevation="1" Style="background-color: var(--mud-palette-background-grey);">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                            <MudIcon Icon="@(_newUnavailableTime.IsRecurring ? Icons.Material.Filled.Loop : Icons.Material.Filled.Event)" 
                                                   Color="@(_newUnavailableTime.IsRecurring ? Color.Success : Color.Info)" 
                                                   Size="Size.Medium" />
                                            <MudSwitch T="bool" 
                                                     Label="Recurring Weekly" 
                                                     Value="_newUnavailableTime.IsRecurring"
                                                     ValueChanged="@(value => OnIsRecurringChanged(value))"
                                                     Color="Color.Primary"
                                                     ThumbIcon="@(_newUnavailableTime.IsRecurring ? Icons.Material.Filled.Loop : Icons.Material.Filled.Event)"
                                                     Class="ml-2" />
                                        </MudStack>
                                    </MudPaper>

                                    <MudStack Spacing="2">
                                        @if (_newUnavailableTime.IsRecurring)
                                        {
                                            <MudSelect T="DayOfWeek?" 
                                                     Label="Day of Week" 
                                                     @bind-Value="_newUnavailableTime.DayOfWeek"
                                                     For="@(() => _newUnavailableTime.DayOfWeek)"
                                                     Variant="Variant.Outlined"
                                                     AnchorOrigin="Origin.BottomCenter"
                                                     TransformOrigin="Origin.TopCenter">
                                                @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                                                {
                                                    <MudSelectItem Value="@((DayOfWeek?)day)">@day.ToString()</MudSelectItem>
                                                }
                                            </MudSelect>
                                        }
                                        else
                                        {
                                            <MudDatePicker Label="Date" 
                                                         @bind-Date="_newUnavailableTime.Date" 
                                                         For="@(() => _newUnavailableTime.Date)"
                                                         DateFormat="dd-MM-yyyy"
                                                         Variant="Variant.Outlined"
                                                         MinDate="DateTime.Today"
                                                         ShowToolbar="true" />
                                        }
                                    </MudStack>

                                    <MudGrid Spacing="2">
                                        <MudItem xs="6">
                                            <MudTimePicker Label="Start Time" 
                                                         @bind-Time="_newUnavailableTime.StartTime"
                                                         For="@(() => _newUnavailableTime.StartTime)"
                                                         TimeFormat="HH:mm"
                                                         Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTimePicker Label="End Time" 
                                                         @bind-Time="_newUnavailableTime.EndTime"
                                                         For="@(() => _newUnavailableTime.EndTime)"
                                                         TimeFormat="HH:mm"
                                                         Variant="Variant.Outlined" />
                                        </MudItem>
                                    </MudGrid>

                                    <MudTextField Label="Reason (Optional)" 
                                                @bind-Value="_newUnavailableTime.Reason"
                                                Placeholder="e.g., Weekly team meeting, Personal appointment"
                                                MaxLength="100"
                                                Variant="Variant.Outlined"
                                                Lines="2"
                                                HelperText="@($"{(_newUnavailableTime.Reason?.Length ?? 0)}/100 characters")" />

                                    <MudButton Variant="Variant.Filled" 
                                             Color="Color.Primary" 
                                             OnClick="HandleAddUnavailability"
                                             Disabled="@isSubmitting"
                                             StartIcon="@Icons.Material.Filled.Save"
                                             Size="Size.Large"
                                             FullWidth="true"
                                             Class="mt-2">
                                        @if (isSubmitting)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Adding...</MudText>
                                        }
                                        else
                                        {
                                            <MudText>Add Unavailable Time</MudText>
                                        }
                                    </MudButton>
                                </MudStack>
                            </MudForm>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudCard Elevation="3">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small" Class="mr-2" />
                                    Registered Times
                                </MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudChip T="string" 
                                       Color="Color.Primary" 
                                       Size="Size.Small">
                                    @_adminUnavailableTimes.Count Items
                                </MudChip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            @if (_adminUnavailableTimes.Any())
                            {
                                <MudDataGrid T="UnavailableTime"
                                            Items="@_adminUnavailableTimes"
                                            Hover="true"
                                            Dense="true"
                                            Height="500px"
                                            Elevation="0"
                                            Breakpoint="Breakpoint.Sm">
                                    <Columns>
                                        <TemplateColumn Title="Date/Day" Sortable="false" HeaderStyle="font-weight: 600; text-align: center;">
                                            <CellTemplate>
                                                @if (context.Item.IsRecurring)
                                                {
                                                    <MudStack Spacing="1">
                                                        <MudChip T="string" 
                                                               Color="Color.Success" 
                                                               Size="Size.Small"
                                                               Icon="@Icons.Material.Filled.Loop">
                                                            Recurring
                                                        </MudChip>
                                                        <MudText Typo="Typo.body2" Style="font-weight: 500;">
                                                            @context.Item.DayOfWeek
                                                        </MudText>
                                                    </MudStack>
                                                }
                                                else
                                                {
                                                    <MudStack Spacing="1">
                                                        <MudChip T="string" 
                                                               Color="Color.Info" 
                                                               Size="Size.Small"
                                                               Icon="@Icons.Material.Filled.Event">
                                                            One-time
                                                        </MudChip>
                                                        <MudText Typo="Typo.body2" Style="font-weight: 500;">
                                                            @context.Item.Date?.ToString("dd-MM-yyyy")
                                                        </MudText>
                                                    </MudStack>
                                                }
                                            </CellTemplate>
                                        </TemplateColumn>
                                        <TemplateColumn Title="Time" Sortable="false" HeaderStyle="font-weight: 600; text-align: center;">
                                            <CellTemplate>
                                                <MudStack Spacing="1">
                                                    <MudText Typo="Typo.body2" Style="font-weight: 500;">
                                                        @($"{context.Item.StartTime} - {context.Item.EndTime}")
                                                    </MudText>
                                                    <MudText Typo="Typo.caption" Class="text-muted">
                                                        (@adminTimeZone)
                                                    </MudText>
                                                </MudStack>
                                            </CellTemplate>
                                        </TemplateColumn>
                                        <TemplateColumn Title="Action" Sortable="false" Filterable="false" HeaderStyle="font-weight: 600; text-align: center;">
                                            <CellTemplate>
                                                <MudTooltip Text="Delete">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                 Color="Color.Error"
                                                                 OnClick="@(() => ConfirmDeleteUnavailableTime(context.Item.Id))"
                                                                 Size="Size.Small" />
                                                </MudTooltip>
                                            </CellTemplate>
                                        </TemplateColumn>
                                    </Columns>
                                </MudDataGrid>
                            }
                            else
                            {
                                <MudPaper Class="pa-8" Elevation="0">
                                    <MudStack AlignItems="AlignItems.Center" Spacing="3">
                                        <MudIcon Icon="@Icons.Material.Filled.EventBusy" 
                                               Size="Size.Large" 
                                               Color="Color.Default" />
                                        <MudText Typo="Typo.h6" Color="Color.Default">
                                            No unavailable times defined
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Default" Align="Align.Center">
                                            Add your first unavailable time using the form on the left to block out periods when you're not available for sessions.
                                        </MudText>
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        <MudTabPanel Text="Sessions">
            <MudDataGrid T="Session"
                        Items="@sessions"
                        Hover="true"
                        Bordered="true"
                        Breakpoint="Breakpoint.Sm" 
                        MultiSelection="true" 
                        SortMode="SortMode.Multiple" 
                        Filterable="true"
                        FilterMode="DataGridFilterMode.Simple"
                        ShowMenuIcon="true"
                        Hideable="true" 
                        QuickFilter="@quickFilterSessions">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Sessions</MudText>
                     <div class="d-flex align-center ml-auto gap-2">            
                        <MudTooltip Text="Export to Excel">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportContactsToExcel">
                                <i class="fa-solid fa-file-csv"></i>
                            </MudButton>
                        </MudTooltip>
                        <MudTextField @bind-Value="searchContactsString" 
                                    Placeholder="Search" 
                                    Adornment="Adornment.Start" 
                                    Immediate="true"
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium">
                        </MudTextField>
                    </div>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="Session" />
                    <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                    <PropertyColumn Property="x => x.FullName" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false" Filterable="true" />
                    <PropertyColumn Property="x => x.SessionCategory.GetDisplayName()" Title="Category" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Message" Title="Message" Sortable="false" Filterable="true">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.Message">
                                <div style="max-width: 300px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.Item.Message
                                </div>
                            </MudTooltip>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.IsPaid" Title="Paid" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @if (context.Item.DiscoveryCall)
                            {
                                <span class="text-info"><i class="fas fa-phone"></i> Discovery Call</span>
                            }
                            else if (context.Item.IsPaid)
                            {
                                <span class="text-success"><i class="fas fa-check-circle"></i> Yes</span>
                            }
                            else
                            {
                                <span class="text-danger"><i class="fas fa-times-circle"></i> No</span>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.VideoSession != null ? x.VideoSession.ScheduledAt : (DateTime?)null" Title="ScheduleAt" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @if (context.Item.VideoSession != null)
                            {
                                @TimeZoneInfo.ConvertTimeFromUtc(context.Item.VideoSession.ScheduledAt, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone)).ToString("dd-MM-yyyy HH:mm:ss") <text>(@adminTimeZone)</text>
                            }
                            else
                            {
                                <span class="text-muted">N/A</span>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <TemplateColumn Title="Actions" Sortable="false" Filterable="false">
                        <CellTemplate>
                            @if (context.Item.VideoSession != null)
                            {
                                <MudTooltip Text="Edit Scheduled Time">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                 Color="Color.Primary"
                                                 Size="Size.Small"
                                                 OnClick="@(() => OpenEditScheduleDialog(context.Item))" />
                                </MudTooltip>
                            }
                            else
                            {
                                <span class="text-muted">No Video Session</span>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    @* <PropertyColumn Property="x => x.PaidAt" Title="PaidAt" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @TimeZoneInfo.ConvertTimeFromUtc(context.Item.PaidAt, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone)).ToString("dd-MM-yyyy HH:mm:ss") (@adminTimeZone)
                        </CellTemplate>
                    </PropertyColumn> *@
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Session" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Email Subscriptions">
            <MudDataGrid T="EmailSubscription" 
                        Items="@emailSubscriptions" 
                        Hover="true"
                        Bordered="true"
                        MultiSelection="true" 
                        SortMode="SortMode.Multiple" 
                        Filterable="true"
                        FilterMode="DataGridFilterMode.Simple"
                        ShowMenuIcon="true"
                        Hideable="true" 
                        QuickFilter="@quickFilterEmailSubscriptions" 
                        @ref="emailSubscriptionGrid">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Email Subscriptions</MudText>
                    <div class="d-flex align-center ml-auto gap-2">
                        <MudTooltip Text="Export to Excel">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportEmailSubscriptionsToExcel">
                                <i class="fa-solid fa-file-csv"></i>
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="Send Emails">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                    Disabled="@(!emailSubscriptionGrid.SelectedItems.Any())"
                                    OnClick="OpenEmailDialogAsync">
                                <i class="fa-regular fa-paper-plane"></i>
                            </MudButton>
                        </MudTooltip>
                        <MudTextField @bind-Value="searchEmailSubscriptionsString"
                                    Placeholder="Search"
                                    Adornment="Adornment.Start"
                                    Immediate="true"
                                    AdornmentIcon="@Icons.Material.Filled.Search"
                                    IconSize="Size.Medium" />
                    </div>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="EmailSubscription" />
                    <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                    <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.IsSubscribed" Title="Subscribed" Sortable="false" Filterable="true" >
                        <CellTemplate>
                            @if (context.Item.IsSubscribed)
                            {
                                <span class="text-success"><i class="fas fa-check-circle"></i> Yes</span>
                            }
                            else
                            {
                                <span class="text-danger"><i class="fas fa-times-circle"></i> No</span>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SubscribedAt" Title="Subscribed Date" Sortable="true" Filterable="true">
                        <CellTemplate>
                            @context.Item.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.UnsubscribedAt" Title="Unsubscribed Date" Sortable="false" Filterable="true" />
                    <PropertyColumn Property="x => x.CreatedAt" Title="Created Date" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @context.Item.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                    <TemplateColumn Title="Action" Sortable="false" Filterable="false">
                        <CellTemplate>
                            <MudTooltip Text="Delete Email Subscription">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                             Color="Color.Error"
                                             Size="Size.Small"
                                             OnClick="@(() => ConfirmDeleteEmailSubscription(context.Item.Id))" />
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="EmailSubscription" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Pricing Configuration">
            <MudAlert Severity="Severity.Info" Class="mt-3 mb-3" Dense="true" NoIcon="false">
                    <MudText Typo="Typo.body2">
                        <strong>💡 Tips:</strong> 
                        • Single sessions are for one-time bookings 
                        • Packages offer discounts for multiple sessions 
                        • Subscriptions are monthly recurring payments
                    </MudText>
            </MudAlert>

            <MudTabs Elevation="1" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
                @foreach (var sessionType in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                {
                    <MudTabPanel Text="@sessionType.GetDisplayName()">
                        <MudGrid Spacing="4" Justify="Justify.Center">
                            
                            <!-- Single Session Price Section -->
                            <MudItem xs="12">
                                <MudCard Class="pricing-card" Elevation="3" Style="border-left: 4px solid #2196F3;">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" />
                                                <div>
                                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                                        🎯 Individual Session
                                                    </MudText>
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                        Price for a single @sessionType.GetDisplayName().ToLower() session
                                                    </MudText>
                                                </div>
                                            </MudStack>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent Class="pa-6">
                                        <MudForm @ref="singleForms[sessionType]">
                                            <MudGrid Spacing="3" AlignItems="AlignItems.End">
                                                <MudItem xs="12" sm="6">
                                                    <MudNumericField Label="Session Price"
                                                                    HelperText="How much do you charge for one session?"
                                                                    @bind-Value="singlePrices[sessionType].PriceGBP"
                                                                    For="@(() => singlePrices[sessionType].PriceGBP)"
                                                                    Adornment="Adornment.Start"
                                                                    AdornmentText="£"
                                                                    Required="true"
                                                                    RequiredError="Please enter a price"
                                                                    Min="0"
                                                                    Variant="Variant.Outlined"
                                                                    Style="font-size: 1.2em;" />
                                                </MudItem>
                                                <MudItem xs="12" sm="6">
                                                    <MudButton Variant="Variant.Filled"
                                                            Color="Color.Success"
                                                            OnClick="@(() => SaveSinglePrice(sessionType))"
                                                            Size="Size.Large"
                                                            StartIcon="@Icons.Material.Filled.Save"
                                                            FullWidth="true">
                                                        💾 Save Price
                                                    </MudButton>
                                                </MudItem>
                                            </MudGrid>
                                        </MudForm>
                                        
                                        @if (singlePrices[sessionType].PriceGBP > 0)
                                        {
                                            <MudPaper Class="pa-3 mt-4" Elevation="0" Style="background-color: #e8f5e8; border-left: 3px solid #4caf50;">
                                                <MudText Typo="Typo.body2" Color="Color.Success">
                                                    ✅ Current price: <strong>£@singlePrices[sessionType].PriceGBP</strong> per session
                                                </MudText>
                                            </MudPaper>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>

                            <!-- Session Packs Section -->
                            <MudItem xs="12">
                                <MudCard Class="pricing-card" Elevation="3" Style="border-left: 4px solid #FF9800;">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                <MudIcon Icon="@Icons.Material.Filled.Inventory" Color="Color.Warning" />
                                                <div>
                                                    <MudText Typo="Typo.h6" Color="Color.Warning">
                                                        📦 Session Packages
                                                    </MudText>
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                        Offer multiple sessions at a discounted rate
                                                    </MudText>
                                                </div>
                                            </MudStack>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudButton Variant="Variant.Outlined"
                                                    Color="Color.Warning"
                                                    OnClick="@(() => AddNewSessionPack(sessionType))"
                                                    Disabled="@(packPrices[sessionType].Count >= MAX_PACKS)"
                                                    StartIcon="@Icons.Material.Filled.Add"
                                                    Size="Size.Small">
                                                ➕ Add Package
                                            </MudButton>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent Class="pa-6">
                                        @if (!packPrices[sessionType].Any())
                                        {
                                            <MudPaper Class="pa-6 text-center" Elevation="0" Style="background-color: #fff3e0;">
                                                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Warning" Class="mb-3" />
                                                <MudText Typo="Typo.h6" Color="Color.Warning" Class="mb-2">No packages yet</MudText>
                                                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                                                    Create session packages to offer discounts for multiple sessions
                                                </MudText>
                                                <MudButton Variant="Variant.Filled"
                                                        Color="Color.Warning"
                                                        OnClick="@(() => AddNewSessionPack(sessionType))"
                                                        StartIcon="@Icons.Material.Filled.Add">
                                                    Create Your First Package
                                                </MudButton>
                                            </MudPaper>
                                        }
                                        else
                                        {
                                            @foreach (var pack in packPrices[sessionType])
                                            {
                                                <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border: 1px solid #FFE0B2;">
                                                    <MudForm @ref="packForms[(sessionType, pack.Id)]">
                                                        <MudGrid Spacing="3">
                                                            <MudItem xs="12">
                                                                <MudTextField Label="📝 Package Name"
                                                                            HelperText="Give your package a catchy name (e.g., 'Starter Pack', '3-Session Bundle')"
                                                                            @bind-Value="pack.Name"
                                                                            For="@(() => pack.Name)"
                                                                            Required="true"
                                                                            RequiredError="Please enter a package name"
                                                                            Variant="Variant.Outlined" />
                                                            </MudItem>
                                                            <MudItem xs="12">
                                                                <MudTextField Label="📄 Description (Optional)"
                                                                            HelperText="Describe what's included in this package"
                                                                            @bind-Value="pack.Description"
                                                                            For="@(() => pack.Description)"
                                                                            Lines="2"
                                                                            Variant="Variant.Outlined" />
                                                            </MudItem>
                                                            <MudItem xs="12" sm="6">
                                                                <MudNumericField Label="🔢 Number of Sessions"
                                                                                HelperText="How many sessions are included?"
                                                                                @bind-Value="pack.TotalSessions"
                                                                                For="@(() => pack.TotalSessions)"
                                                                                Required="true"
                                                                                RequiredError="Please enter number of sessions"
                                                                                Min="1"
                                                                                Variant="Variant.Outlined" />
                                                            </MudItem>
                                                            <MudItem xs="12" sm="6">
                                                                <MudNumericField Label="💷 Package Price"
                                                                                HelperText="Total price for all sessions"
                                                                                @bind-Value="pack.PriceGBP"
                                                                                For="@(() => pack.PriceGBP)"
                                                                                Adornment="Adornment.Start"
                                                                                AdornmentText="£"
                                                                                Required="true"
                                                                                RequiredError="Please enter a price"
                                                                                Min="0"
                                                                                Variant="Variant.Outlined" />
                                                            </MudItem>
                                                        </MudGrid>
                                                        
                                                        @if (pack.TotalSessions > 0 && pack.PriceGBP > 0 && singlePrices[sessionType].PriceGBP > 0)
                                                        {
                                                            var individualTotal = pack.TotalSessions * singlePrices[sessionType].PriceGBP;
                                                            var savings = individualTotal - pack.PriceGBP;
                                                            var pricePerSession = pack.PriceGBP / pack.TotalSessions;
                                                            
                                                            <MudPaper Class="pa-3 mt-3" Elevation="0" Style="background-color: #e8f5e8; border-left: 3px solid #4caf50;">
                                                                <MudText Typo="Typo.body2" Color="Color.Success">
                                                                    <strong>💰 Price Breakdown:</strong>
                                                                </MudText>
                                                                <MudText Typo="Typo.body2">
                                                                    • Price per session: £@pricePerSession.ToString("F2")
                                                                </MudText>
                                                                @if (savings > 0)
                                                                {
                                                                    <MudText Typo="Typo.body2" Color="Color.Success">
                                                                        • Savings vs individual: £@savings.ToString("F2") (@((savings/individualTotal*100).ToString("F1"))% discount)
                                                                    </MudText>
                                                                }
                                                                else if (savings < 0)
                                                                {
                                                                    <MudText Typo="Typo.body2" Color="Color.Warning">
                                                                        • This package costs £@Math.Abs(savings).ToString("F2") more than individual sessions
                                                                    </MudText>
                                                                }
                                                            </MudPaper>
                                                        }
                                                    </MudForm>
                                                    
                                                    <MudStack Row="true" Justify="Justify.FlexEnd" Class="mt-4" Spacing="2">
                                                        <MudButton Variant="Variant.Outlined"
                                                                Color="Color.Error"
                                                                OnClick="@(() => ConfirmDeleteSessionPack(sessionType, pack.Id))"
                                                                StartIcon="@Icons.Material.Filled.Delete"
                                                                Size="Size.Small">
                                                            🗑️ Remove
                                                        </MudButton>
                                                    </MudStack>
                                                </MudPaper>
                                            }
                                            
                                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4">
                                                <div>
                                                    @if (packPrices[sessionType].Count >= MAX_PACKS)
                                                    {
                                                        <MudText Typo="Typo.body2" Color="Color.Warning">
                                                            ⚠️ You've reached the maximum of @MAX_PACKS packages
                                                        </MudText>
                                                    }
                                                </div>
                                                <MudButton Variant="Variant.Filled"
                                                        Color="Color.Success"
                                                        OnClick="@(() => SaveSessionPacks(sessionType))"
                                                        StartIcon="@Icons.Material.Filled.Save"
                                                        Size="Size.Large">
                                                    💾 Save All Packages
                                                </MudButton>
                                            </MudStack>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>

                            <!-- Subscriptions Section -->
                            <MudItem xs="12">
                                <MudCard Class="pricing-card" Elevation="3" Style="border-left: 4px solid #9C27B0;">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                <MudIcon Icon="@Icons.Material.Filled.Subscriptions" Color="Color.Secondary" />
                                                <div>
                                                    <MudText Typo="Typo.h6" Color="Color.Secondary">
                                                        🔄 Monthly Subscriptions
                                                    </MudText>
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                        Recurring monthly plans with session limits
                                                    </MudText>
                                                </div>
                                            </MudStack>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudButton Variant="Variant.Outlined"
                                                    Color="Color.Secondary"
                                                    OnClick="@(() => AddNewSubscription(sessionType))"
                                                    Disabled="@(subscriptionPrices[sessionType].Count >= MAX_SUBSCRIPTIONS)"
                                                    StartIcon="@Icons.Material.Filled.Add"
                                                    Size="Size.Small">
                                                ➕ Add Subscription
                                            </MudButton>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent Class="pa-6">
                                        @if (!subscriptionPrices[sessionType].Any())
                                        {
                                            <MudPaper Class="pa-6 text-center" Elevation="0" Style="background-color: #f3e5f5;">
                                                <MudIcon Icon="@Icons.Material.Filled.Subscriptions" Size="Size.Large" Color="Color.Secondary" Class="mb-3" />
                                                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No subscriptions yet</MudText>
                                                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                                                    Create subscription plans for clients who want regular monthly sessions
                                                </MudText>
                                                <MudButton Variant="Variant.Filled"
                                                        Color="Color.Secondary"
                                                        OnClick="@(() => AddNewSubscription(sessionType))"
                                                        StartIcon="@Icons.Material.Filled.Add">
                                                    Create Your First Subscription
                                                </MudButton>
                                            </MudPaper>
                                        }
                                        else
                                        {
                                            @foreach (var subscription in subscriptionPrices[sessionType])
                                            {
                                                <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border: 1px solid #E1BEE7;">
                                                    <MudForm @ref="subscriptionForms[(sessionType, subscription.Id)]">
                                                        <MudGrid Spacing="3">
                                                            <MudItem xs="12">
                                                                <MudTextField Label="📝 Subscription Name"
                                                                            HelperText="Give your subscription a name (e.g., 'Monthly Wellness', 'Premium Plan')"
                                                                            @bind-Value="subscription.Name"
                                                                            For="@(() => subscription.Name)"
                                                                            Required="true"
                                                                            RequiredError="Please enter a subscription name"
                                                                            Variant="Variant.Outlined" />
                                                            </MudItem>
                                                            <MudItem xs="12">
                                                                <MudTextField Label="📄 Description (Optional)"
                                                                            HelperText="Describe what's included in this monthly plan"
                                                                            @bind-Value="subscription.Description"
                                                                            For="@(() => subscription.Description)"
                                                                            Lines="2"
                                                                            Variant="Variant.Outlined" />
                                                            </MudItem>
                                                            <MudItem xs="12" sm="6">
                                                                <MudNumericField Label="📅 Sessions Per Month"
                                                                                HelperText="How many sessions can clients book monthly?"
                                                                                @bind-Value="subscription.MonthlyLimit"
                                                                                For="@(() => subscription.MonthlyLimit)"
                                                                                Required="true"
                                                                                RequiredError="Please enter the monthly session limit"
                                                                                Min="1"
                                                                                Variant="Variant.Outlined" />
                                                            </MudItem>
                                                            <MudItem xs="12" sm="6">
                                                                <MudStack Spacing="2">
                                                                    <MudNumericField Label="💷 Monthly Price"
                                                                                    HelperText="How much per month?"
                                                                                    @bind-Value="subscription.PriceGBP"
                                                                                    For="@(() => subscription.PriceGBP)"
                                                                                    Adornment="Adornment.Start"
                                                                                    AdornmentText="£"
                                                                                    Required="true"
                                                                                    RequiredError="Please enter a monthly price"
                                                                                    Min="0"
                                                                                    Variant="Variant.Outlined" />
                                                                    <MudAlert Severity="Severity.Info" Dense="true" NoIcon="false" Class="mt-2">
                                                                        <MudText Typo="Typo.caption">
                                                                            💳 This will create a recurring payment plan through Stripe
                                                                        </MudText>
                                                                    </MudAlert>
                                                                </MudStack>
                                                            </MudItem>
                                                        </MudGrid>
                                                        
                                                        @if (subscription.MonthlyLimit > 0 && subscription.PriceGBP > 0 && singlePrices[sessionType].PriceGBP > 0)
                                                        {
                                                            var monthlyTotal = subscription.MonthlyLimit * singlePrices[sessionType].PriceGBP;
                                                            var savings = monthlyTotal - subscription.PriceGBP;
                                                            var pricePerSession = subscription.PriceGBP / subscription.MonthlyLimit;
                                                            
                                                            <MudPaper Class="pa-3 mt-3" Elevation="0" Style="background-color: #e8f5e8; border-left: 3px solid #4caf50;">
                                                                <MudText Typo="Typo.body2" Color="Color.Success">
                                                                    <strong>💰 Subscription Value:</strong>
                                                                </MudText>
                                                                <MudText Typo="Typo.body2">
                                                                    • Effective price per session: £@pricePerSession.ToString("F2")
                                                                </MudText>
                                                                @if (savings > 0)
                                                                {
                                                                    <MudText Typo="Typo.body2" Color="Color.Success">
                                                                        • Monthly savings: £@savings.ToString("F2") (@((savings/monthlyTotal*100).ToString("F1"))% discount)
                                                                    </MudText>
                                                                }
                                                                else if (savings < 0)
                                                                {
                                                                    <MudText Typo="Typo.body2" Color="Color.Warning">
                                                                        • This costs £@Math.Abs(savings).ToString("F2") more than individual sessions
                                                                    </MudText>
                                                                }
                                                            </MudPaper>
                                                        }
                                                    </MudForm>
                                                    
                                                    <MudStack Row="true" Justify="Justify.FlexEnd" Class="mt-4" Spacing="2">
                                                        <MudButton Variant="Variant.Outlined"
                                                                Color="Color.Error"
                                                                OnClick="@(() => ConfirmDeleteSubscription(sessionType, subscription.Id))"
                                                                StartIcon="@Icons.Material.Filled.Delete"
                                                                Size="Size.Small">
                                                            🗑️ Remove
                                                        </MudButton>
                                                    </MudStack>
                                                </MudPaper>
                                            }
                                            
                                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4">
                                                <div>
                                                    @if (subscriptionPrices[sessionType].Count >= MAX_SUBSCRIPTIONS)
                                                    {
                                                        <MudText Typo="Typo.body2" Color="Color.Warning">
                                                            ⚠️ You've reached the maximum of @MAX_SUBSCRIPTIONS subscriptions
                                                        </MudText>
                                                    }
                                                </div>
                                                <MudButton Variant="Variant.Filled"
                                                        Color="Color.Success"
                                                        OnClick="@(() => SaveSubscriptions(sessionType))"
                                                        StartIcon="@Icons.Material.Filled.Save"
                                                        Size="Size.Large">
                                                    💾 Save All Subscriptions
                                                </MudButton>
                                            </MudStack>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                }
            </MudTabs>
        </MudTabPanel>
    </MudTabs>
</section>

@code {
    private string pageTitle = "Admin Dashboard | Ítala Veloso";
    private string adminName = "Ítala";
    private List<Session> nextSessions = new();
    private List<Session> sessions = new();
    private List<EmailSubscription> emailSubscriptions = new();
    private MudDataGrid<EmailSubscription> emailSubscriptionGrid;
    private MudCalendar calendar;
    private List<CalendarItem> calendarItems = new();
    private MudForm _busyForm;
    private int renderKey;

    private string searchContactsString = string.Empty;
    private string searchEmailSubscriptionsString = string.Empty;

    private Func<Session, bool> quickFilterSessions => c =>
        string.IsNullOrEmpty(searchContactsString) ||
        c.FullName.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Email.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.SessionCategory.ToString().Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Message.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase);

    private Func<EmailSubscription, bool> quickFilterEmailSubscriptions => e =>
        string.IsNullOrEmpty(searchEmailSubscriptionsString) ||
        e.Name.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase) ||
        e.Email.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase) ||
        (e.IsSubscribed ? "yes" : "no").Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase);

    private UnavailableTime _newUnavailableTime = new();
    private List<UnavailableTime> _adminUnavailableTimes = new();
    private Dictionary<SessionType, MudForm> singleForms = new();
    private Dictionary<(SessionType, int), MudForm> packForms = new();
    private Dictionary<(SessionType, int), MudForm> subscriptionForms = new();
    private Dictionary<SessionType, SessionPrice> singlePrices = new();
    private Dictionary<SessionType, List<SessionPackPrice>> packPrices = new();
    private Dictionary<SessionType, List<SubscriptionPrice>> subscriptionPrices = new();
    private const int MAX_PACKS = 5;
    private const int MAX_SUBSCRIPTIONS = 5;

    private string adminTimeZone = "Europe/London";
    private bool isSubmitting = false;

    private string GetSessionColorIcon(Session session)
    {
        var sessionDateTime = session.VideoSession?.ScheduledAt ?? session.PreferredDateTime;
        var now = DateTime.UtcNow;
        
        // Check if session is unscheduled (no VideoSession yet)
        if (session.VideoSession == null)
        {
            return "🟡"; // Yellow for unscheduled requests
        }
        
        // For all scheduled sessions (including discovery calls)
        if (sessionDateTime < now)
        {
            // Past sessions - check if they were completed
            if (session.VideoSession.EndedAt.HasValue)
            {
                return "🟢"; // Green for completed sessions
            }
            else
            {
                return "🔴"; // Red for missed/no-show sessions
            }
        }
        else
        {
            return "🔵"; // Blue for upcoming scheduled sessions
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var identityUser = await UserManager.FindByNameAsync(user.Identity.Name);
                @* adminName = identityUser?.UserName ?? adminName; *@
            }

            var adminTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone);

            sessions = await SessionService.GetAllSessionsAsync() ?? new();
            emailSubscriptions = EmailSubscriptionService.GetAllEmailSubscriptions() ?? new();
            _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync())
                .OrderByDescending(x => x.IsRecurring)
                .ThenBy(x => x.Date ?? DateTime.MaxValue)
                .ToList();
            
            var twoWeeksAgo = DateTime.UtcNow.AddDays(-14);
            nextSessions = sessions.Where(s => 
                (s.VideoSession != null && s.VideoSession.ScheduledAt >= twoWeeksAgo) ||
                (s.VideoSession == null && s.PreferredDateTime >= twoWeeksAgo)
            ).OrderBy(s => s.VideoSession?.ScheduledAt ?? s.PreferredDateTime).ToList();
            
            calendarItems = nextSessions.Select(c => {
                // Use VideoSession.ScheduledAt if available, otherwise use PreferredDateTime
                var sessionDateTime = c.VideoSession?.ScheduledAt ?? c.PreferredDateTime;
                var startLocal = TimeZoneInfo.ConvertTimeFromUtc(sessionDateTime, adminTimeZoneInfo);
                var endLocal = TimeZoneInfo.ConvertTimeFromUtc(sessionDateTime.AddMinutes(45), adminTimeZoneInfo);
                var colorIcon = GetSessionColorIcon(c);
                return new CalendarItem
                {
                    Start = startLocal,
                    End = endLocal,
                    Text = $"{colorIcon} {c.FullName}: {c.SessionCategory.GetDisplayName().Replace("Coaching", "").Replace("Food", "").Trim()}",
                };
            }).ToList();

            var sessionTypes = Enum.GetValues(typeof(SessionType)).Cast<SessionType>();
            foreach (var sessionType in sessionTypes)
            {
                singlePrices[sessionType] = await SessionPriceService.GetBySessionTypeAsync(sessionType) ?? new SessionPrice { SessionType = sessionType };
                packPrices[sessionType] = await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType);
                subscriptionPrices[sessionType] = await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType);

                singleForms[sessionType] = new MudForm();
                foreach (var pack in packPrices[sessionType])
                {
                    packForms[(sessionType, pack.Id)] = new MudForm();
                }
                foreach (var subscription in subscriptionPrices[sessionType])
                {
                    subscriptionForms[(sessionType, subscription.Id)] = new MudForm();
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing dashboard: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("colorAdminCalendarSessions");
            }
            catch (Exception ex)
            {
                await LogService.LogWarning("AdminDashboard.OnAfterRenderAsync", $"Failed to color admin calendar sessions: {ex.Message}");
            }
        }
    }

    private async Task OnSessionClicked(CalendarItem item)
    {
        try
        {
            var adminTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone);
            var itemStartUtc = TimeZoneInfo.ConvertTimeToUtc(item.Start, adminTimeZoneInfo);
            
            var session = sessions.FirstOrDefault(s => 
                {
                    var sessionDateTime = s.VideoSession?.ScheduledAt ?? s.PreferredDateTime;
                    return sessionDateTime == itemStartUtc && item.Text.Contains(s.FullName);
                });

            if (session == null)
            {
                Snackbar.Add("Session not found.", Severity.Error);
                return;
            }

            var parameters = new DialogParameters
            {
                { "Session", session }
            };

            var options = new DialogOptions 
            { 
                CloseButton = true, 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true 
            };

            await DialogService.ShowAsync<SessionDialog>("Session Details", parameters, options);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening session details: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleAddUnavailability()
    {
        try
        {
            isSubmitting = true;

            await LogService.LogInfo("HandleAddUnavailability", $"Before validation: IsRecurring={_newUnavailableTime.IsRecurring}, DayOfWeek={_newUnavailableTime.DayOfWeek}, Date={_newUnavailableTime.Date?.ToString("yyyy-MM-dd")}, Reason={_newUnavailableTime.Reason}");

            if (_newUnavailableTime.IsRecurring)
            {
                if (!_newUnavailableTime.DayOfWeek.HasValue)
                {
                    Snackbar.Add("Day of the week is required for recurring unavailability.", Severity.Error);
                    isSubmitting = false;
                    return;
                }
                _newUnavailableTime.Date = null;
            }
            else
            {
                if (!_newUnavailableTime.Date.HasValue)
                {
                    Snackbar.Add("Date is required for one-time unavailability.", Severity.Error);
                    isSubmitting = false;
                    return;
                }
                _newUnavailableTime.DayOfWeek = _newUnavailableTime.Date.Value.DayOfWeek;
            }

            if (!_newUnavailableTime.StartTime.HasValue || !_newUnavailableTime.EndTime.HasValue)
            {
                Snackbar.Add("Start and end times are required.", Severity.Error);
                isSubmitting = false;
                return;
            }

            if (_newUnavailableTime.EndTime <= _newUnavailableTime.StartTime)
            {
                Snackbar.Add("End time must be after start time.", Severity.Error);
                isSubmitting = false;
                return;
            }

            await LogService.LogInfo("HandleAddUnavailability", $"Saving unavailability: IsRecurring={_newUnavailableTime.IsRecurring}, DayOfWeek={_newUnavailableTime.DayOfWeek}, Date={_newUnavailableTime.Date?.ToString("yyyy-MM-dd")}, Reason={_newUnavailableTime.Reason}");

            await UnavailableTimeService.CreateUnavailableTimeAsync(_newUnavailableTime);
            Snackbar.Add("Unavailable time added successfully.", Severity.Success);

            _newUnavailableTime = new UnavailableTime();
            await _busyForm?.ResetAsync();
            _busyForm?.ResetValidation();
            _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync())
                .OrderByDescending(x => x.IsRecurring)
                .ThenBy(x => x.Date ?? DateTime.MaxValue)
                .ToList();
            renderKey++;
            StateHasChanged();
        }
        catch (ArgumentException ex)
        {
            Snackbar.Add($"Validation error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding unavailability: {ex.Message}", Severity.Error);
            await LogService.LogError("HandleAddUnavailability", $"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task OnIsRecurringChanged(bool value)
    {
        _newUnavailableTime.IsRecurring = value;
        await LogService.LogInfo("OnIsRecurringChanged", $"IsRecurring set to: {value}");
        if (value)
        {
            _newUnavailableTime.Date = null;
        }
        else
        {
            _newUnavailableTime.DayOfWeek = null;
        }
        StateHasChanged();
    }

    private async Task ConfirmDeleteUnavailableTime(int id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this unavailable time?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteUnavailableTime(id);
        }
    }

    private async Task DeleteUnavailableTime(int id)
    {
        try
        {
            await UnavailableTimeService.DeleteUnavailableTimeAsync(id);
            _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync())
                .OrderByDescending(x => x.IsRecurring)
                .ThenBy(x => x.Date ?? DateTime.MaxValue)
                .ToList();
            Snackbar.Add("Unavailable time deleted successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting unavailable time: {ex.Message}", Severity.Error);
        }
    }

    private async Task ConfirmDeleteEmailSubscription(int id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this email subscription? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteEmailSubscription(id);
        }
    }

    private async Task DeleteEmailSubscription(int id)
    {
        try
        {
            var success = await EmailSubscriptionService.DeleteEmailSubscriptionAsync(id);
            
            if (success)
            {
                emailSubscriptions = EmailSubscriptionService.GetAllEmailSubscriptions() ?? new();
                Snackbar.Add("Email subscription deleted successfully.", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Failed to delete email subscription.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting email subscription: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddNewSessionPack(SessionType sessionType)
    {
        try
        {
            if (packPrices[sessionType].Count >= MAX_PACKS)
            {
                Snackbar.Add($"Maximum number of session packs ({MAX_PACKS}) reached.", Severity.Error);
                return;
            }

            var newPack = new SessionPackPrice
            {
                SessionType = sessionType,
                Name = $"{sessionType.GetDisplayName()} Pack {packPrices[sessionType].Count + 1}",
                Description = string.Empty,
                TotalSessions = 5,
                PriceGBP = 0,
                LastUpdated = DateTime.UtcNow
            };

            await SessionPackPriceService.AddOrUpdateAsync(newPack);

            var updatedPack = await SessionPackPriceService.GetByIdAsync(newPack.Id);
            if (updatedPack != null)
            {
                packPrices[sessionType].Add(updatedPack);
                packForms[(sessionType, updatedPack.Id)] = new MudForm();
            }
            Snackbar.Add("New session pack added.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            var innerException = ex.InnerException?.Message ?? "No inner exception";
            Snackbar.Add($"Error adding session pack: {ex.Message} (Inner: {innerException})", Severity.Error);
            await LogService.LogError("AddNewSessionPack", $"Error: {ex.Message}, Inner: {innerException}");
        }
    }

    private async Task AddNewSubscription(SessionType sessionType)
    {
        try
        {
            if (subscriptionPrices[sessionType].Count >= MAX_SUBSCRIPTIONS)
            {
                await LogService.LogWarning("AddNewSubscription", $"Maximum number of subscriptions ({MAX_SUBSCRIPTIONS}) reached for {sessionType}");
                Snackbar.Add($"Maximum number of subscriptions ({MAX_SUBSCRIPTIONS}) reached.", Severity.Error);
                return;
            }

            var newSubscription = new SubscriptionPrice
            {
                SessionType = sessionType,
                Name = $"{sessionType.GetDisplayName()} Subscription {subscriptionPrices[sessionType].Count + 1}",
                Description = string.Empty,
                MonthlyLimit = 4,
                PriceGBP = 30m,
                StripePriceId = null,
                LastUpdated = DateTime.UtcNow,
                Currency = "GBP"
            };

            subscriptionPrices[sessionType].Add(newSubscription);
            subscriptionForms[(sessionType, newSubscription.Id)] = new MudForm();
            Snackbar.Add("New subscription added to form. Please edit and save.", Severity.Success);
            await LogService.LogInfo("AddNewSubscription", $"Added new subscription to UI for SessionType: {sessionType}, Name: {newSubscription.Name}, PriceGBP: {newSubscription.PriceGBP}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            var innerException = ex.InnerException?.Message ?? "No inner exception";
            await LogService.LogError("AddNewSubscription", $"Error adding subscription for {sessionType}: {ex.Message}, Inner: {innerException}");
            Snackbar.Add($"Error adding subscription: {ex.Message} (Inner: {innerException})", Severity.Error);
        }
    }

    private async Task ConfirmDeleteSessionPack(SessionType sessionType, int packId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this session pack? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteSessionPack(sessionType, packId);
        }
    }

    private async Task DeleteSessionPack(SessionType sessionType, int packId)
    {
        try
        {
            await SessionPackPriceService.DeleteAsync(packId);

            var updatedPrices = (await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType))?.ToList() ?? new List<SessionPackPrice>();
            packPrices[sessionType] = updatedPrices;

            packForms.Remove((sessionType, packId));

            var staleForms = packForms.Keys.Where(k => k.Item1 == sessionType && !packPrices[sessionType].Any(p => p.Id == k.Item2)).ToList();
            foreach (var staleKey in staleForms)
            {
                packForms.Remove(staleKey);
            }

            Snackbar.Add("Session pack deleted successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting session pack: {ex.Message}", Severity.Error);
            await LogService.LogError("DeleteSessionPack", $"Error deleting pack ID: {packId}. Error: {ex.Message}");
        }
    }

    private async Task ConfirmDeleteSubscription(SessionType sessionType, int subscriptionId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this subscription? This will archive the associated Stripe price." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteSubscription(sessionType, subscriptionId);
        }
    }

    private async Task DeleteSubscription(SessionType sessionType, int subscriptionId)
    {
        try
        {
            await SubscriptionPriceService.DeleteAsync(subscriptionId);

            var updatedPrices = (await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType))?.ToList() ?? new List<SubscriptionPrice>();

            subscriptionPrices[sessionType] = updatedPrices;
            subscriptionForms.Remove((sessionType, subscriptionId));

            var staleForms = subscriptionForms.Keys.Where(k => k.Item1 == sessionType && !subscriptionPrices[sessionType].Any(p => p.Id == k.Item2)).ToList();
            foreach (var staleKey in staleForms)
            {
                subscriptionForms.Remove(staleKey);
            }

            Snackbar.Add("Subscription deleted successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting subscription: {ex.Message}", Severity.Error);
            await LogService.LogError("DeleteSubscription", $"Error deleting subscription ID: {subscriptionId}. Error: {ex.Message}");
        }
    }

    private async Task SaveSinglePrice(SessionType sessionType)
    {
        try
        {
            await LogService.LogInfo("SaveSinglePrice", $"Starting save for single price, SessionType: {sessionType}");
            await singleForms[sessionType].Validate();

            if (!singleForms[sessionType].IsValid)
            {
                await LogService.LogWarning("SaveSinglePrice", $"Validation failed for {sessionType}");
                Snackbar.Add("Please correct the errors in the single price form.", Severity.Error);
                return;
            }

            singlePrices[sessionType].LastUpdated = DateTime.UtcNow;
            await SessionPriceService.AddOrUpdateAsync(singlePrices[sessionType]);
            await LogService.LogInfo("SaveSinglePrice", $"Successfully saved single price for {sessionType}");
            Snackbar.Add($"Single price for {sessionType.GetDisplayName()} saved successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            var innerException = ex.InnerException?.Message ?? "No inner exception";
            await LogService.LogError("SaveSinglePrice", $"Error saving single price for {sessionType}: {ex.Message}, Inner: {innerException}, StackTrace: {ex.StackTrace}");
            Snackbar.Add($"Error saving single price: {ex.Message} (Inner: {innerException})", Severity.Error);
        }
    }

    private async Task SaveSessionPacks(SessionType sessionType)
    {
        try
        {
            await LogService.LogInfo("SaveSessionPacks", $"Starting save for session packs, SessionType: {sessionType}");
            bool hasValidationErrors = false;

            foreach (var pack in packPrices[sessionType])
            {
                var formKey = (sessionType, pack.Id);
                if (packForms.ContainsKey(formKey))
                {
                    await packForms[formKey].Validate();
                    if (!packForms[formKey].IsValid)
                    {
                        hasValidationErrors = true;
                        await LogService.LogWarning("SaveSessionPacks", $"Validation failed for pack ID: {pack.Id}, Name: {pack.Name}, SessionType: {sessionType}");
                    }
                    else if (string.IsNullOrEmpty(pack.Name) || pack.PriceGBP < 0 || pack.TotalSessions < 1)
                    {
                        hasValidationErrors = true;
                        await LogService.LogWarning("SaveSessionPacks", $"Invalid data for pack ID: {pack.Id}, Name: {pack.Name}, PriceGBP: {pack.PriceGBP}, TotalSessions: {pack.TotalSessions}");
                    }
                }
                else
                {
                    await LogService.LogWarning("SaveSessionPacks", $"Form not found for pack ID: {pack.Id}, Name: {pack.Name}, SessionType: {sessionType}");
                }
            }

            if (hasValidationErrors)
            {
                Snackbar.Add("Please correct the errors in the session pack forms.", Severity.Error);
                return;
            }

            var updatedPacks = new List<SessionPackPrice>();
            var currentPacks = await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType);

            foreach (var pack in packPrices[sessionType])
            {
                await LogService.LogInfo("SaveSessionPacks", $"Processing pack ID: {pack.Id}, Name: {pack.Name}, PriceGBP: {pack.PriceGBP}, TotalSessions: {pack.TotalSessions}, StripePriceId: {pack.StripePriceId ?? "null"}");

                var dbPack = pack.Id > 0
                    ? currentPacks.FirstOrDefault(p => p.Id == pack.Id)
                    : null;

                if (dbPack != null)
                {
                    dbPack.Name = pack.Name ?? string.Empty;
                    dbPack.Description = pack.Description ?? string.Empty;
                    dbPack.TotalSessions = pack.TotalSessions > 0 ? pack.TotalSessions : 1;
                    dbPack.PriceGBP = pack.PriceGBP >= 0 ? pack.PriceGBP : 0;
                    dbPack.LastUpdated = DateTime.UtcNow;
                    updatedPacks.Add(dbPack);
                    await LogService.LogInfo("SaveSessionPacks", $"Prepared update for existing pack ID: {dbPack.Id}, Name: {dbPack.Name}");
                }
                else
                {
                    // This case should not occur unless a new pack was added but not saved yet
                    pack.LastUpdated = DateTime.UtcNow;
                    updatedPacks.Add(pack);
                    await LogService.LogInfo("SaveSessionPacks", $"Prepared new pack Name: {pack.Name}, PriceGBP: {pack.PriceGBP}, TotalSessions: {pack.TotalSessions}, StripePriceId: {pack.StripePriceId ?? "null"}");
                }
            }

            if (!updatedPacks.Any())
            {
                await LogService.LogWarning("SaveSessionPacks", $"No packs to update for SessionType: {sessionType}");
                Snackbar.Add($"No changes to save for {sessionType.GetDisplayName()}.", Severity.Info);
                return;
            }

            await SessionPackPriceService.UpdateMultipleAsync(updatedPacks);
            packPrices[sessionType] = await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType);

            var newForms = new Dictionary<(SessionType, int), MudForm>();
            foreach (var pack in packPrices[sessionType])
            {
                var formKey = (sessionType, pack.Id);
                newForms[formKey] = packForms.ContainsKey(formKey) ? packForms[formKey] : new MudForm();
            }
            packForms = newForms;

            await LogService.LogInfo("SaveSessionPacks", $"Successfully saved session packs for {sessionType}");
            Snackbar.Add($"Session packs for {sessionType.GetDisplayName()} saved successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            var innerException = ex.InnerException?.Message ?? "No inner exception";
            await LogService.LogError("SaveSessionPacks",
                $"Error saving session packs for {sessionType}: {ex.Message}, Inner: {innerException}, StackTrace: {ex.StackTrace}");
            Snackbar.Add($"Error saving session packs: {ex.Message} (Inner: {innerException})", Severity.Error);
        }
    }

    private async Task SaveSubscriptions(SessionType sessionType)
    {
        try
        {
            await LogService.LogInfo("SaveSubscriptions", $"Starting save for subscriptions, SessionType: {sessionType}");
            bool hasValidationErrors = false;

            foreach (var subscription in subscriptionPrices[sessionType])
            {
                var formKey = (sessionType, subscription.Id);
                if (subscriptionForms.ContainsKey(formKey))
                {
                    await subscriptionForms[formKey].Validate();
                    if (!subscriptionForms[formKey].IsValid)
                    {
                        hasValidationErrors = true;
                        await LogService.LogWarning("SaveSubscriptions", $"Validation failed for subscription ID: {subscription.Id}, Name: {subscription.Name}, SessionType: {sessionType}");
                    }
                }
                else
                {
                    await LogService.LogWarning("SaveSubscriptions", $"Form not found for subscription ID: {subscription.Id}, Name: {subscription.Name}, SessionType: {sessionType}");
                }
            }

            if (hasValidationErrors)
            {
                Snackbar.Add("Please correct the errors in the subscription forms.", Severity.Error);
                return;
            }

            var updatedSubscriptions = new List<SubscriptionPrice>();
            var currentSubscriptions = await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType);

            foreach (var subscription in subscriptionPrices[sessionType])
            {
                await LogService.LogInfo("SaveSubscriptions", $"Processing subscription ID: {subscription.Id}, Name: {subscription.Name}, PriceGBP: {subscription.PriceGBP}, StripePriceId: {subscription.StripePriceId ?? "null"}");

                var dbSubscription = subscription.Id > 0
                    ? currentSubscriptions.FirstOrDefault(s => s.Id == subscription.Id)
                    : null;

                if (dbSubscription != null)
                {
                    dbSubscription.Name = subscription.Name ?? string.Empty;
                    dbSubscription.Description = subscription.Description ?? string.Empty;
                    dbSubscription.MonthlyLimit = subscription.MonthlyLimit > 0 ? subscription.MonthlyLimit : 1;
                    dbSubscription.PriceGBP = subscription.PriceGBP;
                    dbSubscription.LastUpdated = DateTime.UtcNow;
                    updatedSubscriptions.Add(dbSubscription);
                    await LogService.LogInfo("SaveSubscriptions", $"Prepared update for existing subscription ID: {dbSubscription.Id}, Name: {dbSubscription.Name}");
                }
                else
                {
                    subscription.LastUpdated = DateTime.UtcNow;
                    updatedSubscriptions.Add(subscription);
                    await LogService.LogInfo("SaveSubscriptions", $"Prepared new subscription Name: {subscription.Name}, PriceGBP: {subscription.PriceGBP}, StripePriceId: {subscription.StripePriceId ?? "null"}");
                }
            }

            await SubscriptionPriceService.UpdateMultipleAsync(updatedSubscriptions);
            subscriptionPrices[sessionType] = await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType);

            var newForms = new Dictionary<(SessionType, int), MudForm>();
            foreach (var subscription in subscriptionPrices[sessionType])
            {
                var formKey = (sessionType, subscription.Id);
                newForms[formKey] = subscriptionForms.ContainsKey(formKey) ? subscriptionForms[formKey] : new MudForm();
            }
            subscriptionForms = newForms;

            await LogService.LogInfo("SaveSubscriptions", $"Successfully saved subscriptions for {sessionType}");
            Snackbar.Add($"Subscriptions for {sessionType.GetDisplayName()} saved successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            var innerException = ex.InnerException?.Message ?? "No inner exception";
            await LogService.LogError("SaveSubscriptions",
                $"Error saving subscriptions for {sessionType}: {ex.Message}, Inner: {innerException}, StackTrace: {ex.StackTrace}");
            Snackbar.Add($"Error saving subscriptions: {ex.Message} (Inner: {innerException})", Severity.Error);
        }
    }

    private async Task OpenEmailDialogAsync()
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "RecipientEmails", emailSubscriptionGrid.SelectedItems.Select(e => e.Email).ToList() }
            };

            var options = new DialogOptions 
            { 
                CloseButton = true,
                CloseOnEscapeKey = true, 
                MaxWidth = MaxWidth.Large, 
                FullWidth = true 
            };

            var dialog = await DialogService.ShowAsync<SendEmailDialog>("Compose Email", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                bool success = (bool)result.Data;
                if (success)
                {
                    Snackbar.Add("Emails sent successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Something went wrong while sending emails.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening email dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenEditScheduleDialog(Session session)
    {
        try
        {
            if (session.VideoSession == null)
            {
                Snackbar.Add("No video session found for this booking.", Severity.Error);
                return;
            }

            var parameters = new DialogParameters
            {
                { "Session", session },
                { "VideoSession", session.VideoSession },
                { "AdminTimeZone", adminTimeZone }
            };

            var options = new DialogOptions 
            { 
                CloseButton = true,
                CloseOnEscapeKey = true, 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true 
            };

            var dialog = await DialogService.ShowAsync<EditScheduleDialog>("Edit Scheduled Time", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data != null)
            {
                var newScheduledTime = (DateTime)result.Data;
                
                var success = await SessionService.UpdateScheduledTimeAsync(session.Id, newScheduledTime);
                
                if (success)
                {
                    // Refresh sessions data from database to ensure consistency
                    sessions = await SessionService.GetAllSessionsAsync() ?? new();
                    
                    // Update calendar and next sessions with fresh data
                    var adminTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone);
                    var twoWeeksAgo = DateTime.UtcNow.AddDays(-14);
                    nextSessions = sessions.Where(s => 
                        (s.VideoSession != null && s.VideoSession.ScheduledAt >= twoWeeksAgo) ||
                        (s.VideoSession == null && s.PreferredDateTime >= twoWeeksAgo)
                    ).OrderBy(s => s.VideoSession?.ScheduledAt ?? s.PreferredDateTime).ToList();
                    
                    calendarItems = nextSessions.Select(c => {
                        var sessionDateTime = c.VideoSession?.ScheduledAt ?? c.PreferredDateTime;
                        var startLocal = TimeZoneInfo.ConvertTimeFromUtc(sessionDateTime, adminTimeZoneInfo);
                        var endLocal = TimeZoneInfo.ConvertTimeFromUtc(sessionDateTime.AddMinutes(45), adminTimeZoneInfo);
                        var colorIcon = GetSessionColorIcon(c);
                        return new CalendarItem
                        {
                            Start = startLocal,
                            End = endLocal,
                            Text = $"{colorIcon} {c.FullName}: {c.SessionCategory.GetDisplayName().Replace("Coaching", "").Replace("Food", "").Trim()}",
                        };
                    }).ToList();

                    Snackbar.Add("Session scheduled time updated successfully!", Severity.Success);
                    StateHasChanged();
                    
                    // Re-apply calendar colors after update
                    try
                    {
                        await JSRuntime.InvokeVoidAsync("colorAdminCalendarSessions");
                    }
                    catch (Exception jsEx)
                    {
                        await LogService.LogWarning("OpenEditScheduleDialog", $"Failed to update calendar colors: {jsEx.Message}");
                    }
                }
                else
                {
                    Snackbar.Add("Failed to update scheduled time.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating scheduled time: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportContactsToExcel()
    {
        try
        {
            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Contacts");

            worksheet.Cell(1, 1).Value = "Id";
            worksheet.Cell(1, 2).Value = "FullName";
            worksheet.Cell(1, 3).Value = "Email";
            worksheet.Cell(1, 4).Value = "Session";
            worksheet.Cell(1, 5).Value = "Message";
            worksheet.Cell(1, 6).Value = "CreatedAt";

            var filteredSessions = sessions.Where(quickFilterSessions).ToList();

            for (int i = 0; i < filteredSessions.Count; i++)
            {
                var contact = filteredSessions[i];
                worksheet.Cell(i + 2, 1).Value = contact.Id;
                worksheet.Cell(i + 2, 2).Value = contact.FullName;
                worksheet.Cell(i + 2, 3).Value = contact.Email;
                worksheet.Cell(i + 2, 4).Value = contact.SessionCategory.ToString();
                worksheet.Cell(i + 2, 5).Value = contact.Message;
                worksheet.Cell(i + 2, 6).Value = contact.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
            }

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Seek(0, SeekOrigin.Begin);

            var fileName = $"Contacts_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
            Snackbar.Add("Contacts exported successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting contacts: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportEmailSubscriptionsToExcel()
    {
        try
        {
            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var worksheet = workbook.Worksheets.Add("EmailSubscriptions");

            worksheet.Cell(1, 1).Value = "Id";
            worksheet.Cell(1, 2).Value = "Name";
            worksheet.Cell(1, 3).Value = "Email";
            worksheet.Cell(1, 4).Value = "IsSubscribed";
            worksheet.Cell(1, 5).Value = "SubscribedAt";
            worksheet.Cell(1, 6).Value = "UnsubscribedAt";
            worksheet.Cell(1, 7).Value = "CreatedAt";

            var filteredEmailSubscriptions = emailSubscriptions.Where(quickFilterEmailSubscriptions).ToList();

            for (int i = 0; i < filteredEmailSubscriptions.Count; i++)
            {
                var subscription = filteredEmailSubscriptions[i];
                worksheet.Cell(i + 2, 1).Value = subscription.Id;
                worksheet.Cell(i + 2, 2).Value = subscription.Name;
                worksheet.Cell(i + 2, 3).Value = subscription.Email;
                worksheet.Cell(i + 2, 4).Value = subscription.IsSubscribed ? "Yes" : "No";
                worksheet.Cell(i + 2, 5).Value = subscription.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
                worksheet.Cell(i + 2, 6).Value = subscription.UnsubscribedAt?.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
                worksheet.Cell(i + 2, 7).Value = subscription.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
            }

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Seek(0, SeekOrigin.Begin);

            var fileName = $"EmailSubscriptions_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
            Snackbar.Add("Email subscriptions exported successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting email subscriptions: {ex.Message}", Severity.Error);
        }
    }
}