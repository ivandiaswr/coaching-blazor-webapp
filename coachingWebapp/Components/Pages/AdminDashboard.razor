@page "/AdminDashboard"
@rendermode InteractiveServer

<MudPopoverProvider/>
<MudSnackbarProvider />
<MudDialogProvider />

@attribute [Authorize(Roles = "Admin")]
<PageTitle>@pageTitle</PageTitle>

<section id="adminDashboard">
    <div class="dashboard-header">
        <div>
            <h1><span class="highlight">Admin</span> Dashboard</h1>
        
            <MudPaper Class="dashboard-welcome" Elevation="1">
                <MudText Typo="Typo.h5" Class="welcome-title">
                    Welcome back, @adminName!
                </MudText>

               @if (nextSessions.Any(s => s.VideoSession != null && s.VideoSession.ScheduledAt >= DateTime.UtcNow))
                {
                    var closestSession = nextSessions
                        .Where(s => s.VideoSession != null && s.VideoSession.ScheduledAt >= DateTime.UtcNow)
                        .OrderBy(s => s.VideoSession.ScheduledAt)
                        .First();
                    var sessionLocalTime = TimeZoneInfo.ConvertTimeFromUtc(closestSession.VideoSession.ScheduledAt, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone));
                    var currentLocalTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone));
                    var isToday = sessionLocalTime.Date == currentLocalTime.Date;
                    <MudText Typo="Typo.subtitle1" Class="mb-4">
                        Your next session is scheduled for
                        <strong>@(isToday ? $"Today at {sessionLocalTime:HH:mm}" : sessionLocalTime.ToString("MMMM dd 'at' HH:mm")) (@adminTimeZone)</strong>. Prepare to guide your client!
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Class="mb-4">
                        No upcoming sessions scheduled. Check back later or review past sessions.
                    </MudText>
                }

                <MudStack Class="mt-4" Spacing="2">
                    <MudText Typo="Typo.body1">📅 <strong>@nextSessions.Count</strong> upcoming session(s) scheduled.</MudText>
                </MudStack>
            </MudPaper>
        </div>
    </div>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Calendar">
            <MudCalendar @ref="calendar" 
                        Items="@calendarItems" 
                        ItemClicked="OnSessionClicked"
                        View="CalendarView.Week"
                        ShowTodayButton="true"/>

            <MudText Class="mt-5 mb-5" Typo="Typo.h4">Unavailable Time</MudText>
            <MudGrid Class="mt-2" Gutter="GutterSize.Small">
                <MudItem xs="12" sm="6">
                    <MudCard Class="p-4">
                        <MudCardContent>
                          <MudForm @ref="_busyForm">
                    <MudItem xs="12">
                        <MudCheckBox T="bool" 
                            Label="Recurring weekly" 
                            Value="_newUnavailableTime.IsRecurring"
                            ValueChanged="@(value => OnIsRecurringChanged(value))"
                            Color="Color.Primary" />
                    </MudItem>
                    <MudItem xs="12">
                        @if (_newUnavailableTime.IsRecurring)
                        {
                            <MudSelect T="DayOfWeek?" 
                                    Label="Day of Week" 
                                    @bind-Value="_newUnavailableTime.DayOfWeek"
                                    For="@(() => _newUnavailableTime.DayOfWeek)">
                                @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                                {
                                    <MudSelectItem Value="@((DayOfWeek?)day)">@day</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudDatePicker Label="Date" 
                                        @bind-Date="_newUnavailableTime.Date" 
                                        For="@(() => _newUnavailableTime.Date)"
                                        DateFormat="dd-MM-yyyy" />
                        }
                    </MudItem>
                    <MudItem xs="12">
                        <MudTimePicker Label="Start Time" 
                                    @bind-Time="_newUnavailableTime.StartTime"
                                    For="@(() => _newUnavailableTime.StartTime)"
                                    TimeFormat="HH:mm" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTimePicker Label="End Time" 
                                    @bind-Time="_newUnavailableTime.EndTime"
                                    For="@(() => _newUnavailableTime.EndTime)"
                                    TimeFormat="HH:mm" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Reason" 
                                    @bind-Value="_newUnavailableTime.Reason"
                                    Placeholder="Optional reason (e.g., Weekly meeting)"
                                    MaxLength="100" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" 
                                Color="Color.Primary" 
                                OnClick="HandleAddUnavailability"
                                Disabled="@isSubmitting">
                            Add Unavailability
                        </MudButton>
                    </MudItem>
                </MudForm>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudPaper Class="p-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Unavailable Times:</MudText>
                       <MudList T="UnavailableTime" Dense="true" Hover="true">
                            @if (_adminUnavailableTimes.Any())
                            {
                                @foreach (var time in _adminUnavailableTimes)
                                {
                                    <MudListItem Class="busy-time-entry">
                                        <div class="busy-time-info">
                                            @if (time.IsRecurring)
                                            {
                                                @time.DayOfWeek
                                                @($"{time.StartTime} - {time.EndTime} ({adminTimeZone})")

                                                if (!string.IsNullOrEmpty(time.Reason) && time.Reason != "Unavailable")
                                                {
                                                    <MudTooltip Text="@time.Reason">
                                                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="ml-2" />
                                                    </MudTooltip>
                                                }

                                                <span class="ml-2 text-success d-inline-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Loop" Size="Size.Small" Class="mr-1" />
                                                    Recurring
                                                </span>
                                            }
                                            else
                                            {
                                                @($"{time.Date?.ToString("dd-MM-yyyy")} ({time.DayOfWeek})");
                                                @($"{time.StartTime} - {time.EndTime} ({adminTimeZone})");

                                                if (!string.IsNullOrEmpty(time.Reason) && time.Reason != "Unavailable")
                                                {
                                                    <MudTooltip Text="@time.Reason">
                                                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="ml-2" />
                                                    </MudTooltip>
                                                }

                                                <span class="ml-2 text-info d-inline-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Event" Size="Size.Small" Class="mr-1" />
                                                    One-time
                                                </span>
                                            }

                                            <div class="busy-time-actions">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                            Color="Color.Error"
                                                            OnClick="@(() => ConfirmDeleteUnavailableTime(time.Id))"
                                                            Size="Size.Small" />
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            }
                            else
                            {
                                <MudListItem>
                                    <MudText>No unavailable times defined.</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        <MudTabPanel Text="Sessions">
            <MudDataGrid T="Session"
                        Items="@sessions"
                        Hover="true"
                        Bordered="true"
                        Breakpoint="Breakpoint.Sm" 
                        MultiSelection="true" 
                        SortMode="SortMode.Multiple" 
                        Filterable="true"
                        Hideable="true" 
                        QuickFilter="@quickFilterSessions">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Sessions</MudText>
                     <div class="d-flex align-center ml-auto gap-2">            
                        <MudTooltip Text="Export to Excel">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportContactsToExcel">
                                <i class="fa-solid fa-file-csv"></i>
                            </MudButton>
                        </MudTooltip>
                        <MudTextField @bind-Value="searchContactsString" 
                                    Placeholder="Search" 
                                    Adornment="Adornment.Start" 
                                    Immediate="true"
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium">
                        </MudTextField>
                    </div>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="Session" />
                    <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                    <PropertyColumn Property="x => x.FullName" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false" Filterable="true" />
                    <PropertyColumn Property="x => x.SessionCategory.GetDisplayName()" Title="Category" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Message" Title="Message" Sortable="false" Filterable="true">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.Message">
                                <div style="max-width: 300px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @context.Item.Message
                                </div>
                            </MudTooltip>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.IsPaid" Title="Paid" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @if (context.Item.IsPaid)
                            {
                                <span class="text-success"><i class="fas fa-check-circle"></i> Yes</span>
                            }
                            else
                            {
                                <span class="text-danger"><i class="fas fa-times-circle"></i> No</span>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.CreatedAt" Title="CreatedAt" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @TimeZoneInfo.ConvertTimeFromUtc(context.Item.CreatedAt, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone)).ToString("dd-MM-yyyy HH:mm:ss") (@adminTimeZone)
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.PaidAt" Title="PaidAt" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @TimeZoneInfo.ConvertTimeFromUtc(context.Item.PaidAt, TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone)).ToString("dd-MM-yyyy HH:mm:ss") (@adminTimeZone)
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Session" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Email Subscriptions">
            <MudDataGrid T="EmailSubscription" 
                        Items="@emailSubscriptions" 
                        Hover="true"
                        Bordered="true"
                        MultiSelection="true" 
                        SortMode="SortMode.Multiple" 
                        Filterable="true"
                        Hideable="true" 
                        QuickFilter="@quickFilterEmailSubscriptions" 
                        @ref="emailSubscriptionGrid">
                <ToolBarContent>
                    <MudText Typo="Typo.h4">Email Subscriptions</MudText>
                    <div class="d-flex align-center ml-auto gap-2">
                        <MudTooltip Text="Export to Excel">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportEmailSubscriptionsToExcel">
                                <i class="fa-solid fa-file-csv"></i>
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="Send Emails">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                    Disabled="@(!emailSubscriptionGrid.SelectedItems.Any())"
                                    OnClick="OpenEmailDialogAsync">
                                <i class="fa-regular fa-paper-plane"></i>
                            </MudButton>
                        </MudTooltip>
                        <MudTextField @bind-Value="searchEmailSubscriptionsString"
                                    Placeholder="Search"
                                    Adornment="Adornment.Start"
                                    Immediate="true"
                                    AdornmentIcon="@Icons.Material.Filled.Search"
                                    IconSize="Size.Medium" />
                    </div>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="EmailSubscription" />
                    <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                    <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.IsSubscribed" Title="Subscribed" Sortable="false" Filterable="true" >
                        <CellTemplate>
                            @if (context.Item.IsSubscribed)
                            {
                                <span class="text-success"><i class="fas fa-check-circle"></i> Yes</span>
                            }
                            else
                            {
                                <span class="text-danger"><i class="fas fa-times-circle"></i> No</span>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SubscribedAt" Title="Subscribed Date" Sortable="true" Filterable="true">
                        <CellTemplate>
                            @context.Item.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.UnsubscribedAt" Title="Unsubscribed Date" Sortable="false" Filterable="true" />
                    <PropertyColumn Property="x => x.CreatedAt" Title="Created Date" Sortable="true" Filterable="false">
                        <CellTemplate>
                            @context.Item.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="EmailSubscription" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="Pricing Configuration">
            <MudTabs Elevation="1" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
                @foreach (var sessionType in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                {
                    <MudTabPanel Text="@sessionType.GetDisplayName()">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudCard Class="mb-4">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Class="mb-2">@BookingType.SingleSession.GetDisplayName()</MudText>
                                        <MudForm @ref="singleForms[sessionType]">
                                            <MudGrid>
                                                <MudItem xs="12" sm="6">
                                                    <MudNumericField Label="Price (£)"
                                                                    @bind-Value="singlePrices[sessionType].PriceGBP"
                                                                    For="@(() => singlePrices[sessionType].PriceGBP)"
                                                                    Adornment="Adornment.Start"
                                                                    AdornmentText="£"
                                                                    Required="true"
                                                                    RequiredError="Price is required"
                                                                    Min="0" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudForm>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>

                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Class="mb-2">@BookingType.SessionPack.GetDisplayName()</MudText>
                                @foreach (var pack in packPrices[sessionType])
                                {
                                    <MudCard Class="mb-4">
                                        <MudCardContent>
                                            <MudForm @ref="packForms[(sessionType, pack.Id)]">
                                                <MudGrid>
                                                    <MudItem xs="12" sm="6">
                                                        <MudTextField Label="Pack Name"
                                                                    @bind-Value="pack.Name"
                                                                    For="@(() => pack.Name)"
                                                                    Required="true"
                                                                    RequiredError="Name is required" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudTextField Label="Pack Description"
                                                                    @bind-Value="pack.Description"
                                                                    For="@(() => pack.Description)" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudNumericField Label="Total Sessions"
                                                                        @bind-Value="pack.TotalSessions"
                                                                        For="@(() => pack.TotalSessions)"
                                                                        Required="true"
                                                                        RequiredError="Total sessions is required"
                                                                        Min="1" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudNumericField Label="Price (£)"
                                                                        @bind-Value="pack.PriceGBP"
                                                                        For="@(() => pack.PriceGBP)"
                                                                        Adornment="Adornment.Start"
                                                                        AdornmentText="£"
                                                                        Required="true"
                                                                        RequiredError="Price is required"
                                                                        Min="0" />
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudButton Variant="Variant.Filled" Color="Color.Error"
                                                                StartIcon="@Icons.Material.Filled.Delete"
                                                                OnClick="@(() => ConfirmDeleteSessionPack(sessionType, pack.Id))">
                                                            Delete Pack
                                                        </MudButton>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudForm>
                                        </MudCardContent>
                                    </MudCard>
                                }
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Add"
                                        OnClick="@(() => AddNewSessionPack(sessionType))"
                                        Class="mb-4"
                                        Disabled="@(packPrices[sessionType].Count >= MAX_PACKS)">
                                    Add New Pack
                                </MudButton>
                                @if (packPrices[sessionType].Count >= MAX_PACKS)
                                {
                                    <MudText Color="Color.Error">Maximum of @MAX_PACKS session packs reached.</MudText>
                                }
                            </MudItem>

                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Class="mb-2">@BookingType.Subscription.GetDisplayName()</MudText>
                                @foreach (var subscription in subscriptionPrices[sessionType])
                                {
                                    <MudCard Class="mb-4">
                                        <MudCardContent>
                                            <MudForm @ref="subscriptionForms[(sessionType, subscription.Id)]">
                                                <MudGrid>
                                                    <MudItem xs="12" sm="6">
                                                        <MudTextField Label="Subscription Name"
                                                                    @bind-Value="subscription.Name"
                                                                    For="@(() => subscription.Name)"
                                                                    Required="true"
                                                                    RequiredError="Name is required" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudTextField Label="Subscription Description"
                                                                    @bind-Value="subscription.Description"
                                                                    For="@(() => subscription.Description)" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudNumericField Label="Monthly Session Limit"
                                                                        @bind-Value="subscription.MonthlyLimit"
                                                                        For="@(() => subscription.MonthlyLimit)"
                                                                        Required="true"
                                                                        RequiredError="Monthly limit is required"
                                                                        Min="1" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudNumericField Label="Price (£)"
                                                                        @bind-Value="subscription.PriceGBP"
                                                                        For="@(() => subscription.PriceGBP)"
                                                                        Adornment="Adornment.Start"
                                                                        AdornmentText="£"
                                                                        Required="true"
                                                                        RequiredError="Price is required"
                                                                        Min="0" />
                                                        <MudTooltip Text="A Stripe price will be created if the price is greater than 0.">
                                                            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" />
                                                        </MudTooltip>
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudButton Variant="Variant.Filled" Color="Color.Error"
                                                                StartIcon="@Icons.Material.Filled.Delete"
                                                                OnClick="@(() => ConfirmDeleteSubscription(sessionType, subscription.Id))">
                                                            Delete Subscription
                                                        </MudButton>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudForm>
                                        </MudCardContent>
                                    </MudCard>
                                }
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Add"
                                        OnClick="@(() => AddNewSubscription(sessionType))"
                                        Class="mb-4"
                                        Disabled="@(subscriptionPrices[sessionType].Count >= MAX_SUBSCRIPTIONS)">
                                    Add New Subscription
                                </MudButton>
                                @if (subscriptionPrices[sessionType].Count >= MAX_SUBSCRIPTIONS)
                                {
                                    <MudText Color="Color.Error">Maximum of @MAX_SUBSCRIPTIONS subscriptions reached.</MudText>
                                }
                            </MudItem>

                            <MudItem xs="12">
                                <MudButton Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        OnClick="@(() => SavePrices(sessionType))"
                                        Class="mt-4">
                                    Save
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                }
            </MudTabs>
        </MudTabPanel>
    </MudTabs>
</section>

@code {
    private string pageTitle = "Admin Dashboard | Ítala Veloso";
    private string adminName = "Ítala";
    private List<Session> nextSessions = new();
    private List<Session> sessions = new();
    private List<EmailSubscription> emailSubscriptions = new();
    private MudDataGrid<EmailSubscription> emailSubscriptionGrid;
    private MudCalendar calendar;
    private List<CalendarItem> calendarItems = new();
    private MudForm _busyForm;
    private int renderKey;

    private string searchContactsString = string.Empty;
    private string searchEmailSubscriptionsString = string.Empty;

    private Func<Session, bool> quickFilterSessions => c =>
        string.IsNullOrEmpty(searchContactsString) ||
        c.FullName.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Email.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.SessionCategory.ToString().Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Message.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase);

    private Func<EmailSubscription, bool> quickFilterEmailSubscriptions => e =>
        string.IsNullOrEmpty(searchEmailSubscriptionsString) ||
        e.Name.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase) ||
        e.Email.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase) ||
        (e.IsSubscribed ? "yes" : "no").Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase);

    private UnavailableTime _newUnavailableTime = new();
    private List<UnavailableTime> _adminUnavailableTimes = new();
    private Dictionary<SessionType, MudForm> singleForms = new();
    private Dictionary<(SessionType, int), MudForm> packForms = new();
    private Dictionary<(SessionType, int), MudForm> subscriptionForms = new();
    private Dictionary<SessionType, SessionPrice> singlePrices = new();
    private Dictionary<SessionType, List<SessionPackPrice>> packPrices = new();
    private Dictionary<SessionType, List<SubscriptionPrice>> subscriptionPrices = new();
    private const int MAX_PACKS = 5;
    private const int MAX_SUBSCRIPTIONS = 5;

    private string adminTimeZone = "Europe/London";
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var identityUser = await UserManager.FindByNameAsync(user.Identity.Name);
                @* adminName = identityUser?.UserName ?? adminName; *@
            }

            var adminTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(adminTimeZone);

            sessions = await SessionService.GetAllSessionsAsync() ?? new();
            emailSubscriptions = EmailSubscriptionService.GetAllEmailSubscriptions() ?? new();
            _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
            nextSessions = sessions.Where(s => s.PreferredDateTime >= DateTime.UtcNow).ToList();
            calendarItems = sessions.Select(c => new CalendarItem
            {
                Start = c.PreferredDateTime,
                End = c.PreferredDateTime.AddMinutes(45),
                Text = $"{c.FullName}: {c.SessionCategory.GetDisplayName().Replace("Coaching", "").Replace("Food", "").Trim()}",
            }).ToList();

            foreach (var sessionType in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
            {
                singlePrices[sessionType] = await SessionPriceService.GetPriceForSessionTypeAsync(sessionType)
                    ?? new SessionPrice
                    {
                        SessionType = sessionType,
                        PriceGBP = 0,
                        LastUpdated = DateTime.UtcNow
                    };
                packPrices[sessionType] = (await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType))?.ToList() ?? new();
                subscriptionPrices[sessionType] = (await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType))?.ToList() ?? new();

                singleForms[sessionType] = new MudForm();
                foreach (var pack in packPrices[sessionType])
                {
                    packForms[(sessionType, pack.Id)] = new MudForm();
                }
                foreach (var subscription in subscriptionPrices[sessionType])
                {
                    subscriptionForms[(sessionType, subscription.Id)] = new MudForm();
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing dashboard: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnSessionClicked(CalendarItem item)
    {
        try
        {
            var session = sessions.FirstOrDefault(s => 
                s.PreferredDateTime == item.Start && 
                item.Text.Contains(s.FullName));

            if (session == null)
            {
                Snackbar.Add("Session not found.", Severity.Error);
                return;
            }

            var parameters = new DialogParameters
            {
                { "Session", session }
            };

            var options = new DialogOptions 
            { 
                CloseButton = true, 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true 
            };

            await DialogService.ShowAsync<SessionDialog>("Session Details", parameters, options);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening session details: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleAddUnavailability()
    {
        try
        {
            isSubmitting = true;

            await LogService.LogInfo("HandleAddUnavailability", $"Before validation: IsRecurring={_newUnavailableTime.IsRecurring}, DayOfWeek={_newUnavailableTime.DayOfWeek}, Date={_newUnavailableTime.Date?.ToString("yyyy-MM-dd")}, Reason={_newUnavailableTime.Reason}");

            if (_newUnavailableTime.IsRecurring)
            {
                if (!_newUnavailableTime.DayOfWeek.HasValue)
                {
                    Snackbar.Add("Day of the week is required for recurring unavailability.", Severity.Error);
                    isSubmitting = false;
                    return;
                }
                _newUnavailableTime.Date = null;
            }
            else
            {
                if (!_newUnavailableTime.Date.HasValue)
                {
                    Snackbar.Add("Date is required for one-time unavailability.", Severity.Error);
                    isSubmitting = false;
                    return;
                }
                _newUnavailableTime.DayOfWeek = _newUnavailableTime.Date.Value.DayOfWeek;
            }

            if (!_newUnavailableTime.StartTime.HasValue || !_newUnavailableTime.EndTime.HasValue)
            {
                Snackbar.Add("Start and end times are required.", Severity.Error);
                isSubmitting = false;
                return;
            }

            if (_newUnavailableTime.EndTime <= _newUnavailableTime.StartTime)
            {
                Snackbar.Add("End time must be after start time.", Severity.Error);
                isSubmitting = false;
                return;
            }

            await LogService.LogInfo("HandleAddUnavailability", $"Saving unavailability: IsRecurring={_newUnavailableTime.IsRecurring}, DayOfWeek={_newUnavailableTime.DayOfWeek}, Date={_newUnavailableTime.Date?.ToString("yyyy-MM-dd")}, Reason={_newUnavailableTime.Reason}");

            await UnavailableTimeService.CreateUnavailableTimeAsync(_newUnavailableTime);
            Snackbar.Add("Unavailable time added successfully.", Severity.Success);

            _newUnavailableTime = new UnavailableTime();
            await _busyForm?.ResetAsync();
            _busyForm?.ResetValidation();
            _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
            renderKey++;
            StateHasChanged();
        }
        catch (ArgumentException ex)
        {
            Snackbar.Add($"Validation error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding unavailability: {ex.Message}", Severity.Error);
            await LogService.LogError("HandleAddUnavailability", $"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task OnIsRecurringChanged(bool value)
    {
        _newUnavailableTime.IsRecurring = value;
        await LogService.LogInfo("OnIsRecurringChanged", $"IsRecurring set to: {value}");
        if (value)
        {
            _newUnavailableTime.Date = null;
        }
        else
        {
            _newUnavailableTime.DayOfWeek = null;
        }
        StateHasChanged();
    }

    private async Task ConfirmDeleteUnavailableTime(int id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this unavailable time?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteUnavailableTime(id);
        }
    }

    private async Task DeleteUnavailableTime(int id)
    {
        try
        {
            await UnavailableTimeService.DeleteUnavailableTimeAsync(id);
            _adminUnavailableTimes = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
            Snackbar.Add("Unavailable time deleted successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting unavailable time: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddNewSessionPack(SessionType sessionType)
    {
        try
        {
            if (packPrices[sessionType].Count >= MAX_PACKS)
            {
                Snackbar.Add($"Maximum number of session packs ({MAX_PACKS}) reached.", Severity.Error);
                return;
            }

            var newPack = new SessionPackPrice
            {
                SessionType = sessionType,
                Name = $"{sessionType.GetDisplayName()} Pack {packPrices[sessionType].Count + 1}",
                Description = string.Empty,
                TotalSessions = 5,
                PriceGBP = 0,
                LastUpdated = DateTime.UtcNow
            };

            await SessionPackPriceService.AddOrUpdateAsync(newPack);
            packPrices[sessionType] = (await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType)).ToList();
            packForms[(sessionType, newPack.Id)] = new MudForm();
            Snackbar.Add("New session pack added.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding session pack: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddNewSubscription(SessionType sessionType)
    {
        try
        {
            if (subscriptionPrices[sessionType].Count >= MAX_SUBSCRIPTIONS)
            {
                Snackbar.Add($"Maximum number of subscriptions ({MAX_SUBSCRIPTIONS}) reached.", Severity.Error);
                return;
            }

            var newSubscription = new SubscriptionPrice
            {
                SessionType = sessionType,
                Name = $"{sessionType.GetDisplayName()} Subscription {subscriptionPrices[sessionType].Count + 1}",
                Description = string.Empty,
                MonthlyLimit = 4,
                PriceGBP = 0,
                StripePriceId = null,
                LastUpdated = DateTime.UtcNow
            };

            await SubscriptionPriceService.AddOrUpdateAsync(newSubscription);
            subscriptionPrices[sessionType] = (await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType)).ToList();
            subscriptionForms[(sessionType, newSubscription.Id)] = new MudForm();
            Snackbar.Add("New subscription added.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding subscription: {ex.Message}", Severity.Error);
        }
    }

    private async Task ConfirmDeleteSessionPack(SessionType sessionType, int packId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this session pack? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteSessionPack(sessionType, packId);
        }
    }

    private async Task DeleteSessionPack(SessionType sessionType, int packId)
    {
        try
        {
            await SessionPackPriceService.DeleteAsync(packId);

            var updatedPrices = (await SessionPackPriceService.GetPricesForSessionTypeAsync(sessionType))?.ToList() ?? new List<SessionPackPrice>();
            packPrices[sessionType] = updatedPrices;

            packForms.Remove((sessionType, packId));

            var staleForms = packForms.Keys.Where(k => k.Item1 == sessionType && !packPrices[sessionType].Any(p => p.Id == k.Item2)).ToList();
            foreach (var staleKey in staleForms)
            {
                packForms.Remove(staleKey);
            }

            Snackbar.Add("Session pack deleted successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting session pack: {ex.Message}", Severity.Error);
            await LogService.LogError("DeleteSessionPack", $"Error deleting pack ID: {packId}. Error: {ex.Message}");
        }
    }

    private async Task ConfirmDeleteSubscription(SessionType sessionType, int subscriptionId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this subscription? This will archive the associated Stripe price." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteSubscription(sessionType, subscriptionId);
        }
    }

    private async Task DeleteSubscription(SessionType sessionType, int subscriptionId)
    {
        try
        {
            await SubscriptionPriceService.DeleteAsync(subscriptionId);

            var updatedPrices = (await SubscriptionPriceService.GetPricesForSessionTypeAsync(sessionType))?.ToList() ?? new List<SubscriptionPrice>();

            subscriptionPrices[sessionType] = updatedPrices;
            subscriptionForms.Remove((sessionType, subscriptionId));

            var staleForms = subscriptionForms.Keys.Where(k => k.Item1 == sessionType && !subscriptionPrices[sessionType].Any(p => p.Id == k.Item2)).ToList();
            foreach (var staleKey in staleForms)
            {
                subscriptionForms.Remove(staleKey);
            }

            Snackbar.Add("Subscription deleted successfully.", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting subscription: {ex.Message}", Severity.Error);
            await LogService.LogError("DeleteSubscription", $"Error deleting subscription ID: {subscriptionId}. Error: {ex.Message}");
        }
    }

    private async Task SavePrices(SessionType sessionType)
    {
        try
        {
            await singleForms[sessionType].Validate();
            foreach (var pack in packPrices[sessionType])
            {
                await packForms[(sessionType, pack.Id)].Validate();
            }
            foreach (var subscription in subscriptionPrices[sessionType])
            {
                await subscriptionForms[(sessionType, subscription.Id)].Validate();
            }

            if (!singleForms[sessionType].IsValid || 
                packForms.Any(f => f.Key.Item1 == sessionType && !f.Value.IsValid) ||
                subscriptionForms.Any(f => f.Key.Item1 == sessionType && !f.Value.IsValid))
            {
                Snackbar.Add("Please correct the errors in the form.", Severity.Error);
                return;
            }

            singlePrices[sessionType].LastUpdated = DateTime.UtcNow;
            await SessionPriceService.AddOrUpdateAsync(singlePrices[sessionType]);

            foreach (var pack in packPrices[sessionType])
            {
                pack.LastUpdated = DateTime.UtcNow;
                await SessionPackPriceService.AddOrUpdateAsync(pack);
            }

            foreach (var subscription in subscriptionPrices[sessionType])
            {
                subscription.LastUpdated = DateTime.UtcNow;
                await SubscriptionPriceService.AddOrUpdateAsync(subscription);
            }

            Snackbar.Add($"Prices for {sessionType.GetDisplayName()} saved successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving prices: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenEmailDialogAsync()
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "RecipientEmails", emailSubscriptionGrid.SelectedItems.Select(e => e.Email).ToList() }
            };

            var options = new DialogOptions 
            { 
                CloseButton = true,
                CloseOnEscapeKey = true, 
                MaxWidth = MaxWidth.Large, 
                FullWidth = true 
            };

            var dialog = await DialogService.ShowAsync<SendEmailDialog>("Compose Email", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                bool success = (bool)result.Data;
                if (success)
                {
                    Snackbar.Add("Emails sent successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Something went wrong while sending emails.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening email dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportContactsToExcel()
    {
        try
        {
            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Contacts");

            worksheet.Cell(1, 1).Value = "Id";
            worksheet.Cell(1, 2).Value = "FullName";
            worksheet.Cell(1, 3).Value = "Email";
            worksheet.Cell(1, 4).Value = "Session";
            worksheet.Cell(1, 5).Value = "Message";
            worksheet.Cell(1, 6).Value = "CreatedAt";

            var filteredSessions = sessions.Where(quickFilterSessions).ToList();

            for (int i = 0; i < filteredSessions.Count; i++)
            {
                var contact = filteredSessions[i];
                worksheet.Cell(i + 2, 1).Value = contact.Id;
                worksheet.Cell(i + 2, 2).Value = contact.FullName;
                worksheet.Cell(i + 2, 3).Value = contact.Email;
                worksheet.Cell(i + 2, 4).Value = contact.SessionCategory.ToString();
                worksheet.Cell(i + 2, 5).Value = contact.Message;
                worksheet.Cell(i + 2, 6).Value = contact.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
            }

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Seek(0, SeekOrigin.Begin);

            var fileName = $"Contacts_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
            Snackbar.Add("Contacts exported successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting contacts: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportEmailSubscriptionsToExcel()
    {
        try
        {
            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var worksheet = workbook.Worksheets.Add("EmailSubscriptions");

            worksheet.Cell(1, 1).Value = "Id";
            worksheet.Cell(1, 2).Value = "Name";
            worksheet.Cell(1, 3).Value = "Email";
            worksheet.Cell(1, 4).Value = "IsSubscribed";
            worksheet.Cell(1, 5).Value = "SubscribedAt";
            worksheet.Cell(1, 6).Value = "UnsubscribedAt";
            worksheet.Cell(1, 7).Value = "CreatedAt";

            var filteredEmailSubscriptions = emailSubscriptions.Where(quickFilterEmailSubscriptions).ToList();

            for (int i = 0; i < filteredEmailSubscriptions.Count; i++)
            {
                var subscription = filteredEmailSubscriptions[i];
                worksheet.Cell(i + 2, 1).Value = subscription.Id;
                worksheet.Cell(i + 2, 2).Value = subscription.Name;
                worksheet.Cell(i + 2, 3).Value = subscription.Email;
                worksheet.Cell(i + 2, 4).Value = subscription.IsSubscribed ? "Yes" : "No";
                worksheet.Cell(i + 2, 5).Value = subscription.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
                worksheet.Cell(i + 2, 6).Value = subscription.UnsubscribedAt?.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
                worksheet.Cell(i + 2, 7).Value = subscription.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
            }

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Seek(0, SeekOrigin.Begin);

            var fileName = $"EmailSubscriptions_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
            Snackbar.Add("Email subscriptions exported successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting email subscriptions: {ex.Message}", Severity.Error);
        }
    }
}