@page "/account"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]

<MudSnackbarProvider />

<section class="account-settings">
    <MudText Typo="Typo.h4" Class="mb-4">Account Information</MudText>

    <MudForm Model="@accountModel" @ref="form" PreventDefault="true" ValidationDelay="0">
        <MudTextField Label="Email"
                      @bind-Value="accountModel.Email"
                      Disabled="true"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="First Name"
                      @bind-Value="accountModel.FirstName"
                      For="@(() => accountModel.FirstName)"
                      Required="true"
                      RequiredError="First name is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="Last Name"
                      @bind-Value="accountModel.LastName"
                      For="@(() => accountModel.LastName)"
                      Required="true"
                      RequiredError="Last name is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudText Typo="Typo.h6" Class="mt-6 mb-2">Change Password</MudText>

        <MudTextField Label="Current Password"
                      @bind-Value="accountModel.CurrentPassword"
                      For="@(() => accountModel.CurrentPassword)"
                      InputType="InputType.Password"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="New Password"
                      @bind-Value="accountModel.NewPassword"
                      For="@(() => accountModel.NewPassword)"
                      InputType="InputType.Password"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="Confirm New Password"
                      @bind-Value="accountModel.ConfirmNewPassword"
                      For="@(() => accountModel.ConfirmNewPassword)"
                      InputType="InputType.Password"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.AccountCircle"
                   Type="submit"
                   Class="mt-4"
                   OnClick="HandleSubmit">
            Update Account
        </MudButton>
    </MudForm>
</section>

@code {
    private UpdateUser accountModel = new();
    private MudForm? form;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user is not null)
        {
            accountModel.Email = user.Email ?? string.Empty;
            accountModel.FirstName = user.FirstName ?? string.Empty;
            accountModel.LastName = user.LastName ?? string.Empty;
        }
    }

    private async Task HandleSubmit()
    {
        if (form is null) return;

        await LogService.LogInfo("HandleSubmit", "Account update process started.");
        await form.Validate();

        if (!form.IsValid)
        {
            await LogService.LogInfo("HandleSubmit", "Form is not valid.");
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is null)
        {
            await LogService.LogError("HandleSubmit", "Authenticated user is null.");
            Snackbar.Add("Unexpected error during account update.", Severity.Error);
            return;
        }

        bool wantsToChangeName = 
            accountModel.FirstName != user.FirstName || 
            accountModel.LastName != user.LastName;

        bool wantsToChangePassword = 
            !string.IsNullOrWhiteSpace(accountModel.NewPassword) ||
            !string.IsNullOrWhiteSpace(accountModel.ConfirmNewPassword);

        if (!wantsToChangeName && !wantsToChangePassword)
        {
            await LogService.LogInfo("HandleSubmit", $"No changes detected for user: {user.Email}");
            Snackbar.Add("No changes were detected.", Severity.Warning);
            return;
        }

        if (wantsToChangePassword)
        {
            if (string.IsNullOrWhiteSpace(accountModel.CurrentPassword))
            {
                await LogService.LogWarning("HandleSubmit", $"User {user.Email} attempted to change password without current password.");
                Snackbar.Add("To change your password, you must enter your current password.", Severity.Error);
                return;
            }

            if (accountModel.NewPassword != accountModel.ConfirmNewPassword)
            {
                await LogService.LogWarning("HandleSubmit", $"User {user.Email} provided mismatching new passwords.");
                Snackbar.Add("New password and confirmation do not match.", Severity.Error);
                return;
            }

            var changePasswordResult = await UserManager.ChangePasswordAsync(user, accountModel.CurrentPassword, accountModel.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                var errors = string.Join(", ", changePasswordResult.Errors.Select(e => e.Description));
                await LogService.LogError("HandleSubmit", $"Password change failed for {user.Email}: {errors}");
                Snackbar.Add("Unexpected error during password update", Severity.Error);
                return;
            }

            await LogService.LogInfo("HandleSubmit", $"Password changed successfully for {user.Email}");
        }

        if (wantsToChangeName)
        {
            user.FirstName = accountModel.FirstName;
            user.LastName = accountModel.LastName;

            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                var errors = string.Join(", ", updateResult.Errors.Select(e => e.Description));
                await LogService.LogError("HandleSubmit", $"User update failed for {user.Email}: {errors}");
                Snackbar.Add(errors, Severity.Error);
                return;
            }

            await LogService.LogInfo("HandleSubmit", $"Name updated for {user.Email}");
        }

        var loginModel = new LoginModel
        {
            Email = accountModel.Email,
            Password = accountModel.NewPassword,
            RememberMe = true 
        };

        var result = await JSRuntime.InvokeAsync<SessionResult>("login", loginModel);

        Snackbar.Add("Password updated successfully!", Severity.Success);
    }
}
