@page "/auth/callback"
@using Microsoft.AspNetCore.Components.Authorization
@using ModelLayer.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IUserRefreshTokenService UserRefreshTokenService
@inject ILogger<Admin_auth_callback> Logger

<PageTitle>@pageTitle</PageTitle>

<h3>Processing Authorization...</h3>

@if(saveResult == true)
{
    <a href="/admin-dashboard" class="btn btn-primary">Dashboard</a>
} else {
    <p>Error saving token in database.</p>
}

@code {
    private string pageTitle = "Google Auth Callback | √çtala Veloso";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Code { get; set; }
    private AuthenticationState authState;
    private bool? saveResult = null;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Code))
        {
            try
            {
                authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

                // Exchange authorization code for tokens
                var token = await ExchangeCodeForTokensAsync(Code);

                // Save refresh token to db
                saveResult = await SaveRefreshToken(token);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error processing authorization callback");
            }
        }
        else
        {
            Logger.LogError("Authorization code is missing in the callback request.");
        }
    }

    private async Task<TokenResponse> ExchangeCodeForTokensAsync(string code)
    {
        var clientId = Configuration["GoogleCalendar:ClientId"];
        var clientSecret = Configuration["GoogleCalendar:ClientSecret"];
        var redirectUri = Configuration["GoogleCalendar:CallbackUrl"];

        var tokenRequest = new HttpRequestMessage(HttpMethod.Post, "https://oauth2.googleapis.com/token")
        {
            Content = new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "code", code },
                { "client_id", clientId },
                { "client_secret", clientSecret },
                { "redirect_uri", redirectUri },
                { "grant_type", "authorization_code" }
            })
        };

        var client = HttpClientFactory.CreateClient();
        var response = await client.SendAsync(tokenRequest);

        if (!response.IsSuccessStatusCode)
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Logger.LogError($"Token exchange failed: {response.StatusCode}, {errorContent}");
            throw new Exception($"Token exchange failed: {response.StatusCode}, {errorContent}");
        }

        var content = await response.Content.ReadAsStringAsync();
        Logger.LogInformation($"Raw Token Response: {content}");

        var tokenResponse = System.Text.Json.JsonSerializer.Deserialize<TokenResponse>(content, new System.Text.Json.JsonSerializerOptions
        {
            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
        });

        return tokenResponse;
    }

    private async Task<bool> SaveRefreshToken(TokenResponse token)
    {
        Logger.LogInformation($"Refresh Token: {token.RefreshToken}");
        
        if (string.IsNullOrEmpty(token.RefreshToken))
        {
            Logger.LogError("Refresh token is null or empty. Cannot save.");
            return false; 
        }

        UserRefreshToken userRefreshToken = new UserRefreshToken {
            UserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value,
            RefreshToken = token.RefreshToken,
            CreatedAt = DateTime.UtcNow,
            ExpiresAt = DateTime.UtcNow.AddSeconds(token.ExpiresIn)
        };

        bool result = await UserRefreshTokenService.UpdateGoogleRefreshToken(userRefreshToken);

        return result;
    }
}
