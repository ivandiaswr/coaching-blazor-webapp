@page "/auth/callback"
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<Admin_auth_callback> Logger

<PageTitle>Google Auth Callback | √çtala Veloso</PageTitle>

<h3>Processing Authorization...</h3>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
         if (!string.IsNullOrEmpty(Code))
        {
            try
            {
                // Exchange authorization code for tokens
                var tokens = await ExchangeCodeForTokensAsync(Code);

                // Log tokens for debugging (DO NOT use in production)
                Logger.LogInformation($"Access Token: {tokens.AccessToken}");
                Logger.LogInformation($"Refresh Token: {tokens.RefreshToken}");

                // Redirect to a success page or save tokens securely
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error processing authorization callback");
            }
        }
        else
        {
            Logger.LogError("Authorization code is missing in the callback request.");
        }
    }

    private async Task<TokenResponse> ExchangeCodeForTokensAsync(string code)
    {
        var clientId = Configuration["GoogleCalendar:ClientId"];
        var clientSecret = Configuration["GoogleCalendar:ClientSecret"];
        var redirectUri = Configuration["GoogleCalendar:CallbackUrl"];

        var tokenRequest = new HttpRequestMessage(HttpMethod.Post, "https://oauth2.googleapis.com/token")
        {
            Content = new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "code", code },
                { "client_id", clientId },
                { "client_secret", clientSecret },
                { "redirect_uri", redirectUri },
                { "grant_type", "authorization_code" }
            })
        };

        var client = HttpClientFactory.CreateClient();
        var response = await client.SendAsync(tokenRequest);

        if (!response.IsSuccessStatusCode)
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Logger.LogError($"Token exchange failed: {response.StatusCode}, {errorContent}");
            throw new Exception($"Token exchange failed: {response.StatusCode}, {errorContent}");
        }

        // Safely read and log the content
        var content = await response.Content.ReadAsStringAsync();
        Logger.LogInformation($"Raw Token Response: {content}");

        // Deserialize from the string
        var tokenResponse = System.Text.Json.JsonSerializer.Deserialize<TokenResponse>(content, new System.Text.Json.JsonSerializerOptions
        {
            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
        });

        return tokenResponse;
    }

    private void SaveRefreshToken(string refreshToken)
    {
        // Example: Save the refresh token securely in your database or configuration
        Logger.LogInformation($"Refresh Token: {refreshToken}");
        // Save to database or secure storage
    }
}
