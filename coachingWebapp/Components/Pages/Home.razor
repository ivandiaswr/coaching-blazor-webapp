@page "/"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory

@using Microsoft.AspNetCore.Components.Forms

<MudPopoverProvider/> 

<PageTitle>@pageTitle</PageTitle>

<section id="services" class="services-section">
    <div class="container">

        <header class="services-header">
            <span class="section-tag">Our Services</span>
            <h1>Transformative Coaching <span class="highlight">Solutions</span></h1>
            <p class="header-description">Embark on a journey of personal and professional growth with our expert-led programs tailored to your success.</p>
        </header>

        <div class="primary-services">
            <div class="services-grid featured">
                <div class="service-card featured animate-on-scroll">
                    <a href="/services/coaching/life-coaching" class="card-link">
                        <div class="card-header">
                            <div class="service-icon">
                                <i class="fas fa-rocket"></i>
                            </div>
                            <span class="section-tag">Most Popular</span>
                        </div>
                        <div class="card-content">
                            <h2>Life Liberation Mastery</h2>
                            <p>Unleash your true power with lasting tools and strategies to transform all areas of your life. Get the support you need with Life Coaching. Do more, Serve more and Become your authentic self more.</p>
                            <ul class="service-benefits">
                                <li><i class="fas fa-check"></i> Master your relationships, wellness, and finances</li>
                                <li><i class="fas fa-check"></i> Break free from feeling stuck and gain clarity</li>
                                <li><i class="fas fa-check"></i> Reclaim your inner peace and authentic self</li>
                                <li><i class="fas fa-check"></i> Create a roadmap to ignite your future</li>
                            </ul>
                            <div class="button-container">
                                <span class="btn-primary">
                                    Start Your Journey
                                    <i class="fas fa-arrow-right"></i>
                                </span>
                            </div>
                        </div>
                     </a>
                </div>

                <div class="service-card featured animate-on-scroll">
                    <a href="/services/coaching/career-coaching" class="card-link">
                        <div class="card-header">
                            <div class="service-icon">
                                <i class="fas fa-chart-line"></i>
                            </div>
                            @*<span class="service-tag">Trending</span>*@
                        </div>
                        <div class="card-content">
                            <h2>Career Accelerator</h2>
                            <p>Accelerate your professional growth with strategic career results coaching.</p>
                            <ul class="service-benefits">
                                <li><i class="fas fa-check"></i> Career Path Mapping</li>
                                <li><i class="fas fa-check"></i> Interviews Preparation and CV Re-assessment</li>
                                <li><i class="fas fa-check"></i> Self and Skills Actualization</li>
                                <li><i class="fas fa-check"></i> Mentoring and Career Clarity</li>
                            </ul>
                            <div class="button-container">
                                <span class="btn-primary">
                                    Start Your Journey
                                    <i class="fas fa-arrow-right"></i>
                                </span>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
        </div>

        <div class="secondary-services">
            <div class="secondary-header">
                <h2>Specialized Food Regulatory Affairs Support</h2>
                <p>Professional guidance for your compliance needs</p>
            </div>
            
            <div class="services-grid compact">
                <div class="service-card compact">
                    <a href="/services/regulatory/consulting" class="card-link">
                        <div class="service-icon">
                            <i class="fas fa-tags"></i>
                        </div>
                        <div class="card-content">
                            <h3>Food Regulatory Consulting</h3>
                            <p>Independent and Expert Food Regulatory Affairs to ensure compliance with UK, IE/ROI and EU-harmonised food law standards.</p>
                            <span class="btn-secondary">
                                Learn More
                            </span>
                        </div>
                    </a>
                </div>

                <div class="service-card compact">
                    <a href="/services/regulatory/training" class="card-link">
                        <div class="service-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="card-content">
                            <h3>Food Regulatory Training</h3>
                            <p>Online and In Person Food Regulatory Affairs Training sessions available.</p>
                            <span class="btn-secondary">
                                Learn More
                            </span>
                        </div>
                    </a>
                </div>
            </div>
        </div>

        <div class="cta-section">
            <div class="cta-content">
                <h2>Ready to Transform Your Future?</h2>
                <p>Schedule a free consultation call to discuss your goals</p>
            </div>
            <a href="#contact" class="services-cta-button">
                <span class="cta-icon"><i class="fas fa-calendar-check"></i></span>
                <span class="cta-text">
                    <span class="primary-text">Book Your Free Discovery Call</span>
                    <span class="secondary-text">30 minutes, zero obligation</span>
                </span>
                <i class="fas fa-arrow-right"></i>
            </a>
        </div>
    </div>
</section>

<section id="testimonials">
    <div class="title-section">
        <h2 class="section-title">What Our <span class="highlight">Clients Say</span></h2>
        <p class="section-subtitle">Real Stories, Real Results</p>
    </div>
    
   <div class="testimonials-container">
        <div class="testimonials-grid">
            @foreach (var testimonial in testimonials)
            {
                <div class="testimonial-card">
                    <div class="video-wrapper">
                        <div class="video-container" @onclick="() => ToggleVideo(testimonial.Id)">
                            <video id="video-@testimonial.Id" playsinline controls=true volume="0.5" 
                                  @onended="() => OnVideoEnded(testimonial.Id)">           
                                <source src="@testimonial.Path" type="video/mp4">
                            </video>
                            <div class="play-overlay @(testimonial.IsPlaying ? "hidden" : "")">
                                <div class="play-button">
                                    <i class="@(testimonial.IsPlaying ? "fas fa-pause" : "fas fa-play")"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="testimonial-content">
                        <div class="testimonial-quote">
                            <i class="fas fa-quote-left quote-icon"></i>
                            <p class="testimonial-text">@testimonial.Results</p>
                        </div>
                        <div class="testimonial-author-info">
                            <div class="author-details">
                                <p class="testimonial-author">@testimonial.Author</p>
                                <p class="author-role">@testimonial.Role</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <div class="cta-section">
            <a href="#contact" class="services-cta-button">
                <span class="cta-icon"><i class="fas fa-calendar-check"></i></span>
                <span class="cta-text">
                    <span class="primary-text">Book Your Free Discovery Call</span>
                    <span class="secondary-text">30 minutes, zero obligation</span>
                </span>
                <i class="fas fa-arrow-right"></i>
            </a>
        </div>
</section>

<section id="contact">
    <div class="contact-container">
        <div class="contact-form-container">
            <div class="contact-wrapper">
                <div class="unified-container">
                    <div class="content-grid">         
                        <div class="form-section">
                            <h1><span class="highlight">Meeting</span> Schedule</h1>
                            <EditForm Model="@session" OnValidSubmit="CreateSessionAsync" FormName="sessionForm">
                                <DataAnnotationsValidator />

                                <div class="form-group">
                                    <label for="FirstName">First Name</label>
                                    <InputText id="firstName" class="form-control" @bind-Value="session.FirstName" placeholder="First Name" />
                                    <ValidationMessage For="@(() => session.FirstName)" />
                                </div>
                                <div class="form-group">
                                    <label for="LastName">Last Name</label>
                                    <InputText id="lastName" class="form-control" @bind-Value="session.LastName" placeholder="Last Name" />
                                    <ValidationMessage For="@(() => session.LastName)" />
                                </div>
                                <div class="form-group">
                                    <label for="Email">Email</label>
                                    <InputText id="email" class="form-control" @bind-Value="session.Email" placeholder="Your Email" />
                                    <ValidationMessage For="@(() => session.Email)" />
                                </div>
                               <div class="form-group custom-select">
                                    <label for="SessionCategory">Session</label>
                                    <InputSelect id="SessionCategory" class="form-control hoverable-input" @bind-Value="session.SessionCategory">
                                        @foreach (var type in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                                        {
                                            <option value="@type">
                                                @((type.GetType().GetField(type.ToString())?.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute)?.Name ?? type.ToString())
                                            </option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => session.SessionCategory)" />
                                </div>
                                <div class="form-group">
                                    <label for="PreferredDateTime">Date & Time</label>
                                    <div class="input-with-icon">
                                        <InputText id="PreferredDateTime" class="form-control hoverable-input" @bind-Value="session.PreferredDateTimeString" @onclick="ToggleCalendar" placeholder="Preffered time for the session" readonly/>
                                        <i class="fas fa-calendar calendar-icon" @onclick="ToggleCalendar"></i>
                                    </div>
                                    <ValidationMessage For="@(() => session.PreferredDateTimeString)" />
                                </div>
                                <Calendar @bind-IsVisible="showTimeSlots"
                                                Slots="availableSlots"
                                                BusyTimes="busyTimesConverted"
                                                FirstAvailableDate="firstAvailableDate"
                                                CurrentTimeZoneDisplay="@currentTimeZoneDisplay"
                                                AdminUnavailabilities="adminUnavailabilities"
                                                OnSlotSelected="HandleSlotSelected" />
                                <div class="form-group message-group">
                                    <label for="Message">Message</label>
                                    <InputTextArea id="message" class="form-control" @bind-Value="session.Message" rows="6" placeholder="Share what's on your mind..." />
                                    <ValidationMessage For="@(() => session.Message)" />
                                </div>
                                <div id="formStatus" class="form-status">
                                    @if (isLoggingIn)
                                    {
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                        <p>Scheduling your session. Please wait...</p>
                                    }
                                    else
                                    {
                                        @sessionFormStatus
                                    }
                                </div>
                                <button type="submit"><i class="fa-brands fa-google"></i> Book Your Free Discovery Call</button>
                                <p class="privacy-notice">By signing up, you’re agreeing to receive marketing emails from Ítala Veloso. You can unsubscribe at any time. For more details, check out our <a href="/privacy-policy">Privacy Policy</a> and <a href="/terms-and-conditions">Terms & Conditions</a>.</p>
                            </EditForm>
                        </div>

                        <div class="right-content">
                            <div class="video-header-container">
                                <video autoplay muted loop playsinline preload="auto" class="video-header">
                                    <source src="https://italaveloso.com/Videos/adventure.mp4" type="video/mp4">
                                    Your browser does not support the video tag mp4.
                                </video>
                                <div class="contact-video-overlay">
                                    <div class="contact-header">
                                        <i class="fas fa-calendar-check header-icon"></i>
                                        <h2>Begin Your Self-Discovery Journey Today</h2>
                                        <p class="contact-subtitle">Transform your life, your profession, your destiny</p>
                                    </div>
                                </div>
                            </div>
                            <div class="benefits-section">
                                <div class="benefits-content">
                                    <h3>Your Path to Growth</h3>
                                    <ul class="benefits-list">
                                        <li><i class="fas fa-check-circle"></i> Live a Purpose-Driven Life</li>
                                        <li><i class="fas fa-check-circle"></i> Get Clear and Focused Goals</li>
                                        <li><i class="fas fa-check-circle"></i> Change every area of your Life</li>
                                        <li><i class="fas fa-check-circle"></i> 1:1 and Group Life Coaching Sessions</li>
                                    </ul>
                                    <p class="benefits-note">A confidential commitment to yourself, for self-development, growth and expansion</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
private string pageTitle = "Home | Ítala Veloso";
    private Session session = new Session();
    private List<Testimonial> testimonials = new List<Testimonial>
    {
        new Testimonial
        {
            Id = 1,
            Path = "https://italaveloso.com/Testimonials/testimonial_Laviniah.mp4",
            Results = "Ítala been really helpful in terms of giving me concrete knowedge about things to do with trauma...",
            Author = "Laviniah",
            Role = "- Cyber Security Analyst"
        },
        new Testimonial
        {
            Id = 2,
            Path = "https://italaveloso.com/Testimonials/testimonial_Fi.mp4",
            Results = "Ítala kept getting me into this place that it is ok to feel what I was feeling...",
            Author = "Fi",
            Role = "- Civil Servant"
        },
        new Testimonial
        {
            Id = 3,
            Path = "https://italaveloso.com/Testimonials/testimonial_Monica.mp4",
            Results = "With coaching, she really helped me to get to know myself better...",
            Author = "Mónica",
            Role = "- Oral Health Backoffice Assistant"
        }
    };
    private string sessionFormStatus = string.Empty;
    private bool canScroll = true;
    private bool showTimeSlots = false;
    private List<DateTime> availableSlots = new();
    private List<(DateTimeOffset Start, DateTimeOffset End)> busyTimesConverted = new();
    private List<UnavailableTime> adminUnavailabilities { get; set; } = new();
    private DateTime? firstAvailableDate = null;
    private bool isLoggingIn = false;
    private bool isCalendarLoading = false;
    private string currentTimeZoneDisplay = "detecting...";

    protected override void OnInitialized()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setTitle", pageTitle);
            currentTimeZoneDisplay = await JSRuntime.InvokeAsync<string>("eval", "Intl.DateTimeFormat().resolvedOptions().timeZone");
        }

        if (canScroll)
        {
            if (NavigationManager.Uri.Contains('#'))
            {
                await ScrollService.ScrollToFragment();
            }
            else
            {
                await ScrollService.ScrollToTop();
            }
        }
    }
    
    #region ContactMessage
    private async Task CreateSessionAsync()
    {
        try
        {
            isLoggingIn = true; 
            StateHasChanged();

            var result = await SessionService.CreateSessionAsync(session);
            
            sessionFormStatus = result 
            ? "Thank you for your message. Meeting scheduled. We'll get back to you soon!" 
            : "Sending contact information failed. Please try again or contact support.";

            if (result) 
            {
                @* UserMetrics.RecordSessionBooking("booked", userId); *@
                session.UpdateFullName();
                result = await EmailSubscriptionService.SubscriptionAsync(new EmailSubscription { Name = session.FullName, Email = session.Email });
                session = new Session();
            }            
        }
        catch(Exception ex)
        {
            await LogService.LogError("Error during CreateSessionAsync", ex.Message);
            sessionFormStatus = "An error occurred. Please try again later.";
        }
        finally 
        {
            isLoggingIn = false; 
            StateHasChanged();
        }
    }
    
    private async Task ToggleCalendar()
    {
        if (isCalendarLoading) return;

        isCalendarLoading = true;
        showTimeSlots = !showTimeSlots;

        var startDate = DateTime.UtcNow.Date.AddDays(2);
        var endDate = startDate.AddDays(25);

        try
        {
            var sessions = await SessionService.GetAllSessions() ?? new List<Session>();
            busyTimesConverted = sessions
                .Where(c => c.PreferredDateTime != default && c.PreferredDateTime > DateTime.UtcNow.AddDays(2))
                .Select(c => (
                    Start: new DateTimeOffset(c.PreferredDateTime, TimeSpan.Zero),
                    End: new DateTimeOffset(c.PreferredDateTime.AddMinutes(45), TimeSpan.Zero)
                ))
                .ToList();

            adminUnavailabilities = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();

            availableSlots = GenerateAvailableSlots(DateTime.UtcNow.Date.AddDays(2), busyTimesConverted, adminUnavailabilities);
            firstAvailableDate = availableSlots.Any() ? availableSlots.Min() : DateTime.Now;
        }
        catch (Exception ex)
        {
            await LogService.LogError("Failed to refresh calendar data", ex.Message);
            availableSlots = new List<DateTime>();
            busyTimesConverted = new List<(DateTimeOffset Start, DateTimeOffset End)>();
            firstAvailableDate = DateTime.Now;
        }
        finally
        {
            isCalendarLoading = false;
            StateHasChanged();
        }
    }

    private List<DateTime> GenerateAvailableSlots(DateTime startDate, List<(DateTimeOffset Start, DateTimeOffset End)> busyTimes, List<UnavailableTime> adminUnavailabilities)
    {
        var slots = new List<DateTime>();
        var endDate = startDate.AddDays(25);
        var workStartTime = new TimeSpan(10, 0, 0);
        var workEndTime = new TimeSpan(21, 0, 0);
        var slotDuration = TimeSpan.FromMinutes(45);

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            @* if (date.DayOfWeek == DayOfWeek.Sunday)
                continue; *@

            for (var time = workStartTime; time < workEndTime; time = time.Add(slotDuration))
            {
                var slotStart = date.Date.Add(time);
                var slotEnd = slotStart.Add(slotDuration);

                if (slotStart <= DateTime.UtcNow.AddDays(2))
                continue;

                bool isBusy = busyTimes.Any(busy =>
                    slotStart < busy.End.LocalDateTime && slotEnd > busy.Start.LocalDateTime);

                bool isWithinUnavailability = adminUnavailabilities.Any(u =>
                    (u.IsRecurring 
                    && ((int)u.DayOfWeek + 1) % 7 == (int)slotStart.DayOfWeek
                    && slotStart.TimeOfDay >= u.StartTime && slotStart.TimeOfDay < u.EndTime)
                    ||
                    (!u.IsRecurring && u.Date == slotStart.Date 
                    && slotStart.TimeOfDay >= u.StartTime 
                    && slotStart.TimeOfDay < u.EndTime));

                if (!isBusy && !isWithinUnavailability)
                {
                    slots.Add(slotStart);
                }
            }
        }
        return slots;
    }

    private Task HandleSlotSelected(string selectedSlot)
    {
        var slot = DateTime.Parse(selectedSlot, null, System.Globalization.DateTimeStyles.RoundtripKind);
        session.PreferredDateTime = slot;
        session.PreferredDateTimeString = slot.ToString("dd/MM/yyyy HH:mm");
        showTimeSlots = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnModalVisibilityChanged(bool isVisible)
    {
        showTimeSlots = isVisible;
    }
    #endregion
    
    #region Testimonials

    public async Task ToggleVideo(int testimonialId)
    {
        canScroll = false;

        try
        {        
            var currentTestimonial = testimonials.First(t => t.Id == testimonialId);

            foreach(var testimonial in testimonials) {
                if(testimonial.Id != testimonialId){
                    await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + testimonial.Id);
                    testimonial.IsPlaying = false;
                }
            }

            if(!currentTestimonial.IsPlaying){
                await JSRuntime.InvokeVoidAsync("playVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = true;
            } else {
                await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = false;
            }
        } 
        catch(Exception ex) {
            await LogService.LogError("Error on ToggleVideo", ex.Message);
        }
        
        canScroll = false;
        StateHasChanged();        
    }


    public void OnVideoEnded(int testimonialId){
        var testimonial = testimonials.First(t => t.Id == testimonialId);
        testimonial.IsPlaying = false;

        StateHasChanged();
    }

    #endregion
}
