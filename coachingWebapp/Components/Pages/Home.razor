@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

@inject IEmailSubscriptionService EmailSubscriptionService
@inject IContactService ContactService

@inject NavigationManager NavigationManager
@inject ILogger<Home> Logger

@using BusinessLayer.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using ModelLayer.Models

<PageTitle>Home</PageTitle>

<section id="video">
    <video autoplay muted loop playsinline>
        <source src="/Testimonials/adventure.mp4" type="video/mp4">
        Your browser does not support the video tag mp4.
    </video>
</section>

<section id="services">
    <div class="services-container">
        <h1>Transformative Coaching Services</h1>
        <p class="services-intro">Embark on a journey of personal and professional growth with our tailored coaching programs.</p>

        <div class="services-grid">
            <div class="service-category coaching">
                <h2>Core Coaching Programs</h2>
                <div class="service-cards">
                    <div class="service-card">
                        <div class="service-icon"><i class="fas fa-rocket"></i></div>
                        <h3>Personal Growth Acceleration</h3>
                        <p>Unlock your full potential and fast-track your personal development journey.</p>
                        <a href="/services/personal-growth" class="btn-learn-more">Explore Program</a>
                    </div>
                    <div class="service-card">
                        <div class="service-icon"><i class="fas fa-chart-line"></i></div>
                        <h3>Career Advancement Strategy</h3>
                        <p>Navigate career transitions and climb the professional ladder with confidence.</p>
                        <a href="/services/career-strategy" class="btn-learn-more">Discover Path</a>
                    </div>
                    <div class="service-card">
                        <div class="service-icon"><i class="fas fa-balance-scale"></i></div>
                        <h3>Life Balance Mastery</h3>
                        <p>Achieve harmony in your personal and professional life for overall well-being.</p>
                        <a href="/services/life-balance" class="btn-learn-more">Find Balance</a>
                    </div>
                    <div class="service-card">
                        <div class="service-icon"><i class="fas fa-handshake"></i></div>
                        <h3>Relationship Enhancement</h3>
                        <p>Strengthen personal and professional relationships for a more fulfilling life.</p>
                        <a href="/services/relationship-coaching" class="btn-learn-more">Improve Connections</a>
                    </div>
                </div>
            </div>

            <div class="service-category regulatory">
                <h2>Specialized Regulatory Support</h2>
                <div class="service-cards secondary">
                    <div class="service-card">
                        <div class="service-icon"><i class="fas fa-tags"></i></div>
                        <h3>UK Compliance Labeling</h3>
                        <p>Ensure your products meet UK labeling standards with expert guidance.</p>
                        <a href="/services/uk-labeling-compliance" class="btn-learn-more">Get Compliant</a>
                    </div>
                    <div class="service-card">
                        <div class="service-icon"><i class="fas fa-file-alt"></i></div>
                        <h3>Regulatory Document Review</h3>
                        <p>Expert review and approval of documentation for UK legal requirements.</p>
                        <a href="/services/documentation-review" class="btn-learn-more">Streamline Process</a>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <a href="#contact" class="services-button">
                <i class="fas fa-calendar-check"></i>
                Schedule a Free Call
            </a>
        </div>
    </div>
</section>

<section class="title-section">
  <h1 class="section-title">Success Stories from Clients</h1>
</section>

<section id="testimonials">
    <div class="testimonials-container">
        @foreach (var testimonial in testimonials)
        {
            <div class="testimonial-card">
                <div class="video-container" @onclick="() => ToggleVideo(testimonial.Id)">
                    <video id="video-@testimonial.Id" playsinline controls volume="0.5" @onended="() => OnVideoEnded(testimonial.Id)">
                        <source src="@testimonial.Path" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <div class="play-button" style="display: @(testimonial.IsPlaying ? "none" : "flex")">▶</div>
                </div>
                <p class="testimonial-text">@testimonial.Text</p>
                <p class="testimonial-author">@testimonial.Author</p>
            </div>
        }
    </div>
    <div>
        <a href="#contact" class="testimonials-button">
            <i class="fas fa-route"></i>
            Start Your Journey
        </a>
    </div>
</section>

<section id="contact">
    <div class="contact-wrapper">
        <div class="unified-container">
            <div class="spiritual-header">
                <i class="fas fa-pray header-icon"></i>
                <h2>Begin Your Spiritual Journey Today</h2>
                <p class="spiritual-subtitle">Transform your life through personalized faith-based guidance</p>
            </div>

            <div class="content-grid">
                <div class="form-section">
                    <EditForm Model="@contact" OnValidSubmit="ContactSubmit" FormName="contactForm">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <InputText id="name" class="form-control" @bind-Value="contact.Name" placeholder="Your Name" />
                            <ValidationMessage For="@(() => contact.Name)" />
                        </div>
                        <div class="form-group">
                            <InputText id="email" class="form-control" @bind-Value="contact.Email" placeholder="Your Email" />
                            <ValidationMessage For="@(() => contact.Email)" />
                        </div>
                        <div class="form-group message-group">
                            <InputTextArea id="message" class="form-control" @bind-Value="contact.Message" rows="4" placeholder="Share your spiritual journey with us..." />
                            <div class="message-helper">
                                <p>Some things you might want to share:</p>
                                <ul>
                                    <li>Where you are in your faith journey</li>
                                    <li>What challenges you're facing</li>
                                    <li>What spiritual growth you're seeking</li>
                                </ul>
                            </div>
                            <ValidationMessage For="@(() => contact.Message)" />
                        </div>
                        <button type="submit">Schedule Your Free Spiritual Guidance Call</button>
                    </EditForm>
                    <div id="formStatus" class="form-status">@contactFormStatus</div>
                </div>

                <div class="benefits-section">
                    <div class="benefits-content">
                        <h3>Your Path to Spiritual Growth</h3>
                        <ul class="benefits-list">
                            <li><i class="fas fa-check-circle"></i> Personalized spiritual guidance tailored to your journey</li>
                            <li><i class="fas fa-check-circle"></i> Scripture-based wisdom for life's challenges</li>
                            <li><i class="fas fa-check-circle"></i> Prayer support and community</li>
                            <li><i class="fas fa-check-circle"></i> Practical steps for spiritual growth</li>
                            <li><i class="fas fa-check-circle"></i> Confidential and judgment-free space</li>
                        </ul>
                        <p class="benefits-note">No long-term commitment required - cancel anytime</p>
                        <div class="testimonial-box">
                            <i class="fas fa-quote-left"></i>
                            <p>"This spiritual guidance transformed my relationship with God and gave me the direction I was seeking."</p>
                            <span class="testimonial-author">- Sarah M.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private EmailSubscription emailSubscription = new EmailSubscription();
    private Contact contact = new Contact();
    private string subscriptionMessage;
    private bool subscriptionSuccess = false;
    private bool isSubscribing = false;
    private string contactFormStatus = string.Empty;
    private bool showGiftOffer = false;

    protected override void OnInitialized()
    {
        //Console.WriteLine("Index page initialized");

        testimonials = new List<Testimonial>
        {
            new Testimonial
            {
                Id = 1,
                Path = "/Testimonials/testimonial_1.mp4",
                Text = "The coaching sessions have truly transformed my life. I feel more confident and motivated.",
                Author = "- Jane Doe"
            },
            new Testimonial
            {
                Id = 2,
                Path = "Testimonials/testimonial_2.mp4",
                Text = "Exceptional guidance and support throughout my career transition. Highly recommend!",
                Author = "- John Smith"
            },
            new Testimonial
            {
                Id = 3,
                Path = "Testimonials/testimonial_3.mp4",
                Text = "The personalized approach helped me achieve my health and wellness goals.",
                Author = "- Emily Davis"
            }
        };
    }
    protected override void OnParametersSet()
    {
        //Console.WriteLine("Index page parameters set");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("document.addEventListener", "keydown", DotNetObjectReference.Create(this), "HandleKeyDown");
        }
    }

    #region GiftModal
    private async Task GetGiftBySubscribeNewsLetter()
    {
        Logger.LogInformation("SubscribeToNewsLetter method called");
        if (!string.IsNullOrWhiteSpace(emailSubscription.Email))
        {
            await InvokeAsync(() =>
            {
                isSubscribing = true;
                StateHasChanged();
            });

            try
            {
                Logger.LogInformation($"Attempting to subscribe with email: {emailSubscription.Email}");

                var result = await EmailSubscriptionService.SubscriptionGiftAsync(emailSubscription.Email);

                await InvokeAsync(() =>
                {
                    subscriptionSuccess = result;
                    subscriptionMessage = result ? "Thank you! Your submission has been received!" : "Subscription failed. Please try again or contact support.";

                    if (result) 
                    {
                        emailSubscription = new EmailSubscription();  // Reset the form
                    }

                    StateHasChanged();
                });

                Logger.LogInformation($"Subscription result: {result}");
            }
            catch (Exception ex)
            {
                await InvokeAsync(() =>
                {
                    subscriptionMessage = "An error occurred. Please try again later.";
                    StateHasChanged();
                });

                Logger.LogError(ex, "Error during subscription");
            }
            finally
            {
                await InvokeAsync(() =>
                {
                    isSubscribing = false;
                    StateHasChanged();
                });
            }
        }

        Logger.LogInformation("SubscribeToNewsLetter method completed");
    }
    private void ShowGiftOffer()
    {
        showGiftOffer = true;
        subscriptionMessage = string.Empty;
        subscriptionSuccess = false;
    }
    public void CloseGiftOffer()
    {
        showGiftOffer = false;
        StateHasChanged();
    }
    private void CloseGiftOfferIfClickedOutside()
    {
        if (showGiftOffer)
        {
            CloseGiftOffer();
        }
    }
    #endregion
    
    #region ContactMessage
    private async Task ContactSubmit()
        { 
            Logger.LogInformation("ContactSubmit method called");

            try
            {
                Logger.LogInformation("Attempting to send contact information");

                var result = await ContactService.ContactSubmitAsync(contact);
            
                contactFormStatus = result ? "Thank you for your message. I'll get back to you soon!" : "Sending contact information failed. Please try again or contact support.";

                if (result)
                {
                    contact = new Contact(); // Reset the form
                }

                StateHasChanged();
            }
            catch(Exception ex)
            {
                subscriptionMessage = "An error occurred. Please try again later.";
                StateHasChanged();

                Logger.LogError(ex, "Error during ContactSubmit");
            }
            
            Logger.LogInformation("ContactSubmit method completed");
        }
    #endregion
    
    #region Testimonials

    private List<Testimonial> testimonials = new();

    public async Task ToggleVideo(int testimonialId){

        try
        {        
            var currentTestimonial = testimonials.First(t => t.Id == testimonialId);

            foreach(var testimonial in testimonials){
                if(testimonial.Id != testimonialId){
                    await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + testimonial.Id);
                    testimonial.IsPlaying = false;
                }
            }

            if(!currentTestimonial.IsPlaying){
                await JSRuntime.InvokeVoidAsync("playVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = true;
            } else {
                await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = false;
            }
        } catch(Exception ex){
            Logger.LogInformation($"Error on ToggleVideo: {ex.Message}");
        }

        StateHasChanged();        
    }

    public void OnVideoEnded(int testimonialId){
        var testimonial = testimonials.First(t => t.Id == testimonialId);
        testimonial.IsPlaying = false;

        StateHasChanged();
    }

    #endregion
}
