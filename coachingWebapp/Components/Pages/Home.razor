@page "/"
@rendermode InteractiveServer

@inject IEmailSubscriptionService EmailSubscriptionService
@inject IContactService ContactService
@inject IGoogleService GoogleService
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Home> Logger

@inject NavigationManager NavigationManager

@using BusinessLayer.Services.Interfaces
@using Google.Apis.Calendar.v3.Data
@using Microsoft.AspNetCore.Components.Forms
@using ModelLayer.Models
@using coachingWebapp.Components.Components


<PageTitle>Home | Ítala Veloso</PageTitle>

<section id="video">
    <video autoplay muted loop playsinline preload="auto">
        <source src="/Videos/car-driving-mountain.mp4" type="video/mp4">
        Your browser does not support the video tag mp4.
    </video>
    <div class="video-overlay">
        <h1 class="main-heading">Reach your biggest goals</h1>
        <div class="sub-heading">
            Master your<br>
            <span class="highlight">Journey</span><br>
            Master Your<br>
            <span class="highlight">Life</span>
        </div>
        <a class="cta-button" href="#contact">Schedule a Free Call</a>
    </div>
</section>

<section id="services" class="services-section">
    <div class="container">

        <header class="services-header">
            <span class="section-tag">Our Services</span>
            <h1>Transformative Coaching <span class="highlight">Solutions</span></h1>
            <p class="header-description">Embark on a journey of personal and professional growth with our expert-led programs tailored to your success.</p>
        </header>

        <div class="primary-services">
            <div class="services-grid featured">
                <div class="service-card featured">
                    <div class="card-header">
                        <div class="service-icon">
                            <i class="fas fa-rocket"></i>
                        </div>
                        <span class="service-tag">Most Popular</span>
                    </div>
                    <div class="card-content">
                        <h2>Life Mastery</h2>
                        <p>Transform your approach to work-life integration through our comprehensive coaching program.</p>
                        <ul class="service-benefits">
                            <li><i class="fas fa-check"></i> Personalized Strategy Development</li>
                            <li><i class="fas fa-check"></i> Weekly 1-on-1 Coaching Sessions</li>
                            <li><i class="fas fa-check"></i> Progress Tracking Tools</li>
                        </ul>
                        <a href="/services/coaching/life-coaching" class="btn-primary">
                            Start Your Journey
                            <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>

                <div class="service-card featured">
                    <div class="card-header">
                        <div class="service-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        @*<span class="service-tag">Trending</span>*@
                    </div>
                    <div class="card-content">
                        <h2>Career Advancement</h2>
                        <p>Accelerate your professional growth with strategic career development coaching.</p>
                        <ul class="service-benefits">
                            <li><i class="fas fa-check"></i> Career Path Mapping</li>
                            <li><i class="fas fa-check"></i> Leadership Skill Development</li>
                            <li><i class="fas fa-check"></i> Industry-Specific Guidance</li>
                        </ul>
                        <a href="/services/coaching/career-coaching" class="btn-primary">
                            Explore Program
                            <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="secondary-services">
            <div class="secondary-header">
                <h2>Specialized Regulatory Support</h2>
                <p>Professional guidance for your compliance needs</p>
            </div>
            
            <div class="services-grid compact">
                <div class="service-card compact">
                    <div class="service-icon">
                        <i class="fas fa-tags"></i>
                    </div>
                    <div class="card-content">
                        <h3>Regulatoy Consulting</h3>
                        <p>Expert guidance for meeting UK labeling standards</p>
                        <a href="/services/regulatory/consulting" class="btn-secondary">Learn More</a>
                    </div>
                </div>

                <div class="service-card compact">
                    <div class="service-icon">
                        <i class="fas fa-file-alt"></i>
                    </div>
                    <div class="card-content">
                        <h3>Training</h3>
                        <p>Thorough review of regulatory documentation</p>
                        <a href="/services/regulatory/training" class="btn-secondary">Learn More</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="cta-section">
            <div class="cta-content">
                <h2>Ready to Transform Your Future?</h2>
                <p>Schedule a free consultation call to discuss your goals</p>
            </div>
            <a href="#contact" class="services-cta-button">
                <span class="cta-icon"><i class="fas fa-calendar-check"></i></span>
                <span class="cta-text">
                    <span class="primary-text">Book Your Free Call</span>
                    <span class="secondary-text">15 minutes, zero obligation</span>
                </span>
                <i class="fas fa-arrow-right"></i>
            </a>
        </div>
    </div>
</section>

<section id="testimonials">
    <div class="title-section">
        <h2 class="section-title">What Our <span class="highlight">Clients Say</span></h2>
        <p class="section-subtitle">Real Stories, Real Results</p>
    </div>
    
   <div class="testimonials-container">
        <div class="testimonials-grid">
            @foreach (var testimonial in testimonials)
            {
                <div class="testimonial-card">
                    <div class="video-wrapper">
                        <div class="video-container" @onclick="() => ToggleVideo(testimonial.Id)">
                            <video id="video-@testimonial.Id" playsinline controls=true volume="0.5" 
                                  @onended="() => OnVideoEnded(testimonial.Id)">           
                                <source src="@testimonial.Path" type="video/mp4">
                            </video>
                            <div class="play-overlay @(testimonial.IsPlaying ? "hidden" : "")">
                                <div class="play-button">
                                    <i class="@(testimonial.IsPlaying ? "fas fa-pause" : "fas fa-play")"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="testimonial-content">
                        <div class="testimonial-quote">
                            <i class="fas fa-quote-left quote-icon"></i>
                            <p class="testimonial-text">@testimonial.Results</p>
                        </div>
                        <div class="testimonial-author-info">
                            <div class="author-details">
                                <p class="testimonial-author">@testimonial.Author</p>
                                <p class="author-role">@testimonial.Role</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <div class="cta-container">
        <a href="#contact" class="testimonials-button">
            <i class="fas fa-star"></i>
            Begin Your Success Story
        </a>
    </div>
</section>

<section id="contact">
    <div class="contact-container">
        <div class="contact-form-container">
            <div class="contact-wrapper">
                <div class="unified-container">
                    <div class="content-grid">         
                        <div class="form-section">
                            <EditForm Model="@contact" OnValidSubmit="ContactSubmitAsync" FormName="contactForm">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label for="Name">Name</label>
                                    <InputText id="name" class="form-control" @bind-Value="contact.Name" placeholder="Your Name" />
                                    <ValidationMessage For="@(() => contact.Name)" />
                                </div>
                                <div class="form-group">
                                    <label for="Email">Email</label>
                                    <InputText id="email" class="form-control" @bind-Value="contact.Email" placeholder="Your Email" />
                                    <ValidationMessage For="@(() => contact.Email)" />
                                </div>
                               <div class="form-group custom-select">
                                    <label for="SessionCategory">Session Type</label>
                                    <InputSelect id="SessionCategory" class="form-control" @bind-Value="contact.SessionCategory">
                                        @foreach (var type in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                                        {
                                            <option value="@type">
                                                @((type.GetType().GetField(type.ToString())?.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute)?.Name ?? type.ToString())
                                            </option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => contact.SessionCategory)" />
                                </div>
                                <div class="form-group">
                                    <label for="PreferredDateTime">Date & Time</label>
                                    <div class="input-with-icon">
                                        <InputText id="PreferredDateTime" class="form-control" @bind-Value="contact.PreferredDateTimeString" @onclick="ToggleCalendar" readonly/>
                                        <i class="fas fa-calendar calendar-icon" @onclick="ToggleCalendar"></i>
                                    </div>
                                    <ValidationMessage For="@(() => contact.PreferredDateTimeString)" />
                                </div>
                                @if (showTimeSlots)
                                {
                                    <Calendar IsVisible="showTimeSlots" IsVisibleChanged="OnModalVisibilityChanged">
                                        <div id="calendar"></div>
                                    </Calendar>
                                }
                                <div class="form-group message-group">
                                    <label for="Message">Message</label>
                                    <InputTextArea id="message" class="form-control" @bind-Value="contact.Message" rows="6" placeholder="Share what's on your mind..." />
                                    <ValidationMessage For="@(() => contact.Message)" />
                                </div>
                                <button type="submit"><i class="fa-brands fa-google"></i> Schedule Your Free Call</button>
                                <p class="privacy-notice">By signing up, you’re agreeing to receive marketing emails from Ítala Veloso. You can unsubscribe at any time. For more details, check out our <a href="/privacy-policy">Privacy Policy</a>.</p>
                            </EditForm>
                            <div id="formStatus" class="form-status">
                                @if (isLoggingIn)
                                {
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                    <p>Logging in to Google and scheduling your session. Please wait...</p>
                                }
                                else
                                {
                                    @contactFormStatus
                                }
                            </div>
                        </div>

                        <div class="right-content">
                            <div class="video-header-container">
                                <video autoplay muted loop playsinline preload="auto" class="video-header">
                                    <source src="/Videos/adventure720p.mp4" type="video/mp4">
                                    Your browser does not support the video tag mp4.
                                </video>
                                <div class="contact-video-overlay">
                                    <div class="contact-header">
                                        <i class="fas fa-calendar-check header-icon"></i>
                                        <h2>Begin Your Journey Today</h2>
                                        <p class="contact-subtitle">Transform your life through personalized guidance</p>
                                    </div>
                                </div>
                            </div>
                            <div class="benefits-section">
                                <div class="benefits-content">
                                    <h3>Your Path to Growth</h3>
                                    <ul class="benefits-list">
                                        <li><i class="fas fa-check-circle"></i> Personalized guidance</li>
                                        <li><i class="fas fa-check-circle"></i> Wisdom for life's challenges</li>
                                        <li><i class="fas fa-check-circle"></i> Support and community</li>
                                    </ul>
                                    <p class="benefits-note">No long-term commitment required - cancel anytime</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private EmailSubscription emailSubscription = new EmailSubscription();
    private Contact contact = new Contact();
    private List<Testimonial> testimonials = new List<Testimonial>
        {
            new Testimonial
            {
                Id = 1,
                Path = "Testimonials/testimonial_Laviniah.mp4",
                Results = "The coaching sessions have truly transformed my life. I feel more confident and motivated.",
                Author = "- Laviniah",
                Role = "Cyber Security Analyst"
            },
            new Testimonial
            {
                Id = 2,
                Path = "Testimonials/testimonial_Fi.mp4",
                Results = "Exceptional guidance and support throughout my career transition. Highly recommend!",
                Author = "- Fi",
                Role = "Civil Servant"
            },
            new Testimonial
            {
                Id = 3,
                Path = "Testimonials/testimonial_Monica.mp4",
                Results = "The personalized approach helped me achieve my health and wellness goals.",
                Author = "- Mónica",
                Role = "Oral Health"
            }
        };
    private string subscriptionMessage;
    private bool isSubscribing = false;
    private string contactFormStatus = string.Empty;
    private bool canScroll = true;
    private bool showTimeSlots = false;
    private List<DateTime> availableSlots;
    private List<TimePeriod> busyTimes;
    private bool calendarNeedsInitialization = false;
    private bool isLoggingIn = false;
    private DotNetObjectReference<Home> DotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(calendarNeedsInitialization)
        {
            calendarNeedsInitialization = false;

            using var dotNetRef = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeVoidAsync("initializeCalendar",
                DotNetObjectReference.Create(this),
                availableSlots.Select(slot => slot.ToString("o")).ToList(), // ISO 8601 format
                busyTimes
            );
        }
        
        if(canScroll)
        {
            if (NavigationManager.Uri.Contains('#'))
            {
                await ScrollService.ScrollToFragment();
            }
            else
            {
                await ScrollService.ScrollToTop();
            }
        }
    }
    
    #region ContactMessage
    private async Task ContactSubmitAsync()
    { 
        try
        {
            isLoggingIn = true; 
            StateHasChanged();

            var result = await ContactService.ContactSubmitAsync(contact);
            
            contactFormStatus = result ? "Thank you for your message. We'll get back to you soon!" : "Sending contact information failed. Please try again or contact support.";

            if (result)
                contact = new Contact();
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "Error during ContactSubmitAsync");
            contactFormStatus = "An error occurred. Please try again later.";
        }
        finally 
        {
            isLoggingIn = false; 
            StateHasChanged();
        }
    }
    
    private async Task ToggleCalendar()
    {
        var startDate = DateTime.UtcNow.Date.AddDays(1);
        var endDate = startDate.AddDays(13);

        try
        {
            busyTimes = await GoogleService.GetBusyTimes(startDate, endDate);

            availableSlots = GenerateAvailableSlots(startDate, endDate, busyTimes);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh calendar data");
            availableSlots = new List<DateTime>();
            busyTimes = new List<TimePeriod>();
        }

        showTimeSlots = !showTimeSlots;
        calendarNeedsInitialization = true;

        StateHasChanged();
    }

    private List<DateTime> GenerateAvailableSlots(DateTime startDate, DateTime endDate, List<TimePeriod> busyTimes)
    {
        var slots = new List<DateTime>();
        var workStartTime = new TimeSpan(9, 0, 0);
        var workEndTime = new TimeSpan(17, 0, 0);
        var slotDuration = TimeSpan.FromMinutes(30);

        for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
        {
            //if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
            //    continue;

            for (var time = workStartTime; time < workEndTime; time = time.Add(slotDuration))
            {
                var slotStart = date.Add(time);
                var slotEnd = slotStart.Add(slotDuration);

                bool isBusy = false;
                foreach (var busy in busyTimes)
                {
                    if (slotStart < busy.EndDateTimeOffset && busy.StartDateTimeOffset < slotEnd)
                    {
                        isBusy = true;
                        break;
                    }
                }

                if (!isBusy)
                {
                    slots.Add(slotStart);
                }
            }
        }

        return slots;
    }

    [JSInvokable]
    public void SelectTimeSlotFromJS(string selectedSlot)
    {
        var slot = DateTime.Parse(selectedSlot, null, System.Globalization.DateTimeStyles.RoundtripKind);
        SelectTimeSlot(slot);
    }

    private void SelectTimeSlot(DateTime selectedSlot)
    {
        contact.PreferredDateTime = selectedSlot;
        contact.PreferredDateTimeString = selectedSlot.ToString("dd/MM/yyyy HH:mm");
        showTimeSlots = false;
        calendarNeedsInitialization = false;

        StateHasChanged();
    }
    private void OnModalVisibilityChanged(bool isVisible)
    {
        showTimeSlots = isVisible;
    }
    #endregion
    
    #region Testimonials

    public async Task ToggleVideo(int testimonialId)
    {
        canScroll = false;

        try
        {        
            var currentTestimonial = testimonials.First(t => t.Id == testimonialId);

            foreach(var testimonial in testimonials) {
                if(testimonial.Id != testimonialId){
                    await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + testimonial.Id);
                    testimonial.IsPlaying = false;
                }
            }

            if(!currentTestimonial.IsPlaying){
                await JSRuntime.InvokeVoidAsync("playVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = true;
            } else {
                await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = false;
            }
        } 
        catch(Exception ex) {
            Logger.LogInformation($"Error on ToggleVideo: {ex.Message}");
        }
        
        canScroll = false;
        StateHasChanged();        
    }


    public void OnVideoEnded(int testimonialId){
        var testimonial = testimonials.First(t => t.Id == testimonialId);
        testimonial.IsPlaying = false;

        StateHasChanged();
    }

    #endregion
}
