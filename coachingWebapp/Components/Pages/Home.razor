@page "/"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory

<MudPopoverProvider /> 
<MudSnackbarProvider />

<SeoComponent Title="@pageTitle" 
              Description="Transform your life with expert life & career coaching from Ítala Veloso. Overcome trauma, break limiting beliefs, and achieve personal growth. Book your free discovery call today."
              Keywords="life coach, career coach, personal development, trauma healing, life transformation, coaching services, Ítala Veloso, UK coaching, self-discovery, emotional healing, breakthrough coaching, mindset coach"
              CanonicalUrl="https://italaveloso.com/"
              JsonLdStructuredData="@GetHomePageStructuredData()" />

<PageTitle>@pageTitle</PageTitle>
<section id="services" class="services-section">
    <div class="container">

        <header class="services-header">
            <span class="section-tag">Our Services</span>
            <h1>Transformative Coaching <span class="highlight">Solutions</span></h1>
            <p class="header-description">Embark on a journey of personal and professional growth with our expert-led programs tailored to your success.</p>
        </header>

        <div class="primary-services">
            <div class="services-grid featured">
                <div class="service-card featured animate-on-scroll delay-1 floating-element">
                        <div class="card-header">
                            <div class="service-icon">
                                <i class="fas fa-rocket"></i>
                            </div>
                            <span class="section-tag">Most Popular</span>
                        </div>
                        <div class="card-content">
                            <h2>Life Liberation Mastery</h2>
                            <p>Unleash your true power with lasting tools and strategies to transform all areas of your life. Get the support you need with Life Coaching. Do more, Serve more and Become your authentic self more.</p>
                            <ul class="service-benefits">
                                <li><i class="fas fa-check"></i> Master your relationships, wellness, and finances</li>
                                <li><i class="fas fa-check"></i> Break free from feeling stuck and gain clarity</li>
                                <li><i class="fas fa-check"></i> Reclaim your inner peace and authentic self</li>
                                <li><i class="fas fa-check"></i> Create a roadmap to ignite your future</li>
                            </ul>
                            <div class="button-service">
                                <a href="/services/coaching/life-coaching" class="card-link">
                                    <span class="btn-primary">
                                        <span>Start Your Life</span>
                                        <i class="fas fa-arrow-right"></i>
                                    </span>
                                </a>
                            </div>
                        </div>
                     
                </div>

                <div class="service-card featured animate-on-scroll delay-2">
                        <div class="card-header">
                            <div class="service-icon">
                                <i class="fas fa-chart-line"></i>
                            </div>
                            @*<span class="service-tag">Trending</span>*@
                        </div>
                        <div class="card-content">
                            <h2>Career Accelerator</h2>
                            <p>Accelerate your professional growth with strategic career results coaching.</p>
                            <ul class="service-benefits">
                                <li><i class="fas fa-check"></i> Career Path Mapping</li>
                                <li><i class="fas fa-check"></i> Interviews Preparation and CV Re-assessment</li>
                                <li><i class="fas fa-check"></i> Self and Skills Actualization</li>
                                <li><i class="fas fa-check"></i> Mentoring and Career Clarity</li>
                            </ul>
                            <div class="button-service">
                                <a href="/services/coaching/career-coaching" class="card-link">
                                    <span class="btn-primary">
                                        <span>Start Your Career</span>
                                        <i class="fas fa-arrow-right"></i>
                                    </span>
                                </a>
                            </div>
                        </div>
                </div>
            </div>
        </div>

        <div class="secondary-services">
            <div class="secondary-header">
                <h2>Specialized Food Regulatory Affairs Support</h2>
                <p>Professional guidance for your compliance needs</p>
            </div>
            
            <div class="services-grid compact">
                <div class="service-card compact">
                    <a href="/services/regulatory/consulting" class="card-link">
                        <div class="service-icon">
                            <i class="fas fa-tags"></i>
                        </div>
                        <div class="card-content">
                            <h3>Food Regulatory Consulting</h3>
                            <p>Independent and Expert Food Regulatory Affairs to ensure compliance with UK, IE/ROI and EU-harmonised food law standards.</p>
                            <span class="btn-secondary">
                                Learn More
                            </span>
                        </div>
                    </a>
                </div>

                <div class="service-card compact">
                    <a href="/services/regulatory/training" class="card-link">
                        <div class="service-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="card-content">
                            <h3>Food Regulatory Training</h3>
                            <p>Online and In Person Food Regulatory Affairs Training sessions available.</p>
                            <span class="btn-secondary">
                                Learn More
                            </span>
                        </div>
                    </a>
                </div>
            </div>
        </div>

        <div class="cta-section">
            <div class="cta-content">
                <h2>Ready to Transform Your Future?</h2>
                <p>Schedule a free consultation call to discuss your goals</p>
            </div>
            <a href="#contact" class="services-cta-button">
                <span class="cta-icon"><i class="fas fa-calendar-check"></i></span>
                <span class="cta-text">
                    <span class="primary-text">Book Your Free Discovery Call</span>
                    <span class="secondary-text">30 minutes, zero obligation</span>
                </span>
                <i class="fas fa-arrow-right"></i>
            </a>
        </div>
    </div>
</section>

<section id="testimonials">
    <div class="title-section">
        <h2 class="section-title">What Our <span class="highlight">Clients Say</span></h2>
        <p class="section-subtitle">Real Stories, Real Results</p>
    </div>
    
   <div class="testimonials-container">
        <div class="testimonials-grid">
            @foreach (var testimonial in testimonials)
            {
                <div class="testimonial-card">
                    <div class="video-wrapper">
                        <div class="video-container">
                            <video id="video-@testimonial.Id" 
                                   playsinline 
                                   controls="@testimonial.IsPlaying" 
                                   volume="0.5" 
                                   preload="metadata"
                                   @onended="() => OnVideoEnded(testimonial.Id)">           
                                <source src="@testimonial.Path" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                            <div class="play-overlay @(testimonial.IsPlaying ? "hidden" : "")" 
                                 @onclick="() => ToggleVideo(testimonial.Id)">
                                <div class="play-button">
                                    <i class="@(testimonial.IsPlaying ? "fas fa-pause" : "fas fa-play")"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="testimonial-content">
                        <div class="testimonial-quote">
                            <i class="fas fa-quote-left quote-icon"></i>
                            <p class="testimonial-text">@testimonial.Results</p>
                        </div>
                        <div class="testimonial-author-info">
                            <div class="author-details">
                                <p class="testimonial-author">@testimonial.Author</p>
                                <p class="author-role">@testimonial.Role</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <div class="cta-section animate-on-scroll delay-3">
            <a href="#contact" class="services-cta-button pulse-subtle">
                <span class="cta-icon"><i class="fas fa-calendar-check"></i></span>
                <span class="cta-text">
                    <span class="primary-text">Book Your Free Discovery Call</span>
                    <span class="secondary-text">30 minutes, zero obligation</span>
                </span>
                <i class="fas fa-arrow-right"></i>
            </a>
        </div>
</section>

<div class="section-divider"></div>

<section id="google-reviews" class="google-reviews-section">
    <div class="container">
        <div class="title-section">
            <h2 class="section-title">Google <span class="highlight">Reviews</span></h2>
            <p class="section-subtitle">See what our clients say about their experience</p>
        </div>

        <!-- Google Rating Summary -->
        <div class="google-rating-summary-container">
            <div class="google-rating-summary">
                <div class="rating-display">
                    <div class="stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <i class="fas fa-star @(i <= Math.Round(googleRating) ? "filled" : "empty")"></i>
                        }
                    </div>
                    <div class="rating-text">
                        <span class="rating-score">@googleRating.ToString("F1")</span>
                        <span class="rating-source">@totalGoogleReviews Google Reviews</span>
                    </div>
                </div>
                <div class="google-logo">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg" alt="Google" />
                </div>
            </div>
        </div>

        <!-- Reviews Carousel -->
        <div class="reviews-showcase">
            @if (isLoadingReviews)
            {
                <div class="reviews-loading">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                    <p>Loading reviews...</p>
                </div>
            }
            else if (googleReviews.Any())
            {
                <div class="reviews-slider-container" id="reviewsSliderContainer">
                    <div class="reviews-slider" id="reviewsSlider">
                        @foreach (var review in googleReviews)
                        {
                            <div class="review-slide">
                                <div class="slide-reviewer-info">
                                    <div class="slide-reviewer-avatar">
                                        @if (!string.IsNullOrEmpty(review.ProfilePhotoUrl))
                                        {
                                            <img src="@review.ProfilePhotoUrl" alt="@review.ReviewerName" class="profile-photo" />
                                        }
                                        else
                                        {
                                            @review.ReviewerName.Substring(0, 1).ToUpper()
                                        }
                                    </div>
                                    <div class="slide-reviewer-details">
                                        <h4>@review.ReviewerName</h4>
                                        <div class="slide-review-stars">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="fas fa-star @(i <= review.Rating ? "filled" : "empty")"></i>
                                            }
                                        </div>
                                        <div class="slide-review-date">
                                            @review.ReviewDate.ToString("MMM yyyy")
                                        </div>
                                    </div>
                                </div>
                                <p class="slide-review-text">@review.ReviewText</p>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="no-reviews-message">
                    <p>Reviews will appear here once loaded.</p>
                </div>
            }
        </div>

        <!-- Share Your Experience Section (moved below reviews) -->
        <div class="add-review-section">
            <div class="add-review-card">
                <div class="add-review-header">
                    <h3>Share Your Experience</h3>
                    <p>Help others discover the transformative power of coaching</p>
                </div>
                <div class="add-review-content">
                    <div class="review-benefits">
                        <div class="benefit-item">
                            <i class="fas fa-heart"></i>
                            <span>Share your success story</span>
                        </div>
                        <div class="benefit-item">
                            <i class="fas fa-users"></i>
                            <span>Help others on their journey</span>
                        </div>
                        <div class="benefit-item">
                            <i class="fas fa-star"></i>
                            <span>Support our community</span>
                        </div>
                    </div>
                    <a href="https://g.page/r/CWXw4ssna8vtEAE/review" target="_blank" rel="noopener noreferrer" class="add-review-button">
                        <div class="button-content">
                            <div class="button-icon">
                                <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg" alt="Google" />
                            </div>
                            <div class="button-text">
                                <span class="primary-text">Write a Google Review</span>
                                <span class="secondary-text">Takes less than 1 minute</span>
                            </div>
                            <i class="fas fa-external-link-alt"></i>
                        </div>
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>

<section id="contact">
    <div class="contact-container">
        <div class="contact-hero-banner">
            <div class="hero-content">
                <div class="urgency-badge animate-on-scroll">
                    <i class="fas fa-clock"></i>
                    <span>Limited Spots Available This Month</span>
                </div>
                <h2 class="hero-title animate-on-scroll delay-1">Ready to Transform Your Life?</h2>
                <p class="hero-subtitle animate-on-scroll delay-2">Join 20+ clients who've already started their journey to success</p>
                <div class="social-proof-stats animate-on-scroll delay-3">
                    <div class="stat-item">
                        <span class="stat-number">20+</span>
                        <span class="stat-label">Lives Transformed</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">5.0</span>
                        <span class="stat-label">⭐ Average Rating</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">100%</span>
                        <span class="stat-label">Satisfaction Rate</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="contact-form-container">
            <div class="contact-wrapper">
                <div class="content-grid">
                    <div class="form-section">
                        <div class="form-header">
                            <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-2 form-title">
                                <b>Book Your <span class="highlight">FREE</span> Discovery Call</b>
                            </MudText>
                            <div class="value-proposition mb-4">
                                <div class="value-item">
                                    <i class="fas fa-gift"></i>
                                    <span>100% Free - No Strings Attached</span>
                                </div>
                                <div class="value-item">
                                    <i class="fas fa-clock"></i>
                                    <span>30 Minutes - Maximum Impact</span>
                                </div>
                                @* <div class="value-item">
                                    <i class="fas fa-shield-alt"></i>
                                    <span>Completely Confidential</span>
                                </div> *@
                            </div>
                        </div>
                        
                        <div class="form-progress mb-4">
                            <div class="progress-steps">
                                <div class="step active" id="step-1">
                                    <span class="step-number">1</span>
                                    <span class="step-text">Your Details</span>
                                </div>
                                <div class="step" id="step-2">
                                    <span class="step-number">2</span>
                                    <span class="step-text">Session Type</span>
                                </div>
                                <div class="step" id="step-3">
                                    <span class="step-number">3</span>
                                    <span class="step-text">Schedule</span>
                                </div>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="progress-fill" style="width: 33%"></div>
                            </div>
                        </div>
                        <MudForm @ref="sessionForm" Model="@session">
                            <div class="form-step" id="form-step-1">
                                <MudTextField Label="First Name"
                                              @bind-Value="session.FirstName"
                                              For="@(() => session.FirstName)"
                                              Placeholder="Enter your first name"
                                              Class="mb-4 enhanced-input"
                                              Required="true"
                                              RequiredError="First name is required"
                                              @onfocusin="() => UpdateProgress(1)"
                                              @onblur="() => UpdateProgress(1)" />

                                <MudTextField Label="Last Name"
                                              @bind-Value="session.LastName"
                                              For="@(() => session.LastName)"
                                              Placeholder="Enter your last name"
                                              Class="mb-4 enhanced-input"
                                              Required="true"
                                              RequiredError="Last name is required"
                                              @onblur="() => UpdateProgress(1)" />

                                <MudTextField Label="Email Address"
                                              @bind-Value="session.Email"
                                              For="@(() => session.Email)"
                                              Placeholder="your.email@example.com"
                                              Class="mb-4 enhanced-input"
                                              InputType="InputType.Email"
                                              Required="true"
                                              RequiredError="A valid email is required"
                                              @onblur="() => UpdateProgress(1)" />
                            </div>

                            <div class="form-step" id="form-step-2">
                                <MudSelect T="SessionType?" PopoverClass="custom-popper"
                                           Label="What area would you like to focus on?"
                                           Value="sessionCategoryNullable"
                                           ValueChanged="OnSessionCategoryChanged"
                                           For="@(() => sessionCategoryNullable)"
                                           Class="mb-4 enhanced-select"
                                           @onfocusin="() => UpdateProgress(2)"
                                           Placeholder="Please select an area..."
                                           Required="true">
                                    <MudSelectItem Value="@((SessionType?)null)">
                                        <em style="color: #999;">-- Please select an area --</em>
                                    </MudSelectItem>
                                    @foreach (var type in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                                    {
                                        <MudSelectItem Value="@((SessionType?)type)">
                                            @((type.GetType().GetField(type.ToString())?.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute)?.Name ?? type.ToString())
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </div>

                            <div class="form-step" id="form-step-3">
                                <MudPaper Class="hoverable-input mb-4 enhanced-date-picker" 
                                          @onclick="ToggleCalendarAsync" 
                                          Style="cursor: pointer;"
                                          @onfocusin="() => UpdateProgress(3)">
                                    <MudTextField Label="Choose Your Preferred Date & Time"
                                                  Value="@session.PreferredDateTimeString"
                                                  For="@(() => session.PreferredDateTimeString)"
                                                  ReadOnly="true"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@Icons.Material.Filled.CalendarMonth"
                                                  Placeholder="Click to select your ideal time"
                                                  Required="true"
                                                  RequiredError="Preferred date and time are required" />
                                </MudPaper>

                                @if (showTimeSlots)
                                {
                                    <Calendar @bind-IsVisible="showTimeSlots"
                                              OnSlotSelected="HandleSlotSelectedAsync"
                                              CurrentTimeZoneDisplay="@userTimeZoneDisplay"
                                              AvailableSlots="@availableSlots"
                                              BusyTimes="@busyTimes"
                                              AdminUnavailabilities="@adminUnavailabilities"
                                              FirstAvailableDate="@firstAvailableDate" />
                                }

                                <MudTextField Label="Tell me about your biggest challenge"
                                              @bind-Value="session.Message"
                                              For="@(() => session.Message)"
                                              Lines="4"
                                              Placeholder="What's your biggest obstacle right now? What would you like to achieve?"
                                              Class="mb-4 enhanced-textarea" />
                            </div>

                            <div class="form-status mb-4">
                                @if (isLoggingIn)
                                {
                                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                    <MudText>Scheduling your session. Please wait...</MudText>
                                }
                                else
                                {
                                    <MudText Color="@(isSuccess ? Color.Success : Color.Error)">
                                        @sessionStatus
                                    </MudText>
                                    @if (!isSuccess && sessionStatus.Contains("create an account"))
                                    {
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Secondary"
                                                   Href="/register"
                                                   Class="mt-2">
                                            Create an Account
                                        </MudButton>
                                    }
                                }
                            </div>

                            <div class="cta-button-container">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CalendarToday"
                                           Type="submit"
                                           Disabled="@isLoggingIn"
                                           Class="mb-4 enhanced-submit-button pulse-subtle"
                                           OnClick="CreateSessionAsync">
                                    <div class="button-content">
                                        <span class="button-main-text">Claim My FREE Discovery Call</span>
                                        <span class="button-sub-text">→ Start Your Transformation Today</span>
                                    </div>
                                </MudButton>
                                
                                @* <div class="guarantee-badge">
                                    <i class="fas fa-shield-check"></i>
                                    <span>100% Risk-Free • No Pressure • Just Value</span>
                                </div> *@
                            </div>

                            <div class="trust-indicators mb-4">
                                <div class="trust-item">
                                    <i class="fas fa-lock"></i>
                                    <span>Your information is 100% secure</span>
                                </div>
                                @* <div class="trust-item">
                                    <i class="fas fa-user-shield"></i>
                                    <span>Certified Life Coach - 1+ years experience</span>
                                </div> *@
                            </div>

                            <MudText Typo="Typo.caption" Class="privacy-notice">
                                By scheduling a session, you’re agreeing to receive marketing emails from Ítala Veloso. You can unsubscribe at any time. For more details, check out our
                                <a Href="/privacy-policy">Privacy Policy</a> and
                                <a Href="/terms-and-conditions">Terms & Conditions</a>.
                            </MudText>
                        </MudForm>
                    </div>

                    <div class="right-content">
                        <div class="video-header-container">
                            <video autoplay muted loop playsinline preload="metadata" class="video-header">
                                <source src="https://italaveloso.com/Videos/adventure.mp4" type="video/mp4">
                                Your browser does not support the video tag mp4.
                            </video>
                            <div class="contact-video-overlay">
                                <div class="contact-header">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Class="header-icon" />
                                    <MudText Typo="Typo.h5">Begin Your Self-Discovery Journey Today</MudText>
                                    <MudText Typo="Typo.body2" Class="contact-subtitle">Transform your life, your profession, your destiny</MudText>
                                </div>
                            </div>
                        </div>
                        <div class="benefits-section">
                            <div class="benefits-content">
                                <div class="benefits-header">
                                    <MudText Typo="Typo.h6" Class="mb-3 benefits-title">What You'll Get From This Call</MudText>
                                </div>
                                <MudList T="string" Class="enhanced-benefits-list">
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Class="benefits-icon enhanced-benefit-item">
                                        <div class="benefit-content">
                                            <strong>Crystal Clear Clarity</strong>
                                            <span>Discover what's really holding you back</span>
                                        </div>
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Class="benefits-icon enhanced-benefit-item">
                                        <div class="benefit-content">
                                            <strong>Personalized Action Plan</strong>
                                            <span>Get your custom roadmap to success</span>
                                        </div>
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Class="benefits-icon enhanced-benefit-item">
                                        <div class="benefit-content">
                                            <strong>Breakthrough Strategy</strong>
                                            <span>Leave with immediate steps to take</span>
                                        </div>
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Class="benefits-icon enhanced-benefit-item">
                                        <div class="benefit-content">
                                            <strong>No-Pressure Environment</strong>
                                            <span>Just valuable insights and support</span>
                                        </div>
                                    </MudListItem>
                                </MudList>
                                
                                <div class="testimonial-snippet">
                                    <div class="snippet-content">
                                        <i class="fas fa-quote-left quote-icon"></i>
                                        <p>"Ítala helped me gain concrete knowledge about trauma and how it affects our behaviors. There has been such growth and I am very proud of where I am right now."</p>
                                        <div class="snippet-author">
                                            <strong>- Laviniah</strong>
                                            <span>Cyber Security Analyst</span>
                                        </div>
                                    </div>
                                </div>
                                
                                @* <div class="urgency-reminder">
                                    <i class="fas fa-clock"></i>
                                    <span>Limited spots available!</span>
                                </div> *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string pageTitle = "Home | Ítala Veloso";
    private Session session = new Session();
    
    // Nullable session category for better UX
    private SessionType? sessionCategoryNullable;
    
    private List<Testimonial> testimonials = new List<Testimonial>
    {
        new Testimonial
        {
            Id = 1,
            Path = "https://italaveloso.com/Testimonials/testimonial_Laviniah.mp4",
            Results = "Ítala been really helpful in terms of giving me concrete knowledge about things to do with trauma, how it affects our behaviours, thinking, patterns; in order to change our actions and outputs into this world. There has been such growth and work of development and I am very proud with where I am right now. Thank you and highly recommend Ítala",
            Author = "Laviniah",
            Role = "- Cyber Security Analyst"
        },
        new Testimonial
        {
            Id = 2,
            Path = "https://italaveloso.com/Testimonials/testimonial_Fran.mp4",
            Results = "When I started my coaching journey with Itala, I thought I had things pretty well sorted. Itala really is a bright spark of joy, with the right guidance, it's come together wonderfully. Itala, thank you from the bottom of my heart. You're amazing, and I can't wait to continue the journey with you.",
            Author = "Fran",
            Role = "- Business Owner"
        },
        new Testimonial
        {
            Id = 3,
            Path = "https://italaveloso.com/Testimonials/testimonial_Monica.mp4",
            Results = "With coaching, Ítala really helped me to get to know myself better; to believe more in myself... I am really grateful to have unlocked and let go of things that happened in my past that was preventing me to move forward and improve myself. I am really thankful for that. The biggest knowledge I took from this transformation is that I am Capable of more things that I thought that I was. I am such a Stronger person now, since coaching. I highly recommend!",
            Author = "Mónica",
            Role = "- Oral Health Backoffice Assistant"
        }
    };
    private string sessionStatus = string.Empty;
    private bool showTimeSlots = false;
    private List<DateTime> availableSlots = new();
    private List<(DateTimeOffset, DateTimeOffset)> busyTimes = new();
    private List<UnavailableTime> adminUnavailabilities { get; set; } = new();
    private DateTime? firstAvailableDate = null;
    private bool isLoggingIn = false;
    private bool isCalendarLoading = false;
    private string userTimeZoneDisplay = "UTC";
    private MudForm sessionForm;
    private bool isSuccess = false;

    private List<GoogleReview> googleReviews = new List<GoogleReview>();
    private double googleRating = 5.0;
    private int totalGoogleReviews = 5;
    private bool isLoadingReviews = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadGoogleReviewsAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                    userTimeZoneDisplay = await JSRuntime.InvokeAsync<string>("eval", "Intl.DateTimeFormat().resolvedOptions().timeZone");
                    try
                    {
                        TimeZoneInfo.FindSystemTimeZoneById(userTimeZoneDisplay);
                        await LogService.LogInfo("TimeZoneDetection", $"Detected user timezone: {userTimeZoneDisplay}");
                    }
                    catch (TimeZoneNotFoundException)
                    {
                        await LogService.LogWarning("TimeZoneDetection", $"Invalid time zone: {userTimeZoneDisplay}. Falling back to UTC.");
                        userTimeZoneDisplay = "UTC";
                    }
                }
            catch (Exception ex)
                {
                await LogService.LogError("TimeZoneDetection Error", $"Exception: {ex.Message}");
                userTimeZoneDisplay = "UTC";
                }

            await JSRuntime.InvokeVoidAsync("setTitle", pageTitle);
            
            // Initialize slider if reviews are already loaded
            if (googleReviews.Count > 0)
            {
                await JSRuntime.InvokeVoidAsync("initializeReviewsSlider");
            }
            
            // Initialize scroll animations
            await JSRuntime.InvokeVoidAsync("initScrollAnimations");
            
            StateHasChanged();
        }
    }

    #region ContactMessage
    
    private async Task OnSessionCategoryChanged(SessionType? value)
    {
        sessionCategoryNullable = value;
        await UpdateProgress(2);
        StateHasChanged();
    }
    
    private async Task UpdateProgress(int step)
    {
        // Determine actual progress based on form completion
        int actualStep = 1;
        
        // Step 1: Basic info filled
        if (!string.IsNullOrEmpty(session.FirstName) && 
            !string.IsNullOrEmpty(session.LastName) && 
            !string.IsNullOrEmpty(session.Email))
        {
            actualStep = 2;
        }
        
        // Step 2: Session category selected
        if (actualStep >= 2 && sessionCategoryNullable != null)
        {
            actualStep = 3;
        }
        
        // Step 3: Date/time selected
        if (actualStep >= 3 && !string.IsNullOrEmpty(session.PreferredDateTimeString))
        {
            actualStep = 3; // Keep at 3, this is the final step
        }
        
        // Use the higher of requested step or actual completion
        int progressStep = Math.Max(step, actualStep);
        
        var progressWidth = progressStep switch
        {
            1 => "33%",
            2 => "66%", 
            3 => "100%",
            _ => "33%"
        };
        
        await JSRuntime.InvokeVoidAsync("updateFormProgress", progressStep, progressWidth);
    }

    private async Task CreateSessionAsync()
    {
        if (sessionForm != null)
        {
            await sessionForm.Validate();
        }
        if (!sessionForm?.IsValid ?? true)
        {
            return;
        }

        // Validate that a session category has been selected
        if (sessionCategoryNullable == null)
        {
            sessionStatus = "Please select an area you'd like to focus on.";
            isSuccess = false;
            StateHasChanged();
            return;
        }

        try
        {
            isLoggingIn = true;
            sessionStatus = string.Empty;
            StateHasChanged();

            // Assign the selected category to the session
            session.SessionCategory = sessionCategoryNullable.Value;

            var existingSession = await SessionService.GetSessionByEmailAsync(session.Email);
            if (existingSession != null)
            {
                sessionStatus = "This email has already been used for a discovery call or is registered. Please create an account or log in to continue.";
                isSuccess = false;
                isLoggingIn = false;
                StateHasChanged();
                return;
            }

            session.DiscoveryCall = true;
            var result = await SessionService.CreateSessionAsync(session);
            
            sessionStatus = result 
                ? "Thank you for your message. Meeting scheduled. We'll confirm soon!"
                : "Failed to schedule session. Please try again or contact support.";
            isSuccess = result;

            if (result)
            {
                session.UpdateFullName();
                var subscriptionResult = await EmailSubscriptionService.SubscriptionAsync(new EmailSubscription { Name = session.FullName, Email = session.Email });
                session = new Session();
                sessionCategoryNullable = null; // Reset the nullable category
                await LoadAvailableSlotsAsync();
            }            
        }
        catch (Exception ex)
        {
            await LogService.LogError("CreateSessionAsync Error", ex.Message);
            sessionStatus = "An error occurred. Please try again later.";
            isSuccess = false;
        }
        finally 
        {
            isLoggingIn = false;
            StateHasChanged();
        }
    }
    
    private async Task ToggleCalendarAsync()
    {
        if (isCalendarLoading)
            return;

        isCalendarLoading = true;
        showTimeSlots = !showTimeSlots;
        if (showTimeSlots)
        {
            await LoadAvailableSlotsAsync();
            await LogService.LogInfo("ToggleCalendarAsync", $"Passing to Calendar: {availableSlots.Count} slots, {busyTimes.Count} busy times, {adminUnavailabilities.Count} unavailabilities, FirstAvailableDate: {firstAvailableDate?.ToString("yyyy-MM-dd HH:mm UTC") ?? "null"}");
        }
        isCalendarLoading = false;
        StateHasChanged();
    }

    private async Task LoadAvailableSlotsAsync()
    {
        try
        {
            await LogService.LogInfo("LoadAvailableSlots", "Starting slot load...");
            var startDate = DateTime.UtcNow.Date.AddDays(2);
            var endDate = startDate.AddDays(25);
            
            var sessions = await SessionService.GetAllSessionsAsync(false) ?? new List<Session>();
            var relevantSessions = sessions
                .Where(c => c != null && c.PreferredDateTime != default && 
                           c.PreferredDateTime >= startDate && c.PreferredDateTime <= endDate)
                .ToList();
                
            var busyTimes = relevantSessions
                .Select(c => (
                    Start: new DateTimeOffset(c.PreferredDateTime, TimeSpan.Zero),
                    End: new DateTimeOffset(c.PreferredDateTime.AddMinutes(45), TimeSpan.Zero)
                ))
                .ToList();
                
            var adminUnavailabilities = (await UnavailableTimeService.GetAllUnavailableTimesAsync())?.ToList() ?? new List<UnavailableTime>();

            availableSlots = GenerateAvailableSlots(startDate, busyTimes, adminUnavailabilities);
            this.busyTimes = busyTimes;
            this.adminUnavailabilities = adminUnavailabilities;
            firstAvailableDate = availableSlots.Any() ? availableSlots.Min() : startDate;

            await LogService.LogInfo("LoadAvailableSlots", $"Loaded {availableSlots.Count} available slots from {relevantSessions.Count} relevant sessions (filtered from {sessions.Count} total). Busy times: {busyTimes.Count}, Unavail: {adminUnavailabilities.Count}.");
        }
        catch (Exception ex)
        {
            await LogService.LogError("LoadAvailableSlots Error", $"Exception: {ex.Message}, StackTrace: {ex.StackTrace}");
            Snackbar.Add("Failed to load available slots.", Severity.Error);
            availableSlots = new List<DateTime>();
            busyTimes = new List<(DateTimeOffset, DateTimeOffset)>();
            adminUnavailabilities = new List<UnavailableTime>();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private List<DateTime> GenerateAvailableSlots(DateTime startDate, List<(DateTimeOffset Start, DateTimeOffset End)> busyTimes, List<UnavailableTime> adminUnavailabilities)
    {
        var slots = new List<DateTime>();
        var endDate = startDate.AddDays(35); // Extended from 25 to 35 days for more options
        var workStartTime = new TimeSpan(9, 0, 0); // Start earlier at 9 AM
        var workEndTime = new TimeSpan(21, 0, 0); // End at 9 PM
        var slotDuration = TimeSpan.FromMinutes(45);
        var adminTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");

        startDate = startDate.Kind == DateTimeKind.Unspecified ? DateTime.SpecifyKind(startDate, DateTimeKind.Utc) : startDate.ToUniversalTime();

        LogService.LogInfo("GenerateAvailableSlots", $"Processing slots from {startDate:yyyy-MM-dd} to {endDate:yyyy-MM-dd} UTC with {busyTimes.Count} busy times: {string.Join("; ", busyTimes.Select(b => $"{b.Start.UtcDateTime:yyyy-MM-dd HH:mm} to {b.End.UtcDateTime:yyyy-MM-dd HH:mm} UTC"))}");

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            // Convert to admin local time to determine working hours
            var adminLocalDate = TimeZoneInfo.ConvertTimeFromUtc(date, adminTimeZone);
            
            for (var time = workStartTime; time < workEndTime; time = time.Add(slotDuration))
            {
                // Create slot time in admin's timezone (London)
                var slotStartLocal = adminLocalDate.Date.Add(time);
                // Convert to UTC for storage and comparison
                var slotStart = TimeZoneInfo.ConvertTimeToUtc(slotStartLocal, adminTimeZone);
                var slotEnd = slotStart.Add(slotDuration);

                if (slotStart <= DateTime.UtcNow.AddDays(2))
                {
                    continue;
                }

                bool isBusy = busyTimes.Any(busy =>
                {
                    var busyStart = busy.Start.UtcDateTime;
                    var busyEnd = busy.End.UtcDateTime;
                    bool overlaps = slotStart < busyEnd && slotEnd > busyStart;
                    return overlaps;
                });

                bool isWithinUnavailability = adminUnavailabilities.Any(u =>
                {
                    if (u.StartTime == null || u.EndTime == null || (u.IsRecurring && !u.DayOfWeek.HasValue) || (!u.IsRecurring && !u.Date.HasValue))
                    {
                        LogService.LogWarning("GenerateAvailableSlots", $"Skipping invalid unavailability: ID {u.Id}, IsRecurring: {u.IsRecurring}, DayOfWeek: {u.DayOfWeek}, Date: {u.Date}, StartTime: {u.StartTime}, EndTime: {u.EndTime}");
                        return false;
                    }

                    // Use the local time for unavailability comparison
                    var slotStartDate = slotStartLocal.Date;
                    var slotStartTime = slotStartLocal.TimeOfDay;

                    if (u.IsRecurring)
                    {
                        return u.DayOfWeek.HasValue && slotStartLocal.DayOfWeek == u.DayOfWeek.Value &&
                            u.StartTime.HasValue && slotStartTime >= u.StartTime.Value &&
                            u.EndTime.HasValue && slotStartTime < u.EndTime.Value;
                    }
                    else
                    {
                        if (!u.Date.HasValue) return false;
                        var unavailableDate = u.Date.Value.Date;
                        return slotStartDate == unavailableDate &&
                            u.StartTime.HasValue && slotStartTime >= u.StartTime.Value &&
                            u.EndTime.HasValue && slotStartTime < u.EndTime.Value;
                    }
                });

                if (!isBusy && !isWithinUnavailability)
                {
                    slots.Add(slotStart);
                }
            }
        }

        LogService.LogInfo("GenerateAvailableSlots", $"Generated {slots.Count} available slots from {startDate:yyyy-MM-dd} to {endDate:yyyy-MM-dd} UTC.");
        return slots;
    }

    private async Task HandleSlotSelectedAsync(string isoString)
    {
        try
        {
            // Parse the ISO string which is already in the user's timezone
            var dateInUserTimeZone = DateTime.Parse(isoString);
            // Ensure the DateTime kind is properly specified
            dateInUserTimeZone = DateTime.SpecifyKind(dateInUserTimeZone, DateTimeKind.Unspecified);
            var userTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(userTimeZoneDisplay);
            
            // Convert the user timezone date to UTC for storage
            var utcDate = TimeZoneInfo.ConvertTimeToUtc(dateInUserTimeZone, userTimeZoneInfo);

            // Check if this UTC time matches any of our available slots
            if (!availableSlots.Any(s => s == utcDate))
            {
                await LogService.LogWarning("HandleSlotSelected", $"Selected slot {utcDate:yyyy-MM-dd HH:mm} UTC is not in availableSlots.");
                Snackbar.Add("Selected time slot is no longer available. Please choose another.", Severity.Warning);
                await LoadAvailableSlotsAsync();
                return;
            }

            // Store the UTC time for the session
            session.PreferredDateTime = utcDate;
            // Display string shows the user's local time
            session.PreferredDateTimeString = dateInUserTimeZone.ToString("dd MMM yyyy - HH:mm") + $" ({userTimeZoneDisplay})";
            showTimeSlots = false;

            await LogService.LogInfo("HandleSlotSelected", $"Selected slot: User time {dateInUserTimeZone:yyyy-MM-dd HH:mm} ({userTimeZoneDisplay}) -> UTC {utcDate:yyyy-MM-dd HH:mm} UTC. Display: {session.PreferredDateTimeString}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogService.LogError("HandleSlotSelected Error", ex.Message);
            sessionStatus = "Failed to select time slot. Please try again.";
            isSuccess = false;
            StateHasChanged();
        }
    }

    private void OnModalVisibilityChanged(bool isVisible)
    {
        showTimeSlots = isVisible;
    }
    #endregion
    
    #region GoogleReviews
    private async Task LoadGoogleReviewsAsync()
    {
        try
        {
            isLoadingReviews = true;
            StateHasChanged();
            
            var (reviews, rating, total) = await GoogleReviewsService.GetReviewsAsync();
            
            googleReviews = reviews?.Take(10).ToList() ?? new List<GoogleReview>();
            googleRating = rating;
            
            await LogService.LogInfo("LoadGoogleReviews", $"Loaded {googleReviews.Count} Google reviews with average rating {googleRating:F1}");
            
            isLoadingReviews = false;
            StateHasChanged();
            
            if (googleReviews.Count > 0)
            {
                // Ensure DOM is fully updated before initializing slider
                await Task.Delay(200);
                try
                {
                    await JSRuntime.InvokeVoidAsync("initializeReviewsSlider");
                }
                catch (Exception sliderEx)
                {
                    await LogService.LogError("Slider Initialization Error", sliderEx.Message);
                }
            }
        }
        catch (Exception ex)
        {
            await LogService.LogError("LoadGoogleReviewsAsync Error", ex.Message);
            googleReviews = new List<GoogleReview>();
            isLoadingReviews = false;
            StateHasChanged();
        }
    }
    #endregion
    
    #region Testimonials

    public async Task ToggleVideo(int testimonialId)
    {
        try
        {        
            var currentTestimonial = testimonials.First(t => t.Id == testimonialId);

            // Pause all other videos
            foreach(var testimonial in testimonials) {
                if(testimonial.Id != testimonialId && testimonial.IsPlaying){
                    await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + testimonial.Id);
                    testimonial.IsPlaying = false;
                }
            }

            // Toggle current video
            if(!currentTestimonial.IsPlaying){
                await JSRuntime.InvokeVoidAsync("playVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = true;
            } else {
                await JSRuntime.InvokeVoidAsync("pauseVideoById", "video-" + currentTestimonial.Id);
                currentTestimonial.IsPlaying = false;
            }
            
            StateHasChanged();
        } 
        catch(Exception ex) {
            await LogService.LogError("Error on ToggleVideo", ex.Message);
        }
    }


    public void OnVideoEnded(int testimonialId){
        var testimonial = testimonials.First(t => t.Id == testimonialId);
        testimonial.IsPlaying = false;

        StateHasChanged();
    }

    #endregion
}

@implements IAsyncDisposable

@code {
    public async ValueTask DisposeAsync()
    {
        try
        {
            var videoIds = testimonials.Select(t => $"video-{t.Id}").ToArray();
            await JSRuntime.InvokeVoidAsync("cleanupVideos", videoIds);
            
            testimonials?.Clear();
            googleReviews?.Clear();
            availableSlots?.Clear();
            busyTimes?.Clear();
            adminUnavailabilities?.Clear();
        }
        catch (Exception)
        {
            // Ignore disposal errors
        }
        
        GC.SuppressFinalize(this);
    }

    private string GetHomePageStructuredData()
    {
        return @"{
            ""@context"": ""https://schema.org"",
            ""@type"": ""Organization"",
            ""name"": ""Ítala Veloso Coaching"",
            ""description"": ""Expert life and career coaching services helping individuals overcome trauma, break limiting beliefs, and achieve personal transformation."",
            ""url"": ""https://italaveloso.com/"",
            ""logo"": ""https://italaveloso.com/Images/iconI.png"",
            ""founder"": {
                ""@type"": ""Person"",
                ""name"": ""Ítala Veloso"",
                ""jobTitle"": ""Life & Career Coach"",
                ""description"": ""Passionate purpose-driven life coach, mentor, motivational speaker, writer, and poet whose work empowers women and men to break through and break free from road and mind blocks, emotional wounds, trauma, and self-limiting beliefs.""
            },
            ""address"": {
                ""@type"": ""PostalAddress"",
                ""addressLocality"": ""Coventry"",
                ""addressCountry"": ""GB""
            },
            ""contactPoint"": {
                ""@type"": ""ContactPoint"",
                ""telephone"": ""+44-XXX-XXX-XXXX"",
                ""contactType"": ""Customer Service"",
                ""email"": ""jostic@italaveloso.com""
            },
            ""sameAs"": [
                ""https://www.facebook.com/italaveloso.coaching/"",
                ""https://x.com/itala_veloso"",
                ""https://www.instagram.com/italaveloso.coaching/"",
                ""https://www.linkedin.com/in/italaveloso/"",
                ""https://www.youtube.com/@italaveloso.coaching"",
                ""https://www.tiktok.com/@italaveloso.coaching""
            ],
            ""service"": [
                {
                    ""@type"": ""Service"",
                    ""name"": ""Life Liberation Mastery"",
                    ""description"": ""Comprehensive life coaching program for personal transformation and breakthrough""
                },
                {
                    ""@type"": ""Service"",
                    ""name"": ""Career Coaching"",
                    ""description"": ""Professional career development and advancement coaching""
                },
                {
                    ""@type"": ""Service"",
                    ""name"": ""Food Regulatory Consulting"",
                    ""description"": ""Expert food regulatory affairs and compliance consulting""
                }
            ]
        }";
    }
}
