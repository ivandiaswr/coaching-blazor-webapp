@page "/register"
@rendermode InteractiveServer

<MudSnackbarProvider />

<div class="register-container">
    <MudText Typo="Typo.h4" Class="mb-4">Create Account</MudText>

    <MudForm Model="@newUser" @ref="form" ValidationDelay="0" PreventDefault="true">
        <MudTextField Label="First Name"
                      @bind-Value="newUser.FirstName"
                      For="@(() => newUser.FirstName)"
                      Required="true"
                      RequiredError="First name is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="Last Name"
                      @bind-Value="newUser.LastName"
                      For="@(() => newUser.LastName)"
                      Required="true"
                      RequiredError="Last name is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="Email"
                      @bind-Value="newUser.Email"
                      For="@(() => newUser.Email)"
                      InputType="InputType.Email"
                      Required="true"
                      RequiredError="Email is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="Password"
                      @bind-Value="newUser.Password"
                      For="@(() => newUser.Password)"
                      InputType="InputType.Password"
                      Required="true"
                      RequiredError="Password is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField Label="Confirm Password"
                      @bind-Value="newUser.ConfirmPassword"
                      For="@(() => newUser.ConfirmPassword)"
                      InputType="InputType.Password"
                      Required="true"
                      RequiredError="Confirm password is required"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.AccountCircle"
                   Type="submit"
                   Class="mt-4"
                   Disabled="@isSubmitting"
                   OnClick="HandleRegister">
            Register
        </MudButton>
        <MudText Typo="Typo.caption" Class="privacy-notice">
            By registering, you’re agreeing to receive marketing emails from Ítala Veloso. You can unsubscribe at any time. For more details, check out our
            <a Href="/privacy-policy">Privacy Policy</a> and
            <a Href="/terms-and-conditions">Terms & Conditions</a>.
        </MudText>
    </MudForm>

    @if (!string.IsNullOrEmpty(debugMessage))
    {
        <MudText Color="Color.Error" Class="mt-4">@debugMessage</MudText>
    }
</div>

@code {
    private RegisterUser newUser = new();
    private MudForm? form;
    private bool isSubmitting = false;
    private string? debugMessage;

    protected override async Task OnInitializedAsync()
    {
        await LogService.LogInfo("RegisterPage", "Register page initialized");
    }

    private async Task HandleRegister()
    {
        if (form is null)
        {
            debugMessage = "Form reference is null.";
            await LogService.LogError("HandleRegister", debugMessage);
            Snackbar.Add(debugMessage, Severity.Error);
            return;
        }

        isSubmitting = true;
        debugMessage = null;
        await LogService.LogInfo("HandleRegister", $"Starting registration for email: {newUser.Email}");

        await form.Validate();
        if (!form.IsValid)
        {
            isSubmitting = false;
            debugMessage = "Form validation failed.";
            await LogService.LogWarning("HandleRegister", debugMessage);
            Snackbar.Add("Please correct the errors in the form.", Severity.Error);
            return;
        }

        var existingUser = await UserManager.FindByEmailAsync(newUser.Email);
        if (existingUser != null)
        {
            isSubmitting = false;
            debugMessage = "Email already registered.";
            await LogService.LogWarning("HandleRegister", $"Registration attempt with existing email: {newUser.Email}");
            Snackbar.Add("This email is already registered. Please log in or click 'Forgot Password' on the login page to reset your password.", Severity.Error);
            return;
        }

        var user = new ApplicationUser
        {
            UserName = newUser.Email,
            Email = newUser.Email,
            FirstName = newUser.FirstName,
            LastName = newUser.LastName
        };

        try
        {
            var result = await UserManager.CreateAsync(user, newUser.Password);

            if (result.Succeeded)
            {
                await LogService.LogInfo("HandleRegister", $"User {newUser.Email} created successfully");
                await UserManager.AddToRoleAsync(user, "User");

                var loginModel = new { Email = newUser.Email, Password = newUser.Password };
                var loginResult = await JSRuntime.InvokeAsync<SessionResult>("login", loginModel);

                if (loginResult.Success)
                {
                    await LogService.LogInfo("HandleRegister", $"Sign-in successful for {newUser.Email}");
                    Snackbar.Add("Registration successful! Welcome!", Severity.Success);
                    await LogService.LogInfo("HandleRegister", $"Navigating to /UserDashboard for {newUser.Email}");
                    await JSRuntime.InvokeVoidAsync("window.location.assign", "/UserDashboard");
                }
                else
                {
                    debugMessage = loginResult.Error ?? "Sign-in failed after registration.";
                    await LogService.LogError("HandleRegister", $"Sign-in failed for {newUser.Email}: {debugMessage}");
                    Snackbar.Add(debugMessage, Severity.Error);
                }
            }
            else
            {
                var errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                debugMessage = $"Registration failed: {errorMessage}";
                await LogService.LogError("HandleRegister", $"Failed to register user {newUser.Email}: {errorMessage}");
                Snackbar.Add("Something went wrong during registration. Please check your details and try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            debugMessage = $"Unexpected error: {ex.Message}";
            await LogService.LogError("HandleRegister", $"Unexpected error during registration for {newUser.Email}: {ex.Message}");
            Snackbar.Add("An unexpected error occurred during registration. Please try again.", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}