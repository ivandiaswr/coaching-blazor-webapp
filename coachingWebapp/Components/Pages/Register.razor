@page "/register"
@rendermode InteractiveServer

@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

<h3>Register</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="@newUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="newUser.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="newUser.Password" type="password" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Confirm Password</label>
        <InputText @bind-Value="newUser.ConfirmPassword" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegisterUser newUser = new ();
    private string ErrorMessage;

    private async Task HandleRegister()
    {
        var user = new IdentityUser { UserName = newUser.Email, Email = newUser.Email };
        var result = await UserManager.CreateAsync(user, newUser.Password);

        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(user, "User");
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }
}
