@page "/about/meet-itala"

@rendermode InteractiveServer

@inject IEmailSubscriptionService EmailSubscriptionService
@inject ILogger<Meet_itala> Logger

@using BusinessLayer.Services.Interfaces
@using ModelLayer.Models

<PageTitle>@pageTitle</PageTitle>

<section class="hero-container">
    <div class="hero-left">
        <h1>About Ítala Veloso</h1>
            <p>
                Ítala Veloso is a Santomean-Portuguese Black African Woman. A child of God, currently living in the UK, Coventry and an advocate for peace, love, faith and growth.
                Speaks both Portuguese and English, which means all her services can be delivered in each of these languages.
            </p>
            <p>
                A passionate purpose-driven life coach, mentor, motivational speaker, writer, and poet whose work empowers women to break through and break free from road and mind blocks, emotional wounds, trauma, and self-limiting beliefs.
            </p>
            <p class="quote">"Her words and work are woven with a message of empowerment, love, freedom and transformation."</p>
        <div class="hero-buttons">
            <button @onclick="() => ShowGiftOffer(GiftCategory.Gift3)" class="hero-button">
                <i class="fa-solid fa-gift"></i> Get a Free Guide
            </button>
        </div>
        <section class="bio-container jostic-container">
            <div class="bio-content">
                <div class="bio-text">
                    <h3><span><img src="Images/logoExtended.png" alt="JOSTIC" class="logo-extended"></span> - Journey of Survivors Turned into more than Conquerors</h3>
                    <p>
                        Founded in May 2021 and revamped in October 2023, <span class="jostic-brand">JOSTIC</span> it's a movement of transformation.
                    </p>
                    <p>
                        With a BSc in Food Engineering, an MSc in Public Health, and nearly 6 years of experience in Food Regulatory Affairs, Ítala brings a unique, holistic approach to coaching.
                    </p>
                    <p>
                        Her mission is to guide individuals on a journey of self-discovery, self-love, and spiritual growth - helping them unlock inner truths, self-confidence, and healing.
                    </p>
                </div>
            </div>
        </section> 
    </div>

    <div class="hero-right">
        <div class="hero-card">
            <img src="Images/italaHero.webp" alt="Ítala, Life Coach" class="coach-image">
            <div class="coach-info">
                <h2>Ítala Veloso</h2>
                <p>Your dedicated Life Liberation and Self-Discovery Coach</p>
            </div>
        </div>

        <div class="credentials-container">
            <div class="coaching-credentials">
                <h3><span class="highlight">Coaching</span> Credentials</h3>
                <ul>
                    <li>Certified UPW Life Coaching - Unleash Your Power Within, Tony Robbins</li>
                    <li>Certified CEH - Life and Emotional Coaching, Mindset Academy</li>
                    <li>Life Christian Coaching</li>
                </ul>
            </div>
            <div class="regulatory-credentials">
                <h3><span class="highlight">Regulatory</span> Credentials</h3>
                <ul>
                    <li>BSc in Food Engineering</li>
                    <li>MSc in Public Health</li>
                    <li>6 years in Food Regulatory Affairs</li>
                </ul>
            </div>
        </div>
    </div>
    @if (showGiftOffer)
    {
        <div class="gift-modal" @onclick="CloseGiftOfferIfClickedOutside">
            <div class="gift-modal-content" @onclick:stopPropagation>
                <h3>Unlock Your Free Guide!</h3>
                <p>Get instant access to expert tips and strategies to jumpstart your journey. <b>Your success story begins here.</b></p>
                <EditForm Model="@emailSubscription" OnValidSubmit="GetGiftBySubscribeNewsLetter" FormName="emailSubscriptionGiftForm">
                    <DataAnnotationsValidator />
                    
                    @if (isSubscribing)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Subscribing...</p>
                        </div>
                    }
                    else
                    {
                        <InputText id="email" class="form-control" @bind-Value="emailSubscription.Email" placeholder="Enter your email" />
                        <div class="row">
                            <div class="col">
                                <ValidationMessage For="@(() => emailSubscription.Email)" class="text-danger" />
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Get Free Guide</button>
                        <p class="privacy-notice">By signing up, you're agreeing to receive marketing emails from Jostic. You can unsubscribe at any time. For more details, check out our <a href="/privacy-policy">Privacy Policy</a>.</p>
                    }
                </EditForm>

                @if (!string.IsNullOrEmpty(subscriptionMessage) && !subscriptionSuccess)
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @subscriptionMessage
                    </div>
                }
                
                @if (subscriptionSuccess)
                {
                    <div class="alert alert-success" role="alert">
                        @subscriptionMessage
                    </div>
                }

                <button class="close-button" @onclick="CloseGiftOffer"><i class="fa-solid fa-circle-xmark"></i></button>
            </div>
        </div>
    }
</section>



@code {
    private string pageTitle = "About | Ítala Veloso";
    private EmailSubscription emailSubscription = new EmailSubscription();
    private string subscriptionMessage;
    private bool subscriptionSuccess = false;
    private bool isSubscribing = false;
    private bool showGiftOffer = false;
    private GiftCategory giftCategory;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollService.ScrollToTop();
    }

    protected override void OnInitialized()
    {
    }

    #region GiftModal
    private async Task GetGiftBySubscribeNewsLetter()
    {
        Logger.LogInformation("SubscribeToNewsLetter method called");
        if (!string.IsNullOrWhiteSpace(emailSubscription.Email))
        {
            await InvokeAsync(() =>
            {
                isSubscribing = true;
                StateHasChanged();
            });

            try
            {
                Logger.LogInformation($"Attempting to subscribe with email: {emailSubscription.Email}");

                var result = await EmailSubscriptionService.SubscriptionGiftAsync(emailSubscription.Email, giftCategory);

                await InvokeAsync(() =>
                {
                    subscriptionSuccess = result;
                    subscriptionMessage = result ? "Thank you! Your submission has been received!" : "Subscription failed. Please try again or contact support.";

                    if (result) 
                    {
                        emailSubscription = new EmailSubscription();  // Reset the form
                    }

                    StateHasChanged();
                });

                Logger.LogInformation($"Subscription result: {result}");
            }
            catch (Exception ex)
            {
                await InvokeAsync(() =>
                {
                    subscriptionMessage = "An error occurred. Please try again later.";
                    StateHasChanged();
                });

                Logger.LogError(ex, "Error during subscription");
            }
            finally
            {
                await InvokeAsync(() =>
                {
                    isSubscribing = false;
                    StateHasChanged();
                });
            }
        }

        Logger.LogInformation("SubscribeToNewsLetter method completed");
    }
    private void ShowGiftOffer(GiftCategory gift)
    {
        giftCategory = gift;
        showGiftOffer = true;
        subscriptionMessage = string.Empty;
        subscriptionSuccess = false;
    }
    public void CloseGiftOffer()
    {
        showGiftOffer = false;
        StateHasChanged();
    }
    private void CloseGiftOfferIfClickedOutside()
    {
        if (showGiftOffer)
        {
            CloseGiftOffer();
        }
    }
    #endregion


}