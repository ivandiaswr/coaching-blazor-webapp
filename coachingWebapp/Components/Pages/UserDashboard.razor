@page "/UserDashboard"
@rendermode InteractiveServer
<MudPopoverProvider/>
<MudSnackbarProvider />

@attribute [Authorize(Roles = "User")]
<PageTitle>@pageTitle</PageTitle>

<MudPaper Class="dashboard-welcome" Elevation="1">
    <MudText Typo="Typo.h5" Class="welcome-title">
        Hello, @userId!
    </MudText>
    
    @if (upcomingSessions.Any())
    {
        var nextSession = upcomingSessions.First();
        <MudText Typo="Typo.subtitle1">
            A tua próxima sessão está agendada para 
            <strong>@nextSession.ScheduledAt.ToString("MMMM dd 'at' HH:mm", new CultureInfo("en-US"))</strong>. Get ready to take your next step!
        </MudText>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">
            You don’t have any sessions scheduled yet. It’s time to book a moment just for you.
        </MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => selectedTab = 1)">
            Book a Session
        </MudButton>
    }

    @if (hasValidPack)
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
            You have @remainingPackSessions session(s) left in your pack. No payment needed.
        </MudAlert>
    }
    @if (hasActiveSubscription)
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
            You have @remainingSubscriptionSessions session(s) left this month (@sessionsUsed of @monthlyLimit used).
        </MudAlert>
    }
</MudPaper>

<MudTabs @bind-ActivePanelIndex="selectedTab" Class="tabs">
    <MudTabPanel Text="Calendar" Icon="@Icons.Material.Filled.Event">
        <MudPaper Class="upcoming-calendar-wrapper" Elevation="0">
            <MudCalendar T="CalendarItem"
                Items="@calendarItems"
                Date="@DateTime.Today"
                View="CalendarView.Week"
                FirstDayOfWeek="DayOfWeek.Monday"
                StartHour="10"
                EndHour="21"
                SlotDuration="00:45:00"
                ShowTodayButton="true"
                ItemClicked="HandleCalendarClick"
                Class="mud-calendar-event" /> 
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Book Session" Icon="@Icons.Material.Filled.CalendarToday">
        <MudPaper Class="booking-tab-wrapper p-4">
            <MudText Typo="Typo.subtitle1">Total booking options: @BookingOptions.Count</MudText>
        
            <MudGrid>
                @foreach (var option in BookingOptions)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="@($"booking-option-card {(SelectedOption?.Id == option.Id ? "selected" : "")}")"
                                 Style="cursor:pointer"
                                 @onclick="@(() => SelectBookingOption(option))">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@option.Title</MudText>
                                <MudText Typo="Typo.body2">@option.Description</MudText>
                                @if (option.PriceEUR.HasValue)
                                {
                                    <MudText Color="Color.Primary" Typo="Typo.subtitle2">from @option.PriceEUR€</MudText>
                                }
                                else
                                {
                                    <MudText Color="Color.Success" Typo="Typo.subtitle2">Included</MudText>
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <div class="user-dashboard-request">
                <MudForm @ref="requestForm" Model="@requestModel">
                    <MudSelect Label="Session Type" 
                               T="SessionType"
                               @bind-Value="requestModel.SessionCategory"
                               For="@(() => requestModel.SessionCategory)">
                        @foreach (var type in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                        {
                            <MudSelectItem Value="@type">
                                @((type.GetType().GetField(type.ToString())?.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute)?.Name ?? type.ToString())
                            </MudSelectItem>
                        }
                    </MudSelect>

                    <MudTextField Label="Message" 
                                  T="string" 
                                  Lines="3" 
                                  @bind-Value="requestModel.Message"
                                  For="@(() => requestModel.Message)" />

                    <MudPaper Class="hoverable-input" @onclick="ToggleCalendar" Style="cursor: pointer;">
                        <MudTextField Label="Preferred Date & Time"
                                      Value="@selectedSlotString"
                                      For="@(() => requestModel.PreferredDateTimeString)"
                                      ReadOnly="true"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.CalendarMonth" />
                    </MudPaper>

                    <Calendar @bind-IsVisible="showSlotCalendar"
                              OnSlotSelected="HandleSlotSelected"
                              CurrentTimeZoneDisplay="@userTimeZone"
                              Slots="@AvailableSlots"
                              BusyTimes="@BusyTimes"
                              AdminUnavailabilities="@Unavailabilities"
                              FirstAvailableDate="@firstAvailableDate" />
                    
                    @if (SelectedOption == null)
                    {
                        <MudAlert Severity="Severity.Warning" Class="mt-2">
                            Please select a booking option to proceed.
                        </MudAlert>
                    }

                    <MudButton OnClick="SubmitSessionRequest" 
                               Variant="Variant.Filled" 
                               Color="Color.Primary"
                               Disabled="@(SelectedOption == null || !requestForm?.IsValid == true || string.IsNullOrWhiteSpace(selectedSlotString))">
                        Request Session
                    </MudButton>
                </MudForm>
            </div>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Sessions" Icon="@Icons.Material.Filled.ListAlt">
        <MudPaper class="sessions-wrapper" Elevation="0">
            <MudStack Row="true" Justify="@Justify.Center" AlignItems="@AlignItems.Center" Spacing="3" Class="session-filters-wrapper">
                <MudSelect T="string" Label="Filter" @bind-Value="selectedFilter" Dense="true">
                    <MudSelectItem Value="@("Upcoming")">Upcoming</MudSelectItem>
                    <MudSelectItem Value="@("Past")">Past</MudSelectItem>
                    <MudSelectItem Value="@("All")">All</MudSelectItem>
                </MudSelect>

                <MudTextField @bind-Value="searchText" 
                              Placeholder="Search by type..." 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" />
            </MudStack>

            <MudTable Items="FilteredSessions" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Session</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ScheduledAt.ToString("dd MMM yyyy - HH:mm")</MudTd>
                    <MudTd>
                        @if (context.EndedAt.HasValue)
                        {
                            <MudChip T="string" Color="Color.Success">Completed</MudChip>
                        }
                        else if (DateTime.UtcNow < context.ScheduledAt)
                        {
                            <MudChip T="string" Color="Color.Info">Scheduled</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Warning">Missed</MudChip>
                        }
                    </MudTd>
                    <MudTd>@(context.Session?.SessionCategory.GetDisplayName() ?? "N/A")</MudTd>
                    <MudTd>
                        @if (context.IsActive && DateTime.UtcNow >= context.ScheduledAt.AddMinutes(-10) && DateTime.UtcNow <= context.ScheduledAt.AddMinutes(45))
                        {
                            <MudButton Size="Size.Small" OnClick="@(() => JoinSession(context.SessionId))" Color="Color.Primary" AriaLabel="Join session call">
                                Join Call
                            </MudButton>
                        }
                        else if (DateTime.UtcNow > context.ScheduledAt.AddMinutes(45))
                        {
                            <MudText AriaLabel="Session ended">-</MudText>
                        }
                        else if (DateTime.UtcNow < context.ScheduledAt.AddMinutes(-10))
                        {
                            <MudTooltip Text="@($"Session available at {context.ScheduledAt.AddMinutes(-10):dd MMM yyyy HH:mm}")">
                                <MudText AriaLabel="Session not yet joinable">N/A</MudText>
                            </MudTooltip>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Chat with Ítala(AI)" Icon="@Icons.Material.Filled.Chat">
        <MudPaper Class="chat-wrapper" Elevation="0">
            <MudStack Spacing="3">
                <div class="d-flex justify-end">
                    <MudButton OnClick="ClearChat" 
                               Class="clear-chat-button" 
                               StartIcon="@Icons.Material.Filled.Clear" 
                               Size="Size.Small">
                        Clear Chat
                    </MudButton>
                </div>
                <div class="chat-messages" style="max-height: 400px; overflow-y: auto;" @ref="chatContainer">
                    @foreach (var message in chatMessages)
                    {
                        <MudCard Class="@(message.IsUser ? "user-message" : "bot-message")" AriaLabel="@(message.IsUser ? "User message" : "Bot message")">
                            <MudCardContent Class="d-flex align-center">
                                @if (!message.IsUser)
                                {
                                    <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                        <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                    </MudAvatar>
                                }
                                <div>
                                    <MudText Typo="Typo.body2" Class="message-text">@message.Text</MudText>
                                    @if (message.Resources?.Any() == true)
                                    {
                                        <MudText Typo="Typo.caption">Resources:</MudText>
                                        foreach (var resource in message.Resources)
                                        {
                                            <MudLink Href="@resource.Url" Target="_blank" Class="d-block">@resource.Name</MudLink>
                                        }
                                    }
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                        @message.Timestamp.ToString("HH:mm")
                                    </MudText>
                                </div>
                                @if (message.IsUser)
                                {
                                    <MudAvatar Color="Color.Secondary" Size="Size.Small" Class="ml-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    </MudAvatar>
                                }
                            </MudCardContent>
                        </MudCard>
                    }
                    @if (isSending)
                    {
                        <MudCard Class="bot-message">
                            <MudCardContent Class="d-flex align-center">
                                <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                    <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                </MudAvatar>
                                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                <MudText>Ítala(AI) is typing...</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
                <MudForm @ref="chatForm" Class="chat-input-form">
                    <MudTextField InputRef="@chatInputRef"
                                  @bind-Value="newMessage" 
                                  Placeholder="How can Ítala help you?" 
                                  Immediate="true" 
                                  OnKeyDown="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter" && !isSending) await SendMessage(); })" 
                                  Disabled="isSending" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@Icons.Material.Filled.Send" 
                                  AdornmentColor="Color.Primary" 
                                  OnAdornmentClick="SendMessage" 
                                  Class="chat-input" />
                </MudForm>
            </MudStack>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

@code {
    private string pageTitle = "User Dashboard | Ítala Veloso";
    private int selectedTab = 0;
    private List<VideoSession> allSessions = new();
    private List<VideoSession> upcomingSessions = new();
    private List<VideoSession> pastSessions = new();
    private DateTime _selectedDate = DateTime.Today;
    private List<CalendarItem> calendarItems = new();
    private string userId;

    private MudForm requestForm;
    private Session requestModel = new();

    private bool showSlotCalendar = false;

    private string selectedSlotString;
    private List<DateTime> AvailableSlots = new();
    private List<(DateTimeOffset Start, DateTimeOffset End)> BusyTimes = new();
    private List<UnavailableTime> Unavailabilities = new();
    private DateTime? firstAvailableDate;

    private string selectedFilter = "All";
    private string searchText = "";

    private List<ChatMessage> chatMessages = new();
    private string newMessage = "";
    private MudForm chatForm;
    private bool isSending = false;
    private ElementReference chatContainer;
    private ElementReference chatInputRef;

    private BookingType selectedBookingOption = BookingType.Subscription;
    private bool hasValidPack = false;
    private bool hasActiveSubscription = false;
    private int remainingPackSessions = 0;
    private int remainingSubscriptionSessions = 0;
    private int sessionsUsed = 0;
    private int monthlyLimit = 0;
    private List<BookingOption> BookingOptions = new();
    private BookingOption? SelectedOption;

    private IEnumerable<VideoSession> FilteredSessions => allSessions
        .Where(session =>
            (selectedFilter == "Upcoming" && session.ScheduledAt >= DateTime.UtcNow) ||
            (selectedFilter == "Past" && session.ScheduledAt < DateTime.UtcNow) ||
            (selectedFilter == "All"))
        .Where(session => string.IsNullOrWhiteSpace(searchText)
            || session.Session?.SessionCategory.GetDisplayName().Contains(searchText, StringComparison.InvariantCultureIgnoreCase) == true)
        .OrderByDescending(session => session.ScheduledAt);

    private string userTimeZone = TimeZoneInfo.Local.Id;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = auth.User?.Identity?.Name;
        await LoadSessions();

        var status = await UserSubscriptionService.GetStatusAsync(userId);
        hasActiveSubscription = status.HasActiveSubscription;
        remainingSubscriptionSessions = status.Remaining;
        sessionsUsed = status.SessionsUsed;
        monthlyLimit = status.MonthlyLimit;

        remainingPackSessions = await SessionPackService.GetRemainingSessions(userId);
        hasValidPack = remainingPackSessions > 0;

        var subscriptionPlans = await SubscriptionPlanService.GetAllAsync();
        foreach (var plan in subscriptionPlans)
        {
            BookingOptions.Add(new BookingOption
            {
                Id = Guid.NewGuid().ToString(),
                Title = plan.Name,
                Description = "Monthly subscription plan.",
                PriceEUR = plan.PriceEUR,
                Type = BookingType.Subscription,
                PlanId = plan.Id,
                IsAvailable = true,
                RequiresPurchase = true
            });
        }

        var packDefinitions = await SessionPackDefinitionService.GetAllAsync();
        foreach (var def in packDefinitions)
        {
            BookingOptions.Add(new BookingOption
            {
                Id = Guid.NewGuid().ToString(),
                Title = def.Name,
                Description = def.Description,
                PriceEUR = def.PriceEUR,
                Type = BookingType.SessionPack,
                PlanId = def.Id,
                IsAvailable = true,
                RequiresPurchase = true
            });
        }

        var userPacks = await SessionPackService.GetUserPacksAsync(userId);
        foreach (var pack in userPacks.Where(p => p.SessionsRemaining > 0))
        {
            var option = new BookingOption
            {
                Id = Guid.NewGuid().ToString(),
                Title = "Use Session Pack",
                Description = $"You have {pack.SessionsRemaining} sessions left.",
                Type = BookingType.SessionPack,
                PlanId = pack.DefinitionId,
                IsAvailable = true,
                RequiresPurchase = false
            };
            BookingOptions.Add(option);

            // Pre-select this option if available
            if (SelectedOption == null)
            {
                SelectedOption = option;
                selectedBookingOption = option.Type;
            }
        }

        if (status.HasActiveSubscription)
        {
            var option = new BookingOption
            {
                Id = Guid.NewGuid().ToString(),
                Title = "Use Subscription",
                Description = $"You’ve used {status.SessionsUsed} of {status.MonthlyLimit}.",
                Type = BookingType.Subscription,
                PlanId = status.PlanId,
                IsAvailable = status.Remaining > 0,
                RequiresPurchase = false
            };
            BookingOptions.Add(option);

            // Pre-select this option if available and no pack is selected
            if (SelectedOption == null && option.IsAvailable)
            {
                SelectedOption = option;
                selectedBookingOption = option.Type;
            }
        }
    }

    private void SelectBookingOption(BookingOption option)
    {
        SelectedOption = option;
        selectedBookingOption = option.Type;
        StateHasChanged();
    }

    private async Task LoadSessions()
    {
        allSessions = await VideoCallService.GetSessionsForUserAsync(userId);
        upcomingSessions = allSessions
            .Where(s => s.ScheduledAt >= DateTime.UtcNow)
            .OrderBy(s => s.ScheduledAt).ToList();

        pastSessions = allSessions
            .Where(s => s.ScheduledAt < DateTime.UtcNow)
            .OrderByDescending(s => s.ScheduledAt).ToList();

        calendarItems = upcomingSessions.Select(session => new CalendarItem
        {
            Start = session.ScheduledAt,
            End = session.ScheduledAt.AddMinutes(45),
            Text = session.Session?.SessionCategory.GetDisplayName() ?? "Session"
        }).ToList();
    }

    private async Task ToggleCalendar()
    {
        try
        {
            showSlotCalendar = !showSlotCalendar;

            var startDate = DateTime.UtcNow.Date.AddDays(2);
            var sessions = await SessionService.GetAllSessions() ?? new List<Session>();
            BusyTimes = sessions
                .Where(c => c.PreferredDateTime != default && c.PreferredDateTime > DateTime.UtcNow.AddDays(2))
                .Select(c => (
                    Start: new DateTimeOffset(c.PreferredDateTime, TimeSpan.Zero),
                    End: new DateTimeOffset(c.PreferredDateTime.AddMinutes(45), TimeSpan.Zero)
                ))
                .ToList();

            Unavailabilities = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
            AvailableSlots = GenerateAvailableSlots(startDate, BusyTimes, Unavailabilities);
            firstAvailableDate = AvailableSlots.Any() ? AvailableSlots.Min() : DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ToggleCalendar: {ex.Message}");
            await LogService.LogError("Error in ToggleCalendar: ", ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private List<DateTime> GenerateAvailableSlots(DateTime startDate, List<(DateTimeOffset Start, DateTimeOffset End)> busyTimes, List<UnavailableTime> adminUnavailabilities)
    {
        var slots = new List<DateTime>();
        var endDate = startDate.AddDays(25);
        var workStartTime = new TimeSpan(10, 0, 0);
        var workEndTime = new TimeSpan(21, 0, 0);
        var slotDuration = TimeSpan.FromMinutes(45);

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            for (var time = workStartTime; time < workEndTime; time = time.Add(slotDuration))
            {
                var slotStart = date.Date.Add(time);
                var slotEnd = slotStart.Add(slotDuration);

                if (slotStart <= DateTime.UtcNow.AddDays(2))
                    continue;

                bool isBusy = busyTimes.Any(busy =>
                    slotStart < busy.End.LocalDateTime && slotEnd > busy.Start.LocalDateTime);

                bool isWithinUnavailability = adminUnavailabilities.Any(u =>
                    (u.IsRecurring 
                    && ((int)u.DayOfWeek + 1) % 7 == (int)slotStart.DayOfWeek
                    && slotStart.TimeOfDay >= u.StartTime && slotStart.TimeOfDay < u.EndTime)
                    ||
                    (!u.IsRecurring && u.Date == slotStart.Date 
                    && slotStart.TimeOfDay >= u.StartTime 
                    && slotStart.TimeOfDay < u.EndTime));

                if (!isBusy && !isWithinUnavailability)
                {
                    slots.Add(slotStart);
                }
            }
        }
        return slots;
    }

    private async Task HandleSlotSelected(string isoString)
    {
        var date = DateTime.Parse(isoString);
        selectedSlotString = date.ToString("yyyy-MM-ddTHH:mm");
        requestModel.PreferredDateTimeString = selectedSlotString;

        showSlotCalendar = false;
        StateHasChanged();
    }

    private async Task SubmitSessionRequest()
    {
        await requestForm.Validate();
        if (!requestForm.IsValid || string.IsNullOrWhiteSpace(selectedSlotString))
        {
            Snackbar.Add("Please fill out all required fields and select a date/time.", Severity.Error);
            return;
        }

        if (SelectedOption == null)
        {
            Snackbar.Add("Please select a booking option.", Severity.Error);
            return;
        }

        var scheduledAtLocal = DateTime.Parse(selectedSlotString);
        var scheduledAtUtc = TimeZoneInfo.ConvertTimeToUtc(scheduledAtLocal, TimeZoneInfo.FindSystemTimeZoneById(userTimeZone));

        var session = new Session
        {
            PreferredDateTime = scheduledAtUtc,
            SessionCategory = requestModel.SessionCategory,
            Message = requestModel.Message ?? string.Empty,
            CreatedAt = DateTime.UtcNow,
            IsSessionBooking = true,
            DiscoveryCall = false,
            Email = userId,
            FullName = ""
        };

        try
        {
            if (SelectedOption.Type == BookingType.SessionPack)
            {
                if (remainingPackSessions <= 0)
                {
                    Snackbar.Add("You have no remaining sessions in your pack. Please purchase a new pack.", Severity.Error);
                    return;
                }

                var success = await SessionPackService.ConsumeSession(userId);
                if (!success)
                {
                    Snackbar.Add("Failed to consume a session from your pack.", Severity.Error);
                    return;
                }

                await SessionService.CreateSessionAsync(session);
                remainingPackSessions = await SessionPackService.GetRemainingSessions(userId);
                Snackbar.Add($"Session scheduled! You have {remainingPackSessions} session(s) left in your pack.", Severity.Success);
            }
            else if (SelectedOption.Type == BookingType.Subscription)
            {
                if (remainingSubscriptionSessions <= 0)
                {
                    Snackbar.Add("You have reached your monthly session limit. Please upgrade your plan or wait until next month.", Severity.Error);
                    return;
                }

                var success = await UserSubscriptionService.RegisterMonthlyUsage(userId);
                if (!success)
                {
                    Snackbar.Add("Failed to register session usage. Monthly limit may have been reached.", Severity.Error);
                    return;
                }

                await SessionService.CreateSessionAsync(session);
                var status = await UserSubscriptionService.GetStatusAsync(userId);
                remainingSubscriptionSessions = status.Remaining;
                sessionsUsed = status.SessionsUsed;
                Snackbar.Add($"Session scheduled! You have {remainingSubscriptionSessions} session(s) left this month.", Severity.Success);
            }
            else
            {
                var response = await HttpClient.PostAsJsonAsync("/api/payments/create-checkout-session", session);
                if (response.IsSuccessStatusCode)
                {
                    var data = await response.Content.ReadFromJsonAsync<StripeResponse>();
                    NavigationManager.NavigateTo(data!.Url, true);
                }
                else
                {
                    Snackbar.Add("Failed to initiate payment. Please try again.", Severity.Error);
                }
                return;
            }

            selectedSlotString = null;
            requestModel.Message = string.Empty;
            requestModel.SessionCategory = SessionType.lifeCoaching;
            showSlotCalendar = false;
            await LoadSessions();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogService.LogError("Error in SubmitSessionRequest: ", ex.Message);
            Snackbar.Add("An error occurred while scheduling the session. Please try again.", Severity.Error);
        }
    }

    private void JoinSession(string sessionId)
    {
        var session = allSessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session == null)
        {
            Snackbar.Add("Session not found.", Severity.Error);
            return;
        }

        var now = DateTime.UtcNow;
        var sessionStart = session.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(45);
        var joinWindowStart = sessionStart.AddMinutes(-10);

        if (now < joinWindowStart)
        {
            Snackbar.Add($"The session hasn’t started yet. Please try again after {joinWindowStart.ToString("HH:mm")}.", Severity.Warning);
            return;
        }

        if (now > sessionEnd)
        {
            Snackbar.Add("This session has ended.", Severity.Error);
            return;
        }

        NavigationManager.NavigateTo($"/session/{sessionId}");
    }

    private void HandleCalendarClick(CalendarItem item)
    {
        var session = upcomingSessions.FirstOrDefault(s => s.ScheduledAt == item.Start);
        if (session == null)
        {
            Snackbar.Add("Session not found.", Severity.Error);
            return;
        }

        var now = DateTime.UtcNow;
        var sessionStart = session.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(45);
        var joinWindowStart = sessionStart.AddMinutes(-10);

        if (!session.IsActive)
        {
            Snackbar.Add("This session is no longer active.", Severity.Error);
            return;
        }

        if (now < joinWindowStart)
        {
            var userTimeZoneInfo = TimeZoneInfo.Local;
            try
            {
                userTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(userTimeZone);
            }
            catch (TimeZoneNotFoundException)
            {
                Snackbar.Add("Invalid time zone. Using local time zone.", Severity.Warning);
            }
            var joinWindowStartLocal = TimeZoneInfo.ConvertTimeFromUtc(joinWindowStart, userTimeZoneInfo);
            Snackbar.Add($"The session hasn’t started yet. Please try again after {joinWindowStartLocal:dd MMM yyyy HH:mm}.", Severity.Warning);
            return;
        }

        if (now > sessionEnd)
        {
            Snackbar.Add("This session has ended.", Severity.Error);
            return;
        }

        NavigationManager.NavigateTo($"/session/{session.SessionId}");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isSending)
            return;

        isSending = true;
        try
        {
            var userMessage = newMessage;
            chatMessages.Add(new ChatMessage { IsUser = true, Text = userMessage, Timestamp = DateTime.Now });
            newMessage = "";

            var botMessage = await ChatService.SendMessageAsync(chatMessages, userMessage);
            botMessage.Timestamp = DateTime.Now;
            chatMessages.Add(botMessage);

            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SendMessage: {ex.Message}");
            await LogService.LogError("Error in SendMessage: ", ex.Message);
            chatMessages.Add(new ChatMessage { IsUser = false, Text = "Sorry, something went wrong.", Resources = new List<ChatResource>(), Timestamp = DateTime.Now });
        }
        finally
        {
            isSending = false;
            StateHasChanged();

            await Task.Delay(50);

            try
            {
                await JSRuntime.InvokeVoidAsync("focusElement", chatInputRef);
            }
            catch (JSException jsEx)
            {
                await LogService.LogError("Erro ao focar input: ", jsEx.Message);
            }
        }
    }

    private void ClearChat()
    {
        chatMessages.Clear();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("VideoCall.endCall");
    }
}