@page "/UserDashboard"
@rendermode InteractiveServer
<MudPopoverProvider/>
<MudSnackbarProvider />
<MudDialogProvider />

@attribute [Authorize(Roles = "User")]
<PageTitle>@pageTitle</PageTitle>

<MudPaper Class="dashboard-welcome" Elevation="1">
    <MudText Typo="Typo.h5" Class="welcome-title">
        Welcome, @userFullName!
    </MudText>
    
    @if (upcomingSessions.Any())
    {
        var nextSession = upcomingSessions.First();
        <MudText Typo="Typo.subtitle1" Class="mb-4">
            Your next session is scheduled for
            <strong>@nextSession.ScheduledAt.ToString("MMMM dd 'at' HH:mm")</strong>. Get ready to take your next step!
        </MudText>
    }
    else
    {
        <MudText Typo="Typo.subtitle1" Class="mb-2">
            You don’t have any sessions scheduled yet. It’s time to book a moment just for you.
        </MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => selectedTab = 0)" Class="mb-4">
            Book a Session
        </MudButton>
    }

    <MudCard Class="booking-option-card" Elevation="0">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="mb-2">Your Booking</MudText>
            @if (hasValidPack)
            {
                var packOption = BookingOptions.FirstOrDefault(o => o.Type == BookingType.SessionPack && !o.RequiresPurchase);
                <MudText Typo="Typo.body1" Class="mb-2">
                    <strong>Session Pack:</strong> @(packOption?.Title ?? "Active Pack")
                </MudText>
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-2">
                    You have <strong>@remainingPackSessions</strong> session(s) left in your pack. No payment needed.
                </MudAlert>
            }
            else if (hasActiveSubscription)
            {
                var subscriptionOption = BookingOptions.FirstOrDefault(o => o.Type == BookingType.Subscription && !o.RequiresPurchase);
                <MudText Typo="Typo.body1" Class="mb-2">
                    <strong>Subscription:</strong> @(subscriptionOption?.Title ?? "Active Subscription")
                </MudText>
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-2">
                    You have <strong>@remainingSubscriptionSessions</strong> session(s) left this month (@sessionsUsed of @monthlyLimit used).
                </MudAlert>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="OpenCancellationDialog" Class="mb-2">
                    Cancel Subscription
                </MudButton>
            }
            else
            {
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                    No active session pack or subscription. Book a session to get started!
                </MudText>
            }
        </MudCardContent>
    </MudCard>
</MudPaper>

<MudTabs @bind-ActivePanelIndex="selectedTab" Elevation="0">
    <MudTabPanel Text="Book Session" Icon="@Icons.Material.Filled.CalendarToday">
        <MudPaper Class="booking-tab-wrapper p-4" Elevation="0">
            <MudGrid GutterSize="32px">
                <MudItem xs="12" md="6">
                    @if (!hasValidPack && !hasActiveSubscription)
                    {
                        <div class="booking-options-grid">
                            <MudGrid Class="mt-4" GutterSize="16px">
                                <MudItem xs="12" md="4">
                                    <MudStack Spacing="2">
                                        <MudText Typo="Typo.h6">Single Session</MudText>
                                        @foreach (var option in BookingOptions.Where(o => o.Type == BookingType.SingleSession))
                                        {
                                            var cardStyle = $"cursor:{(option.IsAvailable ? "pointer" : "not-allowed")};opacity:{(option.IsAvailable ? "1" : "0.6")}";
                                            <MudCard 
                                                Class="@($"option-card single-session {(SelectedOption?.Id == option.Id ? "selected" : "")}")"
                                                Style="@cardStyle"
                                                @onclick="() => SelectBookingOption(option)">
                                                <MudCardContent>
                                                    <MudText Typo="Typo.h6">@option.Title</MudText>
                                                    <MudText Typo="Typo.body2">@option.Description</MudText>
                                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@option.PriceEUR€</MudText>
                                                    @if (!option.IsAvailable && option.RequiresPurchase)
                                                    {
                                                        <MudText Typo="Typo.caption" Color="Color.Error">Unavailable</MudText>
                                                    }
                                                </MudCardContent>
                                            </MudCard>
                                        }
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12" md="4">
                                    <MudStack Spacing="2">
                                        <MudText Typo="Typo.h6">Session Packs</MudText>
                                        @foreach (var option in BookingOptions.Where(o => o.Type == BookingType.SessionPack))
                                        {
                                            var cardStyle = $"cursor:{(option.IsAvailable ? "pointer" : "not-allowed")};opacity:{(option.IsAvailable ? "1" : "0.6")}";
                                            <MudCard 
                                                Class="@($"option-card session-pack {(SelectedOption?.Id == option.Id ? "selected" : "")}")"
                                                Style="@cardStyle"
                                                @onclick="() => SelectBookingOption(option)">
                                                <MudCardContent>
                                                    <MudText Typo="Typo.h6">@option.Title</MudText>
                                                    <MudText Typo="Typo.body2">@option.Description</MudText>
                                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@option.PriceEUR€</MudText>
                                                </MudCardContent>
                                            </MudCard>
                                        }
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12" md="4">
                                    <MudStack Spacing="2">
                                        <MudText Typo="Typo.h6">Subscriptions</MudText>

                                        @{
                                            var highestSubPrice = BookingOptions
                                                .Where(o => o.Type == BookingType.Subscription && o.RequiresPurchase && o.PriceEUR.HasValue)
                                                .Max(o => o.PriceEUR ?? 0);
                                        }

                                        @foreach (var option in BookingOptions.Where(o => o.Type == BookingType.Subscription))
                                        {
                                            var isRecommended = option.RequiresPurchase && (option.PriceEUR ?? 0) == highestSubPrice;
                                            var cardStyle = $"cursor:{(option.IsAvailable ? "pointer" : "not-allowed")};opacity:{(option.IsAvailable ? "1" : "0.6")}";
                                            
                                            <MudCard 
                                                Class="@($"option-card subscription {(SelectedOption?.Id == option.Id ? "selected" : "")}")"
                                                Style="@cardStyle"
                                                @onclick="() => SelectBookingOption(option)">
                                                <MudCardContent>
                                                    @if (isRecommended)
                                                    {
                                                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small" Class="mb-3">
                                                            Recommended
                                                        </MudChip>
                                                    }

                                                    <MudText Typo="Typo.h6">@option.Title</MudText>
                                                    <MudText Typo="Typo.body2">@option.Description</MudText>
                                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@option.PriceEUR€</MudText>
                                                </MudCardContent>
                                            </MudCard>
                                        }
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </div>
                    }
                </MudItem>

                <MudItem xs="12" md="6">
                    <div class="user-dashboard-request">
                        <MudForm @ref="requestForm" Model="@requestModel">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Selected booking option*</MudText>
                            @if (SelectedOption != null)
                            {
                                var typeClass = SelectedOption.Type switch
                                {
                                    BookingType.SingleSession => "single-session",
                                    BookingType.SessionPack => "session-pack",
                                    BookingType.Subscription => "subscription",
                                    _ => ""
                                };

                                <MudCard Class="@($"option-card selected {typeClass} mb-4")">
                                   <MudCardContent>
                                        <MudText Typo="Typo.h6">@SelectedOption.Title</MudText>
                                        <MudText Typo="Typo.body2">@SelectedOption.Description</MudText>
                                        @if (SelectedOption.PriceEUR.HasValue && SelectedOption.RequiresPurchase)
                                        {
                                            <MudText Typo="Typo.subtitle2" Color="Color.Primary">
                                                <b>@SelectedOption.PriceEUR€ </b> 
                                                @if (SelectedOption.Type == BookingType.SessionPack && SelectedOption.TotalSessions.HasValue)
                                                {
                                                    <span><b>(@SelectedOption.TotalSessions sessions)</b></span>
                                                }
                                                else if (SelectedOption.Type == BookingType.Subscription && SelectedOption.MonthlyLimit.HasValue)
                                                {
                                                    <span><b>(@SelectedOption.MonthlyLimit sessions/month)</b></span>
                                                }
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText T="string" Color="Color.Success" aria-setsize="Size.Small">No payment required.</MudText>
                                        }
                                        <MudText Typo="Typo.caption" Color="Color.Info">Booking Option: <b>@SelectedOption.Type.GetDisplayName()</b></MudText>
                                    </MudCardContent>
                                </MudCard>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning" Variant="Variant.Text" Class="mb-4">
                                    Please select a booking option
                                </MudAlert>
                            }

                            <MudSelect Label="Session Type" 
                                       T="SessionType"
                                       Value="requestModel.SessionCategory"
                                       For="@(() => requestModel.SessionCategory)"
                                       ValueChanged="@(value => HandleSessionTypeChange(value))"
                                       Required="true"
                                       RequiredError="Session type is required">
                                @foreach (var type in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                                {
                                    <MudSelectItem Value="@type">
                                        @((type.GetType().GetField(type.ToString())?.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute)?.Name ?? type.ToString())
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <MudTextField Label="Message" 
                                          T="string" 
                                          Lines="5" 
                                          @bind-Value="requestModel.Message"
                                          For="@(() => requestModel.Message)"
                                          Required="true"
                                          RequiredError="Message is required" />

                            <MudPaper Class="hoverable-input" @onclick="ToggleCalendar" Style="cursor: pointer;">
                                <MudTextField Label="Preferred Date & Time"
                                              Value="@selectedSlotString"
                                              For="@(() => requestModel.PreferredDateTimeString)"
                                              ReadOnly="true"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@Icons.Material.Filled.CalendarMonth"
                                              InputClass="pointer-cursor"
                                              Required="true"
                                              RequiredError="Preferred date and time are required" />
                            </MudPaper>

                            <Calendar @bind-IsVisible="showSlotCalendar"
                                      OnSlotSelected="HandleSlotSelected"
                                      CurrentTimeZoneDisplay="@userTimeZone"
                                      Slots="@AvailableSlots"
                                      BusyTimes="@BusyTimes"
                                      AdminUnavailabilities="@Unavailabilities"
                                      FirstAvailableDate="@firstAvailableDate" />

                            <MudButton OnClick="OpenConfirmationDialog" 
                                       Variant="Variant.Filled" 
                                       Color="Color.Primary"
                                       Class="pt-5 pb-4 mt-5">
                                Confirm Information
                            </MudButton>
                        </MudForm>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Sessions" Icon="@Icons.Material.Filled.ListAlt">
        <MudPaper class="sessions-wrapper" Elevation="0">
            <MudStack Row="true" 
                    Justify="@Justify.Center" 
                    AlignItems="@AlignItems.Center" 
                    Spacing="3" 
                    Class="session-filters-wrapper mb-5">
                <MudSelect T="string" 
                        Label="Filter" 
                        Value="selectedFilter"
                        ValueChanged="OnFilterChanged"
                        Dense="true">
                    <MudSelectItem Value="@("Upcoming")">Upcoming</MudSelectItem>
                    <MudSelectItem Value="@("Past")">Past</MudSelectItem>
                    <MudSelectItem Value="@("All")">All</MudSelectItem>
                </MudSelect>

                <MudTextField Label="Search"
                        Value="searchText"
                        ValueChanged="@(EventCallback.Factory.Create<string>(this, OnSearchChanged))"
                        Placeholder="Search by type..."
                        Immediate="true"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" />
            </MudStack>

            <MudTable @ref="serverTable"
                    T="VideoSession"
                    Hover="true"
                    Striped="true"
                    RowsPerPage="5"
                    Bordered="true"
                    ServerData="@(async (TableState state, CancellationToken cancellationToken) => await LoadServerData(state, CancellationToken.None))">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Category</MudTh>
                    <MudTh>Session</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ScheduledAt.ToString("dd MMM yyyy - HH:mm")</MudTd>
                    <MudTd>
                        @if (context.EndedAt.HasValue)
                        {
                            <MudChip T="string" Color="Color.Success">Completed</MudChip>
                        }
                        else if (DateTime.UtcNow < context.ScheduledAt)
                        {
                            <MudChip T="string" Color="Color.Info">Scheduled</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Warning">Missed</MudChip>
                        }
                    </MudTd>
                    <MudTd>@(context.Session?.SessionCategory.GetDisplayName() ?? "N/A")</MudTd>
                    <MudTd>
                        @if (context.IsActive && !context.EndedAt.HasValue && DateTime.UtcNow >= context.ScheduledAt.AddMinutes(-10) && DateTime.UtcNow <= context.ScheduledAt.AddMinutes(45))
                        {
                            <MudButton Size="Size.Small" OnClick="@(() => JoinSession(context.SessionId))" Color="Color.Primary" AriaLabel="Join session call">
                                Join Call
                            </MudButton>
                        }
                        else if (DateTime.UtcNow > context.ScheduledAt.AddMinutes(45) || context.EndedAt.HasValue)
                        {
                            <MudText AriaLabel="Session ended">-</MudText>
                        }
                        else if (DateTime.UtcNow >= context.ScheduledAt && DateTime.UtcNow <= context.ScheduledAt.AddMinutes(45))
                        {
                            <MudText AriaLabel="Session missed">-</MudText>
                        }
                        else if (DateTime.UtcNow < context.ScheduledAt.AddMinutes(-10))
                        {
                            <MudTooltip Text="@($"Session available at {context.ScheduledAt.AddMinutes(-10):dd MMM yyyy HH:mm}")">
                                <MudText AriaLabel="Session not yet joinable">N/A</MudText>
                            </MudTooltip>
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Chat with Ítala(AI)" Icon="@Icons.Material.Filled.Chat">
        <MudPaper Class="chat-wrapper" Elevation="0">
            <MudStack Spacing="3">
                <div class="d-flex justify-end">
                    <MudButton OnClick="ClearChat" 
                               Class="clear-chat-button" 
                               StartIcon="@Icons.Material.Filled.Clear" 
                               Size="Size.Small">
                        Clear Chat
                    </MudButton>
                </div>
                <div class="ai-chat-messages" @ref="chatContainer">
                    @foreach (var message in chatMessages)
                    {
                        <MudCard Class="@(message.IsUser ? "user-message" : "bot-message")" AriaLabel="@(message.IsUser ? "User message" : "Bot message")">
                            <MudCardContent Class="d-flex align-center">
                                @if (!message.IsUser)
                                {
                                    <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                        <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                    </MudAvatar>
                                }
                                <div>
                                    <MudText Typo="Typo.body2" Class="message-text">@message.Text</MudText>
                                    @if (message.Resources?.Any() == true)
                                    {
                                        <MudText Typo="Typo.caption">Resources:</MudText>
                                        foreach (var resource in message.Resources)
                                        {
                                            <MudLink Href="@resource.Url" Target="_blank" Class="d-block">@resource.Name</MudLink>
                                        }
                                    }
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                        @message.Timestamp.ToString("HH:mm")
                                    </MudText>
                                </div>
                                @if (message.IsUser)
                                {
                                    <MudAvatar Color="Color.Secondary" Size="Size.Small" Class="ml-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    </MudAvatar>
                                }
                            </MudCardContent>
                        </MudCard>
                    }
                    @if (isSending)
                    {
                        <MudCard Class="bot-message">
                            <MudCardContent Class="d-flex align-center">
                                <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                    <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                </MudAvatar>
                                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                <MudText>Ítala(AI) is typing...</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
                <MudForm @ref="chatForm" Class="chat-input-form">
                    <MudTextField InputRef="@chatInputRef"
                                  @bind-Value="newMessage" 
                                  Placeholder="How can Ítala help you?" 
                                  Immediate="true" 
                                  OnKeyDown="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter" && !isSending) await SendMessage(); })" 
                                  Disabled="isSending" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@Icons.Material.Filled.Send" 
                                  AdornmentColor="Color.Primary" 
                                  OnAdornmentClick="SendMessage" 
                                  Class="chat-input" />
                </MudForm>
            </MudStack>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

<div style="position: fixed; bottom: 24px; right: 24px; z-index: 1000;">
    <a href="https://wa.me/351912345678"
       target="_blank"
       aria-label="Contact Admin via WhatsApp"
       title="Need help? Contact me on WhatsApp"
       style="display: flex; align-items: center; justify-content: center; background-color: #25D366; border-radius: 50%; width: 56px; height: 56px; box-shadow: 0 2px 5px rgba(0,0,0,0.3); text-decoration: none;">
        <i class="fa-brands fa-whatsapp" style="color: white; font-size: 24px;"></i>
    </a>
</div>

@code {
    private string pageTitle = "User Dashboard | Ítala Veloso";
    private int selectedTab = 0;
    private List<VideoSession> allSessions = new();
    private List<VideoSession> upcomingSessions = new();
    private List<VideoSession> pastSessions = new();
    private List<CalendarItem> calendarItems = new();
    private string userId = string.Empty;
    private string userFullName = "Guest";

    private MudForm? requestForm;
    private Session requestModel = new();

    private bool showSlotCalendar = false;
    private string? selectedSlotString;
    private List<DateTime> AvailableSlots = new();
    private List<(DateTimeOffset Start, DateTimeOffset End)> BusyTimes = new();
    private List<UnavailableTime> Unavailabilities = new();
    private DateTime? firstAvailableDate;

    private string selectedFilter = "All";
    private string _searchText = string.Empty;
    private string searchText
    {
        get => _searchText;
        set
        {
            if (_searchText != value)
            {
                _searchText = value;
                _ = OnSearchChanged(value);
            }
        }
    }
    private MudTable<VideoSession>? serverTable;

    private List<ChatMessage> chatMessages = new();
    private string newMessage = string.Empty;
    private MudForm? chatForm;
    private bool isSending = false;
    private ElementReference chatContainer;
    private ElementReference chatInputRef;

    private BookingType selectedBookingOption = BookingType.SingleSession;
    private bool hasValidPack = false;
    private bool hasActiveSubscription = false;
    private int remainingPackSessions = 0;
    private int remainingSubscriptionSessions = 0;
    private int sessionsUsed = 0;
    private int monthlyLimit = 0;
    private List<BookingOption> BookingOptions = new();
    private BookingOption? SelectedOption = null;

    private IEnumerable<VideoSession> FilteredSessions => allSessions
        .Where(session =>
            (selectedFilter == "Upcoming" && session.ScheduledAt >= DateTime.UtcNow) ||
            (selectedFilter == "Past" && session.ScheduledAt < DateTime.UtcNow) ||
            (selectedFilter == "All"))
        .Where(session => string.IsNullOrWhiteSpace(searchText)
            || session.Session?.SessionCategory.GetDisplayName()?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true)
        .OrderByDescending(session => session.ScheduledAt);

    private string userTimeZone = TimeZoneInfo.Local.Id;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = auth.User?.Identity?.Name ?? string.Empty;

        try
        {
            var latestSession = await SessionService.GetLatestSessionByEmailAsync(userId);
            if (latestSession != null && !string.IsNullOrWhiteSpace(latestSession.FullName))
            {
                userFullName = latestSession.FullName;
            }
            else
            {
                userFullName = "Guest";
            }
        }
        catch (Exception ex)
        {
            await LogService.LogError("LoadFullName Error", ex.Message);
            userFullName = "Guest";
            Snackbar.Add("Failed to load user information. Using default greeting.", Severity.Warning);
        }

        await LoadSessions();

        await RefreshSubscriptionStatus();

        remainingPackSessions = await SessionPackService.GetRemainingSessions(userId);
        hasValidPack = remainingPackSessions > 0;

        await LoadBookingOptions();
    }

    private async Task RefreshSubscriptionStatus()
    {
        var status = await UserSubscriptionService.GetStatusAsync(userId);
        hasActiveSubscription = status.HasActiveSubscription;
        remainingSubscriptionSessions = status.Remaining;
        sessionsUsed = status.SessionsUsed;
        monthlyLimit = status.MonthlyLimit;
    }

    private async Task OpenCancellationDialog()
    {
        var parameters = new DialogParameters
        {
            { "RemainingSessions", remainingSubscriptionSessions }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<SubscriptionCancellationDialog>("Confirm Cancellation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await CancelSubscriptionAsync();
        }
    }

    private async Task CancelSubscriptionAsync()
    {
        try
        {
            var success = await UserSubscriptionService.CancelSubscriptionAsync(userId);
            if (success)
            {
                await RefreshSubscriptionStatus();
                await LoadBookingOptions();
                Snackbar.Add("Subscription canceled successfully. You can use remaining sessions until the billing period ends.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to cancel subscription. Please try again or contact support.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await LogService.LogError("CancelSubscription Error", ex.Message);
            Snackbar.Add("An error occurred while canceling the subscription. Please try again.", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadBookingOptions()
    {
        BookingOptions.Clear();

        var singleSessionPrice = await SessionPriceService.GetPriceForSessionTypeAsync(requestModel.SessionCategory);
        if (singleSessionPrice != null)
        {
            BookingOptions.Add(new BookingOption
            {
                Id = Guid.NewGuid().ToString(),
                Title = $"Single Session ({requestModel.SessionCategory.GetDisplayName()})",
                Description = "Book a one-time session without a subscription or pack.",
                PriceEUR = singleSessionPrice.PriceEUR,
                Type = BookingType.SingleSession,
                IsAvailable = true,
                RequiresPurchase = true
            });
        }

        var packPrices = await SessionPackPriceService.GetPricesForSessionTypeAsync(requestModel.SessionCategory);
        if (packPrices != null)
        {
            foreach (var packPrice in packPrices)
            {
                BookingOptions.Add(new BookingOption
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = packPrice.Name,
                    Description = packPrice.Description ?? $"Includes {packPrice.TotalSessions} sessions.",
                    PriceEUR = packPrice.PriceEUR,
                    Type = BookingType.SessionPack,
                    TotalSessions = packPrice.TotalSessions,
                    IsAvailable = true,
                    RequiresPurchase = true,
                    PlanId = packPrice.Id.ToString()
                });
            }
        }

        var subscriptionPrices = await SubscriptionPriceService.GetPricesForSessionTypeAsync(requestModel.SessionCategory);
        if (subscriptionPrices != null)
        {
            foreach (var subscriptionPrice in subscriptionPrices)
            {
                BookingOptions.Add(new BookingOption
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = subscriptionPrice.Name,
                    Description = subscriptionPrice.Description ?? $"Up to {subscriptionPrice.MonthlyLimit} sessions per month.",
                    PriceEUR = subscriptionPrice.PriceEUR,
                    Type = BookingType.Subscription,
                    MonthlyLimit = subscriptionPrice.MonthlyLimit,
                    IsAvailable = true,
                    RequiresPurchase = true,
                    PlanId = subscriptionPrice.Id.ToString()
                });
            }
        }

        var userPacks = await SessionPackService.GetUserPacksAsync(userId);
        foreach (var pack in userPacks.Where(p => p.SessionsRemaining > 0))
        {
            var price = pack.Price;
            if (price != null)
            {
                var option = new BookingOption
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = $"Use {price.Name}",
                    Description = $"You have {pack.SessionsRemaining} sessions left.",
                    Type = BookingType.SessionPack,
                    PackId = pack.Id,
                    IsAvailable = true,
                    RequiresPurchase = false
                };
                BookingOptions.Add(option);

                if (SelectedOption == null)
                {
                    SelectedOption = option;
                    selectedBookingOption = option.Type;
                }
            }
        }

        var status = await UserSubscriptionService.GetStatusAsync(userId);
        if (status.HasActiveSubscription)
        {
            var subscription = await UserSubscriptionService.GetActiveSubscriptionAsync(userId);
            if (subscription?.Price != null)
            {
                var option = new BookingOption
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = $"Use {subscription.Price.Name}",
                    Description = $"You’ve used {status.SessionsUsed} of {status.MonthlyLimit} sessions this month.",
                    Type = BookingType.Subscription,
                    IsAvailable = status.Remaining > 0,
                    RequiresPurchase = false
                };
                BookingOptions.Add(option);

                if (SelectedOption == null && option.IsAvailable)
                {
                    SelectedOption = option;
                    selectedBookingOption = option.Type;
                }
            }
        }

        StateHasChanged();
    }

    private async Task SelectBookingOption(BookingOption option)
    {
        if (option.IsAvailable)
        {
            SelectedOption = option;
            selectedBookingOption = option.Type;
            StateHasChanged();
        }
    }

    private async Task HandleSessionTypeChange(SessionType newSessionType)
    {
        requestModel.SessionCategory = newSessionType;

        var singleSessionPrice = await SessionPriceService.GetPriceForSessionTypeAsync(newSessionType);
        var packPrices = await SessionPackPriceService.GetPricesForSessionTypeAsync(newSessionType);
        var subscriptionPrices = await SubscriptionPriceService.GetPricesForSessionTypeAsync(newSessionType);

        if (singleSessionPrice == null)
        {
            await LogService.LogError("HandleSessionTypeChange", $"No single session price available for {newSessionType.GetDisplayName()}");
            Snackbar.Add($"No single session price available for {newSessionType.GetDisplayName()}. Please select another session type.", Severity.Warning);
            return;
        }

        // Update Single Session
        var existingSingle = BookingOptions.FirstOrDefault(o => o.Type == BookingType.SingleSession && o.RequiresPurchase);
        var newSingleOption = new BookingOption
        {
            Id = existingSingle?.Id ?? Guid.NewGuid().ToString(),
            Title = $"Single Session ({newSessionType.GetDisplayName()})",
            Description = "Book a one-time session without a subscription or pack.",
            PriceEUR = singleSessionPrice.PriceEUR,
            Type = BookingType.SingleSession,
            IsAvailable = true,
            RequiresPurchase = true
        };
        if (existingSingle != null)
        {
            BookingOptions[BookingOptions.IndexOf(existingSingle)] = newSingleOption;
        }
        else
        {
            BookingOptions.Insert(0, newSingleOption);
        }

        // Update Session Packs
        var existingPacks = BookingOptions.Where(o => o.Type == BookingType.SessionPack && o.RequiresPurchase).ToList();
        foreach (var existingPack in existingPacks)
        {
            BookingOptions.Remove(existingPack);
        }
        if (packPrices != null)
        {
            foreach (var packPrice in packPrices)
            {
                BookingOptions.Add(new BookingOption
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = packPrice.Name,
                    Description = packPrice.Description ?? $"Includes {packPrice.TotalSessions} sessions.",
                    PriceEUR = packPrice.PriceEUR,
                    Type = BookingType.SessionPack,
                    TotalSessions = packPrice.TotalSessions,
                    IsAvailable = true,
                    RequiresPurchase = true,
                    PlanId = packPrice.Id.ToString()
                });
            }
        }

        // Update Subscriptions
        var existingSubscriptions = BookingOptions.Where(o => o.Type == BookingType.Subscription && o.RequiresPurchase).ToList();
        foreach (var existingSubscription in existingSubscriptions)
        {
            BookingOptions.Remove(existingSubscription);
        }
        if (subscriptionPrices != null)
        {
            foreach (var subscriptionPrice in subscriptionPrices)
            {
                BookingOptions.Add(new BookingOption
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = subscriptionPrice.Name,
                    Description = subscriptionPrice.Description ?? $"Up to {subscriptionPrice.MonthlyLimit} sessions per month.",
                    PriceEUR = subscriptionPrice.PriceEUR,
                    Type = BookingType.Subscription,
                    MonthlyLimit = subscriptionPrice.MonthlyLimit,
                    IsAvailable = true,
                    RequiresPurchase = true,
                    PlanId = subscriptionPrice.Id.ToString()
                });
            }
        }

        // Update SelectedOption
        if (SelectedOption?.Type == BookingType.SingleSession)
        {
            SelectedOption = newSingleOption;
            selectedBookingOption = newSingleOption.Type;
        }
        else if (SelectedOption?.Type == BookingType.SessionPack && SelectedOption.RequiresPurchase && packPrices != null && packPrices.Any())
        {
            SelectedOption = BookingOptions.FirstOrDefault(o => o.Type == BookingType.SessionPack && o.RequiresPurchase);
            selectedBookingOption = SelectedOption?.Type ?? BookingType.SingleSession;
        }
        else if (SelectedOption?.Type == BookingType.Subscription && SelectedOption.RequiresPurchase && subscriptionPrices != null && subscriptionPrices.Any())
        {
            SelectedOption = BookingOptions.FirstOrDefault(o => o.Type == BookingType.Subscription && o.RequiresPurchase);
            selectedBookingOption = SelectedOption?.Type ?? BookingType.SingleSession;
        }

        BookingOptions = new List<BookingOption>(BookingOptions);
        StateHasChanged();
    }

    private async Task LoadSessions()
    {
        allSessions = await VideoCallService.GetSessionsForUserAsync(userId);

        var now = DateTime.UtcNow;

        upcomingSessions = allSessions
            .Where(s => s.ScheduledAt >= now)
            .OrderBy(s => s.ScheduledAt)
            .ToList();

        pastSessions = allSessions
            .Where(s => s.ScheduledAt < now)
            .OrderByDescending(s => s.ScheduledAt)
            .ToList();

        calendarItems = upcomingSessions.Select(session => new CalendarItem
        {
            Start = session.ScheduledAt,
            End = session.ScheduledAt.AddMinutes(45),
            Text = session.Session?.SessionCategory.GetDisplayName() ?? "Session"
        }).ToList();
    }

    private async Task ToggleCalendar()
    {
        try
        {
            showSlotCalendar = !showSlotCalendar;

            var startDate = DateTime.UtcNow.Date.AddDays(2);
            var sessions = await SessionService.GetAllSessionsAsync() ?? new List<Session>();
            BusyTimes = sessions
                .Where(c => c.PreferredDateTime != default && c.PreferredDateTime > DateTime.UtcNow.AddDays(2))
                .Select(c => (
                    Start: new DateTimeOffset(c.PreferredDateTime, TimeSpan.Zero),
                    End: new DateTimeOffset(c.PreferredDateTime.AddMinutes(45), TimeSpan.Zero)
                ))
                .ToList();

            Unavailabilities = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
            AvailableSlots = GenerateAvailableSlots(startDate, BusyTimes, Unavailabilities);
            firstAvailableDate = AvailableSlots.Any() ? AvailableSlots.Min() : DateTime.Now;
        }
        catch (Exception ex)
        {
            await LogService.LogError("ToggleCalendar Error", ex.Message);
            Snackbar.Add("Failed to load calendar. Please try again.", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private List<DateTime> GenerateAvailableSlots(DateTime startDate, List<(DateTimeOffset Start, DateTimeOffset End)> busyTimes, List<UnavailableTime> adminUnavailabilities)
    {
        var slots = new List<DateTime>();
        var endDate = startDate.AddDays(25);
        var workStartTime = new TimeSpan(10, 0, 0);
        var workEndTime = new TimeSpan(21, 0, 0);
        var slotDuration = TimeSpan.FromMinutes(45);

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            for (var time = workStartTime; time < workEndTime; time = time.Add(slotDuration))
            {
                var slotStart = date.Date.Add(time);
                var slotEnd = slotStart.Add(slotDuration);

                if (slotStart <= DateTime.UtcNow.AddDays(2))
                    continue;

                bool isBusy = busyTimes.Any(busy =>
                    slotStart < busy.End.LocalDateTime && slotEnd > busy.Start.LocalDateTime);

                bool isWithinUnavailability = adminUnavailabilities.Any(u =>
                    (u.IsRecurring 
                    && ((int)u.DayOfWeek + 1) % 7 == (int)slotStart.DayOfWeek
                    && slotStart.TimeOfDay >= u.StartTime && slotStart.TimeOfDay < u.EndTime)
                    ||
                    (!u.IsRecurring && u.Date == slotStart.Date 
                    && slotStart.TimeOfDay >= u.StartTime 
                    && slotStart.TimeOfDay < u.EndTime));

                if (!isBusy && !isWithinUnavailability)
                {
                    slots.Add(slotStart);
                }
            }
        }
        return slots;
    }

    private async Task HandleSlotSelected(string isoString)
    {
        var date = DateTime.Parse(isoString);
        selectedSlotString = date.ToString("yyyy-MM-ddTHH:mm");
        requestModel.PreferredDateTimeString = selectedSlotString;

        var sessionPrice = await SessionPriceService.GetPriceForSessionTypeAsync(requestModel.SessionCategory);
        var singleSessionOption = BookingOptions.FirstOrDefault(o => o.Type == BookingType.SingleSession);
        if (singleSessionOption != null)
        {
            BookingOptions.Remove(singleSessionOption);
            BookingOptions.Add(new BookingOption
            {
                Id = Guid.NewGuid().ToString(),
                Title = $"Single Session ({requestModel.SessionCategory.GetDisplayName()})",
                Description = "Book a one-time session without a subscription or pack.",
                PriceEUR = sessionPrice?.PriceEUR,
                Type = BookingType.SingleSession,
                IsAvailable = sessionPrice != null,
                RequiresPurchase = true
            });
        }

        showSlotCalendar = false;
        StateHasChanged();
    }

    private async Task OpenConfirmationDialog()
    {
        if (requestForm == null)
        {
            return;
        }

        await requestForm.Validate();

        if (SelectedOption == null)
        {
            return;
        }

        if (!requestForm.IsValid)
        {
            return;
        }

        if (SelectedOption == null || string.IsNullOrEmpty(selectedSlotString))
            return;

        var parameters = new DialogParameters
        {
            { "SelectedOption", SelectedOption },
            { "SelectedDateTime", selectedSlotString }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true,
            CloseOnEscapeKey = true, 
            MaxWidth = MaxWidth.Small, 
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<BookingConfirmationDialog>("Confirm Booking", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await SubmitSessionRequest();
        }
    }

    private async Task SubmitSessionRequest()
    {
        var scheduledAtLocal = DateTime.Parse(selectedSlotString);
        var scheduledAtUtc = TimeZoneInfo.ConvertTimeToUtc(scheduledAtLocal, TimeZoneInfo.FindSystemTimeZoneById(userTimeZone));

        var lastSession = await SessionService.GetLatestSessionByEmailAsync(userId);

        if (lastSession == null)
        {
            Snackbar.Add("Error confirming your information. Please contact Itala for assistance.", Severity.Error);
            await LogService.LogError("Previous Session", "Unable to retrieve previous session. User Email: " + userId);
            return;
        }

        var session = new Session
        {
            PreferredDateTime = scheduledAtUtc,
            PreferredDateTimeString = requestModel.PreferredDateTimeString,
            SessionCategory = requestModel.SessionCategory,
            Message = requestModel.Message ?? string.Empty,
            Email = userId,
            FirstName = lastSession?.FirstName ?? string.Empty,
            LastName = lastSession?.LastName ?? string.Empty,
            FullName = lastSession?.FullName ?? string.Empty,
            DiscoveryCall = false
        };

        try
        {
            if (SelectedOption.Type == BookingType.SessionPack)
            {
                if (remainingPackSessions <= 0)
                {
                    Snackbar.Add("No remaining sessions in your pack. Please purchase a new pack or select another option.", Severity.Error);
                    return;
                }

                var success = await SessionPackService.ConsumeSession(userId, SelectedOption.PackId);
                if (!success)
                {
                    Snackbar.Add("Failed to consume a session from your pack.", Severity.Error);
                    return;
                }

                var created = await SessionService.CreateSessionAsync(session);
                if (!created)
                {
                    Snackbar.Add("Failed to schedule session. Please try again.", Severity.Error);
                    return;
                }

                remainingPackSessions = await SessionPackService.GetRemainingSessions(userId);
                hasValidPack = remainingPackSessions > 0;
                Snackbar.Add($"Session scheduled! You have {remainingPackSessions} session(s) left in your pack.", Severity.Success);
            }
            else if (SelectedOption.Type == BookingType.Subscription)
            {
                if (remainingSubscriptionSessions <= 0)
                {
                    Snackbar.Add("Monthly session limit reached. Please select another option or wait until next month.", Severity.Error);
                    return;
                }

                var success = await UserSubscriptionService.RegisterMonthlyUsage(userId);
                if (!success)
                {
                    Snackbar.Add("Failed to register session usage. Monthly limit may have been reached.", Severity.Error);
                    return;
                }

                var created = await SessionService.CreateSessionAsync(session);
                if (!created)
                {
                    Snackbar.Add("Failed to schedule session. Please try again.", Severity.Error);
                    return;
                }

                var status = await UserSubscriptionService.GetStatusAsync(userId);
                remainingSubscriptionSessions = status.Remaining;
                sessionsUsed = status.SessionsUsed;
                hasActiveSubscription = status.HasActiveSubscription;
                Snackbar.Add($"Session scheduled! You have {remainingSubscriptionSessions} session(s) left this month.", Severity.Success);
            }
            else if (SelectedOption.Type == BookingType.SingleSession)
            {
                if (!SelectedOption.IsAvailable)
                {
                    Snackbar.Add("Single session not available for this session type.", Severity.Error);
                    return;
                }

                var baseUrl = Configuration["AppSettings:BaseUrl"];
                var response = await HttpClient.PostAsJsonAsync($"{baseUrl}/api/payments/create-checkout-session", session);

                if (response.IsSuccessStatusCode)
                {
                    var data = await response.Content.ReadFromJsonAsync<ModelLayer.Models.DTOs.StripeResponse>();
                    NavigationManager.NavigateTo(data!.Url, true);
                }
                else
                {
                    Snackbar.Add("Failed to initiate payment for single session. Please try again.", Severity.Error);
                    await LogService.LogError("SubmitSessionRequest", $"Response Status: {response.StatusCode}");
                }
                return;
            }
            else
            {
                Snackbar.Add("Invalid booking option selected.", Severity.Error);
                return;
            }

            selectedSlotString = null;
            requestModel.Message = string.Empty;
            requestModel.SessionCategory = SessionType.lifeCoaching;
            showSlotCalendar = false;
            await LoadSessions();

            await LoadBookingOptions();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogService.LogError("SubmitSessionRequest", ex.Message);
            Snackbar.Add("An error occurred while scheduling the session. Please try again.", Severity.Error);
        }
    }

    private void JoinSession(string sessionId)
    {
        var session = allSessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session == null)
        {
            Snackbar.Add("Session not found.", Severity.Error);
            return;
        }

        var now = DateTime.UtcNow;
        var sessionStart = session.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(45);
        var joinWindowStart = sessionStart.AddMinutes(-10);

        if (now < joinWindowStart)
        {
            Snackbar.Add($"The session hasn’t started yet. Please try again at {joinWindowStart:HH:mm}.", Severity.Warning);
            return;
        }

        if (now > sessionEnd)
        {
            Snackbar.Add("This session has ended.", Severity.Error);
            return;
        }

        NavigationManager.NavigateTo($"/session/{sessionId}");
    }

    private void HandleCalendarClick(CalendarItem item)
    {
        var session = upcomingSessions.FirstOrDefault(s => s.ScheduledAt == item.Start);
        if (session == null)
        {
            Snackbar.Add("Session not found.", Severity.Error);
            return;
        }

        var now = DateTime.UtcNow;
        var sessionStart = session.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(45);
        var joinWindowStart = sessionStart.AddMinutes(-10);

        if (!session.IsActive)
        {
            Snackbar.Add("This session is no longer active.", Severity.Error);
            return;
        }

        if (now < joinWindowStart)
        {
            var userTimeZoneInfo = TimeZoneInfo.Local;
            try
            {
                userTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(userTimeZone);
            }
            catch (TimeZoneNotFoundException)
            {
                Snackbar.Add("Invalid time zone. Using local time zone.", Severity.Warning);
            }
            var joinWindowStartLocal = TimeZoneInfo.ConvertTimeFromUtc(joinWindowStart, userTimeZoneInfo);
            Snackbar.Add($"The session hasn’t started yet. Please try again after {joinWindowStartLocal:dd MMM yyyy HH:mm}.", Severity.Warning);
            return;
        }

        if (now > sessionEnd)
        {
            Snackbar.Add("This session has ended.", Severity.Error);
            return;
        }

        NavigationManager.NavigateTo($"/session/{session.SessionId}");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isSending)
            return;

        isSending = true;
        try
        {
            var userMessage = newMessage;
            chatMessages.Add(new ChatMessage { IsUser = true, Text = userMessage, Timestamp = DateTime.Now });
            newMessage = string.Empty;

            var botMessage = await ChatService.SendMessageAsync(chatMessages, userMessage);
            botMessage.Timestamp = DateTime.Now;
            chatMessages.Add(botMessage);

            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
        catch (Exception ex)
        {
            await LogService.LogError("SendMessage Error", ex.Message);
            chatMessages.Add(new ChatMessage { IsUser = false, Text = "Sorry, something went wrong.", Resources = new List<ChatResource>(), Timestamp = DateTime.Now });
        }
        finally
        {
            isSending = false;
            StateHasChanged();

            await Task.Delay(50);
            try
            {
                await JSRuntime.InvokeVoidAsync("focusElement", chatInputRef);
            }
            catch (JSException jsEx)
            {
                await LogService.LogError("Focus Input Error", jsEx.Message);
            }
        }
    }

    private async Task<TableData<VideoSession>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var sessions = await VideoCallService.GetSessionsForUserAsync(userId);

            var filteredSessions = sessions.AsQueryable();

            filteredSessions = selectedFilter switch
            {
                "Upcoming" => filteredSessions.Where(s => s.ScheduledAt >= DateTime.UtcNow),
                "Past" => filteredSessions.Where(s => s.ScheduledAt < DateTime.UtcNow),
                "All" => filteredSessions,
                _ => filteredSessions
            };

            if (!string.IsNullOrWhiteSpace(searchText))
            {
                filteredSessions = filteredSessions.Where(s =>
                    s.Session.SessionCategory.GetDisplayName().Contains(searchText, StringComparison.OrdinalIgnoreCase) == true);
            }

            filteredSessions = filteredSessions.OrderByDescending(s => s.ScheduledAt);

            var totalItems = filteredSessions.Count();

            var pagedData = filteredSessions
                .Skip(state.Page * state.PageSize)
                .Take(state.PageSize)
                .ToList();

            return new TableData<VideoSession>
            {
                Items = pagedData,
                TotalItems = totalItems
            };
        }
        catch (Exception ex)
        {
            await LogService.LogError("LoadServerData Error", ex.Message);
            Snackbar.Add("Failed to load sessions. Please try again.", Severity.Error);
            return new TableData<VideoSession>
            {
                Items = new List<VideoSession>(),
                TotalItems = 0
            };
        }
    }

    private async Task OnFilterChanged(string value)
    {
        selectedFilter = value;
        if (serverTable != null)
            await serverTable.ReloadServerData();
    }

    private async Task OnSearchChanged(string value)
    {
        searchText = value;
        if (serverTable != null)
            await serverTable.ReloadServerData();
    }

    private void ClearChat()
    {
        chatMessages.Clear();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("VideoCall.endCall");
    }
}