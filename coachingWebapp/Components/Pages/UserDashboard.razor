@page "/UserDashboard"
@rendermode InteractiveServer

<MudPopoverProvider/>

@attribute [Authorize(Roles = "User")]
<PageTitle>@pageTitle</PageTitle>


<MudPaper Class="dashboard-welcome" Elevation="1">
    <MudText Typo="Typo.h5" Class="welcome-title">
    Hello, @userId!
    </MudText>
    
    @if (upcomingSessions.Any())
    {
        var nextSession = upcomingSessions.First();
        <MudText Typo="Typo.subtitle1">
            A tua próxima sessão está agendada para 
        <strong>@nextSession.ScheduledAt.ToString("MMMM dd 'at' HH:mm", new CultureInfo("en-US"))</strong>. Get ready to take your next step!
        </MudText>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">
        You don’t have any sessions scheduled yet. It’s time to book a moment just for you.
        </MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => selectedTab = 1)">
        Book a Session
        </MudButton>
    }
</MudPaper>

<MudTabs @bind-ActivePanelIndex="selectedTab" Class="tabs">
    <MudTabPanel Text="Calendar" Icon="@Icons.Material.Filled.Event">
        <MudPaper Class="upcoming-calendar-wrapper" Elevation="0">
            <MudCalendar T="CalendarItem"
                Items="@calendarItems"
                Date="@DateTime.Today"
                View="CalendarView.Week"
                FirstDayOfWeek="DayOfWeek.Monday"
                StartHour="10"
                EndHour="21"
                SlotDuration="00:45:00"
                ShowTodayButton="true"
                ItemClicked="HandleCalendarClick"
                Class="mud-calendar-event" /> 
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Book Session" Icon="@Icons.Material.Filled.CalendarToday">
         <div class="user-dashboard-request">
            <MudForm @ref="requestForm" Model="@requestModel">
                <MudSelect Label="Session Type" 
                    T="SessionType"
                    @bind-Value="requestModel.SessionCategory"
                    For="@(() => requestModel.SessionCategory)">
                        @foreach (var type in Enum.GetValues(typeof(SessionType)).Cast<SessionType>())
                        {
                            <MudSelectItem Value="@type">
                                @((type.GetType().GetField(type.ToString())?.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute)?.Name ?? type.ToString())
                            </MudSelectItem>
                        }
                </MudSelect>

                <MudTextField Label="Message" 
                    T="string" 
                    Lines="3" 
                    @bind-Value="requestModel.Message"
                    For="@(() => requestModel.Message)" />

                <MudPaper Class="hoverable-input" @onclick="ToggleCalendar" Style="cursor: pointer;">
                    <MudTextField Label="Preferred Date & Time"
                                Value="@selectedSlotString"
                                For="@(() => requestModel.PreferredDateTimeString)"
                                ReadOnly="true"
                                Adornment="Adornment.End"
                                AdornmentIcon="@Icons.Material.Filled.CalendarMonth" />
                </MudPaper>

                <Calendar @bind-IsVisible="showSlotCalendar"
                        OnSlotSelected="HandleSlotSelected"
                        CurrentTimeZoneDisplay="@userTimeZone"
                        Slots="@AvailableSlots"
                        BusyTimes="@BusyTimes"
                        AdminUnavailabilities="@Unavailabilities"
                        FirstAvailableDate="@firstAvailableDate" />

                <MudButton OnClick="SubmitSessionRequest" Variant="Variant.Filled" Color="Color.Primary">
                    Request Session
                </MudButton>
            </MudForm>
        </div>
    </MudTabPanel>

    <MudTabPanel Text="Sessions" Icon="@Icons.Material.Filled.ListAlt">
        <MudPaper class="sessions-wrapper" Elevation="0">
            <MudStack Row="true" Justify="@Justify.Center" AlignItems="@AlignItems.Center" Spacing="3" Class="session-filters-wrapper">
                <MudSelect T="string" Label="Filter" @bind-Value="selectedFilter" Dense="true">
                    <MudSelectItem Value="@("Upcoming")">Upcoming</MudSelectItem>
                    <MudSelectItem Value="@("Past")">Past</MudSelectItem>
                    <MudSelectItem Value="@("All")">All</MudSelectItem>
                </MudSelect>

                <MudTextField @bind-Value="searchText" 
                    Placeholder="Search by type..." 
                    Adornment="Adornment.Start" 
                    AdornmentIcon="@Icons.Material.Filled.Search" />
            </MudStack>

            <MudTable Items="FilteredSessions" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ScheduledAt.ToString("dd MMM yyyy - HH:mm")</MudTd>
                    <MudTd>
                        @if (context.EndedAt.HasValue)
                        {
                            <MudChip T="string" Color="Color.Success">Completed</MudChip>
                        }
                        else if (DateTime.UtcNow < context.ScheduledAt)
                        {
                            <MudChip T="string" Color="Color.Info">Scheduled</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Warning">Missed</MudChip>
                        }
                    </MudTd>
                    <MudTd>@(context.Session?.SessionCategory.ToString() ?? "N/A")</MudTd>
                    <MudTd>
                        @if (context.IsActive && DateTime.UtcNow.AddMinutes(-10) <= context.ScheduledAt)
                        {
                            <MudButton Size="Size.Small" OnClick="@(() => JoinSession(context.SessionId))">
                                Join Call
                            </MudButton>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Chat with Ítala(AI)" Icon="@Icons.Material.Filled.Chat">
       <MudPaper Class="chat-wrapper" Elevation="0">
            <MudStack Spacing="3">
                <div class="d-flex justify-end">
                    <MudButton OnClick="ClearChat" 
                               Class="clear-chat-button" 
                               StartIcon="@Icons.Material.Filled.Clear" 
                               Size="Size.Small">
                        Clear Chat
                    </MudButton>
                </div>
                <div class="chat-messages" style="max-height: 400px; overflow-y: auto;" @ref="chatContainer">
                    @foreach (var message in chatMessages)
                    {
                        <MudCard Class="@(message.IsUser ? "user-message" : "bot-message")" AriaLabel="@(message.IsUser ? "User message" : "Bot message")">
                            <MudCardContent Class="d-flex align-center">
                                @if (!message.IsUser)
                                {
                                    <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                        <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                    </MudAvatar>
                                }
                                <div>
                                    <MudText Typo="Typo.body2" Class="message-text">@message.Text</MudText>
                                    @if (message.Resources?.Any() == true)
                                    {
                                        <MudText Typo="Typo.caption">Resources:</MudText>
                                        foreach (var resource in message.Resources)
                                        {
                                            <MudLink Href="@resource.Url" Target="_blank" Class="d-block">@resource.Name</MudLink>
                                        }
                                    }
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                        @message.Timestamp.ToString("HH:mm")
                                    </MudText>
                                </div>
                                @if (message.IsUser)
                                {
                                    <MudAvatar Color="Color.Secondary" Size="Size.Small" Class="ml-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    </MudAvatar>
                                }
                            </MudCardContent>
                        </MudCard>
                    }
                    @if (isSending)
                    {
                        <MudCard Class="bot-message">
                            <MudCardContent Class="d-flex align-center">
                                <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                    <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                </MudAvatar>
                                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                <MudText>Ítala(AI) is typing...</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
                <MudForm @ref="chatForm" Class="chat-input-form">
                    <MudTextField InputRef="@chatInputRef"
                                @bind-Value="newMessage" 
                                Placeholder="How can Ítala help you?" 
                                Immediate="true" 
                                OnKeyDown="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter" && !isSending) await SendMessage(); })" 
                                Disabled="isSending" 
                                Variant="Variant.Outlined" 
                                Adornment="Adornment.End" 
                                AdornmentIcon="@Icons.Material.Filled.Send" 
                                AdornmentColor="Color.Primary" 
                                OnAdornmentClick="SendMessage" 
                                Class="chat-input" />
                </MudForm>
            </MudStack>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

@code {
    private string pageTitle = "User Dashboard | Ítala Veloso";
    private int selectedTab = 0;
    private List<VideoSession> allSessions = new();
    private List<VideoSession> upcomingSessions = new();
    private List<VideoSession> pastSessions = new();
    private DateTime _selectedDate = DateTime.Today;
    private List<CalendarItem> calendarItems = new();
    private string userId;

    private MudForm requestForm;
    private Session requestModel = new();

    private bool showSlotCalendar = false;

    private string selectedSlotString;
    private SessionType requestType = SessionType.lifeCoaching;
    private string requestMessage;

    private List<DateTime> AvailableSlots = new();
    private List<(DateTimeOffset Start, DateTimeOffset End)> BusyTimes = new();
    private List<UnavailableTime> Unavailabilities = new();
    private DateTime? firstAvailableDate;

    private string selectedFilter = "Upcoming";
    private string searchText = "";

    private List<ChatMessage> chatMessages = new();
    private string newMessage = "";
    private MudForm chatForm;
    private bool isSending = false;
    private ElementReference chatContainer;
    private ElementReference chatInputRef;

    private IEnumerable<VideoSession> FilteredSessions => allSessions
        .Where(session =>
            (selectedFilter == "Upcoming" && session.ScheduledAt >= DateTime.UtcNow) ||
            (selectedFilter == "Past" && session.ScheduledAt < DateTime.UtcNow) ||
            (selectedFilter == "All"))
        .Where(session => string.IsNullOrWhiteSpace(searchText)
            || session.Session?.SessionCategory.ToString().Contains(searchText, StringComparison.InvariantCultureIgnoreCase) == true)
        .OrderByDescending(session => session.ScheduledAt);


    private string userTimeZone = TimeZoneInfo.Local.DisplayName;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = auth.User?.Identity?.Name;
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        allSessions = await VideoCallService.GetSessionsForUserAsync(userId);
        upcomingSessions = allSessions
            .Where(s => s.ScheduledAt >= DateTime.UtcNow)
            .OrderBy(s => s.ScheduledAt).ToList();

        pastSessions = allSessions
            .Where(s => s.ScheduledAt < DateTime.UtcNow)
            .OrderByDescending(s => s.ScheduledAt).ToList();

        calendarItems = upcomingSessions.Select(session => new CalendarItem
        {
            Start = session.ScheduledAt,
            End = session.ScheduledAt.AddMinutes(45),
            Text = session.Session?.SessionCategory.ToString() ?? "Session"
        }).ToList();
    }

    private async Task ToggleCalendar()
    {
        try
        {
            showSlotCalendar = !showSlotCalendar;

            var startDate = DateTime.UtcNow.Date.AddDays(2);
            var sessions = await SessionService.GetAllSessions() ?? new List<Session>();
            BusyTimes = sessions
                .Where(c => c.PreferredDateTime != default && c.PreferredDateTime > DateTime.UtcNow.AddDays(2))
                .Select(c => (
                    Start: new DateTimeOffset(c.PreferredDateTime, TimeSpan.Zero),
                    End: new DateTimeOffset(c.PreferredDateTime.AddMinutes(45), TimeSpan.Zero)
                ))
                .ToList();

            Unavailabilities = (await UnavailableTimeService.GetAllUnavailableTimesAsync()).ToList();
            AvailableSlots = GenerateAvailableSlots(startDate, BusyTimes, Unavailabilities);
            firstAvailableDate = AvailableSlots.Any() ? AvailableSlots.Min() : DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ToggleCalendar: {ex.Message}");
        }
        finally {
            StateHasChanged();
        }
    }

    private List<DateTime> GenerateAvailableSlots(DateTime startDate, List<(DateTimeOffset Start, DateTimeOffset End)> busyTimes, List<UnavailableTime> adminUnavailabilities)
    {
        var slots = new List<DateTime>();
        var endDate = startDate.AddDays(25);
        var workStartTime = new TimeSpan(10, 0, 0);
        var workEndTime = new TimeSpan(21, 0, 0);
        var slotDuration = TimeSpan.FromMinutes(45);

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            for (var time = workStartTime; time < workEndTime; time = time.Add(slotDuration))
            {
                var slotStart = date.Date.Add(time);
                var slotEnd = slotStart.Add(slotDuration);

                if (slotStart <= DateTime.UtcNow.AddDays(2))
                    continue;

                bool isBusy = busyTimes.Any(busy =>
                    slotStart < busy.End.LocalDateTime && slotEnd > busy.Start.LocalDateTime);

                bool isWithinUnavailability = adminUnavailabilities.Any(u =>
                    (u.IsRecurring 
                    && ((int)u.DayOfWeek + 1) % 7 == (int)slotStart.DayOfWeek
                    && slotStart.TimeOfDay >= u.StartTime && slotStart.TimeOfDay < u.EndTime)
                    ||
                    (!u.IsRecurring && u.Date == slotStart.Date 
                    && slotStart.TimeOfDay >= u.StartTime 
                    && slotStart.TimeOfDay < u.EndTime));

                if (!isBusy && !isWithinUnavailability)
                {
                    slots.Add(slotStart);
                }
            }
        }
        return slots;
    }

    private async Task HandleSlotSelected(string isoString)
    {
        var date = DateTime.Parse(isoString);
        selectedSlotString = date.ToString("yyyy-MM-ddTHH:mm");
        requestModel.PreferredDateTimeString = selectedSlotString;

        showSlotCalendar = false;
        StateHasChanged();
    }

    private async Task SubmitSessionRequest()
    {
        await requestForm.Validate();
        if (!requestForm.IsValid || string.IsNullOrWhiteSpace(selectedSlotString))
            return;

        var scheduledAt = DateTime.Parse(selectedSlotString);

        var session = new Session
        {
            PreferredDateTime = scheduledAt,
            SessionCategory = requestType,
            Message = requestMessage ?? string.Empty,
            CreatedAt = DateTime.UtcNow,
            IsSessionBooking = true,
            DiscoveryCall = false,
            Email = userId,
            FullName = ""
        };

        await SessionService.CreateSessionAsync(session);

        Snackbar.Add("Session successfully scheduled!", Severity.Success);

        selectedSlotString = null;
        requestMessage = string.Empty;
        showSlotCalendar = false;

        await LoadSessions();
    }

    private void JoinSession(string sessionId)
    {
        NavigationManager.NavigateTo($"/session/{sessionId}");
    }

    private void HandleCalendarClick(CalendarItem item)
    {
        var session = upcomingSessions.FirstOrDefault(s =>
            s.ScheduledAt == item.Start);

        if (session is not null && session.IsActive)
            NavigationManager.NavigateTo($"/session/{session.SessionId}");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isSending)
            return;

        isSending = true;
        try
        {
            var userMessage = newMessage;
            chatMessages.Add(new ChatMessage { IsUser = true, Text = userMessage, Timestamp = DateTime.Now });
            newMessage = "";

            var botMessage = await ChatService.SendMessageAsync(chatMessages, userMessage);
            botMessage.Timestamp = DateTime.Now;
            chatMessages.Add(botMessage);

            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SendMessage: {ex.Message}");
            chatMessages.Add(new ChatMessage { IsUser = false, Text = "Sorry, something went wrong.", Resources = new List<ChatResource>(), Timestamp = DateTime.Now });
        }
        finally
        {
            isSending = false;
            StateHasChanged();

            await Task.Delay(50);

            try
            {
                await JSRuntime.InvokeVoidAsync("focusElement", chatInputRef);
            }
            catch (JSException jsEx)
            {
                await LogService.LogError("Erro ao focar input: ", jsEx.Message);
            }
        }
    }

    private void ClearChat()
    {
        chatMessages.Clear();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("VideoCall.endCall");
    }
}
