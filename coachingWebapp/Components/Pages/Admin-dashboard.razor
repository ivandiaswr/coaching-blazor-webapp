@page "/admin-dashboard"
@rendermode InteractiveServer

@using BusinessLayer.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using ModelLayer.Models

@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IContactService ContactService
@inject IEmailSubscriptionService EmailSubscriptionService

@inject IDialogService DialogService
<MudPopoverProvider/> @*only works if its in the page of the mud component*@
<MudDialogProvider/>

@attribute [Authorize(Roles = "Admin")]
<PageTitle>@pageTitle</PageTitle>

<section id="adminDashboard">
    <div class="dashboard-header">
        <div>
            <h1><span class="highlight">Admin</span> Dashboard</h1>  
        
            @if (authState != null && authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
            {
                <p>Welcome, @authState.User.Identity.Name!</p>
            }
            else
            {
                <p>Loading user information...</p>
            }
        </div>
        <div>
            <a class="btn btn-primary" href="/">remmoved G Auth</a>
            <button class="btn btn-primary" @onclick="LogoutUser">Logout</button>
        </div>
    </div>

    <div class="mud-grids-container">
        <MudDataGrid T="Contact" Items="@contacts" Breakpoint="Breakpoint.Sm" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true"
        Hideable="true" QuickFilter="@quickFilterContacts">
            <ToolBarContent>
                <MudText Typo="Typo.h4">Contacts</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchContactsString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                <MudTooltip Text="Export to Excel">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportContactsToExcel">
                        <i class="fa-solid fa-file-csv"></i>
                    </MudButton>
                </MudTooltip>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="Contact" />
                <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.FullName" Title="Name" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false" Filterable="true" />
                <PropertyColumn Property="x => x.SessionCategory" Title="Session" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.Message" Title="Message" Sortable="false" Filterable="true">
                    <CellTemplate>
                        <div style="overflow-y: auto; max-height: 60px; max-width: 450px; white-space: normal; word-wrap: break-word; padding: 0; margin: 0;">
                            @context.Item.Message
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.CreatedAt" Title="CreatedAt" Sortable="true" Filterable="false" >
                    <CellTemplate>
                        @context.Item.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Contact" />
            </PagerContent>
        </MudDataGrid>

        <MudDataGrid T="EmailSubscription" Items="@emailSubscriptions" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true"
        Hideable="true" QuickFilter="@quickFilterEmailSubscriptions" @ref="emailSubscriptionGrid">
            <ToolBarContent>
                <MudText Typo="Typo.h4">Email Subscriptions</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!emailSubscriptionGrid.SelectedItems.Any())" OnClick="OpenEmailDialogAsync">
                Send Email
                </MudButton>
                <MudSpacer />
                <MudTextField @bind-Value="searchEmailSubscriptionsString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                <MudTooltip Text="Export to Excel">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportEmailSubscriptionsToExcel">
                        <i class="fa-solid fa-file-csv"></i>
                    </MudButton>
                </MudTooltip>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="EmailSubscription" />
                <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.IsSubscribed" Title="IsSubscribed" Sortable="false" Filterable="true" />
                <PropertyColumn Property="x => x.SubscribedAt" Title="SubscribedAt" Sortable="true" Filterable="true" >
                    <CellTemplate>
                        @context.Item.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss")
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.UnsubscribedAt" Title="UnsubscribedAt" Sortable="false" Filterable="true" />
                <PropertyColumn Property="x => x.CreatedAt" Title="CreatedAt" Sortable="true" Filterable="false" >
                    <CellTemplate>
                        @context.Item.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="EmailSubscription" />
            </PagerContent>
        </MudDataGrid>
    </div>
</section>

@code {
    private string pageTitle = "Admin Dashboard | √çtala Veloso";
    private AuthenticationState authState;
    private List<Contact> contacts;
    private List<EmailSubscription> emailSubscriptions;
    private MudDataGrid<EmailSubscription> emailSubscriptionGrid;

    private string loginError = string.Empty;
    private string searchContactsString {get; set;}
    private string searchEmailSubscriptionsString {get; set;}

    private Func<Contact, bool> quickFilterContacts => c =>
        string.IsNullOrEmpty(searchContactsString) ||
        c.FullName.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Email.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase) ||
        c.Message.Contains(searchContactsString, StringComparison.OrdinalIgnoreCase);

    private Func<EmailSubscription, bool> quickFilterEmailSubscriptions => e =>
        string.IsNullOrEmpty(searchEmailSubscriptionsString) ||
        e.Name.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase) ||
        e.Email.Contains(searchEmailSubscriptionsString, StringComparison.OrdinalIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        contacts = ContactService.GetAllContacts() ?? new List<Contact>();
        emailSubscriptions = EmailSubscriptionService.GetAllEmailSubscriptions() ?? new List<EmailSubscription>();
    }

    private Task OpenEmailDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "RecipientEmails", emailSubscriptionGrid.SelectedItems.Select(e => e.Email).ToList() }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        return DialogService.ShowAsync<SendEmailDialog>("Compose Email", parameters, options);
    }

    private async Task ExportContactsToExcel()
    {
        using var workbook = new ClosedXML.Excel.XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Contacts");

        worksheet.Cell(1, 1).Value = "Id";
        worksheet.Cell(1, 2).Value = "FullName";
        worksheet.Cell(1, 3).Value = "Email";
        worksheet.Cell(1, 4).Value = "Session";
        worksheet.Cell(1, 5).Value = "Message";
        worksheet.Cell(1, 6).Value = "CreatedAt";

        var filteredContacts = contacts.Where(quickFilterContacts).ToList();

        for (int i = 0; i < filteredContacts.Count; i++)
        {
            var contact = filteredContacts[i];
            worksheet.Cell(i + 2, 1).Value = contact.Id;
            worksheet.Cell(i + 2, 2).Value = contact.FullName;
            worksheet.Cell(i + 2, 3).Value = contact.Email;
            worksheet.Cell(i + 2, 4).Value = contact.SessionCategory.ToString();
            worksheet.Cell(i + 2, 5).Value = contact.Message;
            worksheet.Cell(i + 2, 6).Value = contact.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        var fileName = $"Contacts_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
    }

    private async Task ExportEmailSubscriptionsToExcel()
    {
        using var workbook = new ClosedXML.Excel.XLWorkbook();
        var worksheet = workbook.Worksheets.Add("EmailSubscriptions");

        worksheet.Cell(1, 1).Value = "Id";
        worksheet.Cell(1, 2).Value = "Name";
        worksheet.Cell(1, 3).Value = "Email";
        worksheet.Cell(1, 4).Value = "IsSubscribed";
        worksheet.Cell(1, 5).Value = "SubscribedAt";
        worksheet.Cell(1, 6).Value = "UnsubscribedAt";
        worksheet.Cell(1, 7).Value = "CreatedAt";

        var filteredEmailSubscriptions = emailSubscriptions.Where(quickFilterEmailSubscriptions).ToList();

        for (int i = 0; i < filteredEmailSubscriptions.Count; i++)
        {
            var subscription = filteredEmailSubscriptions[i];
            worksheet.Cell(i + 2, 1).Value = subscription.Id;
            worksheet.Cell(i + 2, 2).Value = subscription.Name;
            worksheet.Cell(i + 2, 3).Value = subscription.Email;
            worksheet.Cell(i + 2, 4).Value = subscription.IsSubscribed ? "Yes" : "No";
            worksheet.Cell(i + 2, 5).Value = subscription.SubscribedAt.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
            worksheet.Cell(i + 2, 6).Value = subscription.UnsubscribedAt?.ToString("dd-MM-yyyy HH:mm:ss") ?? "N/A";
            worksheet.Cell(i + 2, 7).Value = subscription.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss");
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        var fileName = $"EmailSubscriptions_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
    }

    private async Task LogoutUser()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<SessionResult>("logout");

            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                loginError = result.Error;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
            loginError = "An unexpected error occurred. Please try again.";
        }
    }
}