@page "/session/{SessionId}"
@rendermode InteractiveServer

<section id="video-session" class="services-section">
    <div class="container">
        
        <header class="services-header">
            <h1>Video Session</h1>
            <p class="header-description">
                Join your session below.
            </p>
        </header>

        @if (isAdmin)
        {
            <MudAlert Severity="Severity.Success">
                <b>Admin:</b> Youâ€™re managing this session.
            </MudAlert>
        }
        else if (isUser)
        {
            <MudAlert Severity="Severity.Info">
                <b>Welcome back!</b> You're joining this session as a client.
            </MudAlert>
        }
        else
        {
            isGuest = true;
            <MudAlert Severity="Severity.Warning">
                <b>Guest access:</b> You can join this session as a guest. Your camera and microphone will be used, but you won't have access to dashboard features.
            </MudAlert>
        }

        <MudPaper Style="padding:1rem; margin-top:1rem;">
            <p><b>Session:</b> @SessionId</p>

            <div style="display: flex; gap:1rem; justify-content: center;">
                <video id="localVideo"
                       autoplay playsinline muted
                       style="width:45%; border-radius: 8px; background: #000;" />
                
                <video id="remoteVideo"
                       autoplay playsinline
                       style="width:45%; border-radius: 8px; background: #000;" />
            </div>

            <div style="
                margin-top: 1rem;
                display: flex; 
                flex-direction: row;
                gap: 1rem;
                justify-content: center;">
                
                <MudIconButton Icon="@Icons.Material.Filled.Call" 
                               Color="Color.Primary"
                               OnClick="@JoinCall"
                               ToolTip="Start/Join Call" />
                
                <MudIconButton Icon="@Icons.Material.Filled.MicOff"
                               Color="Color.Warning"
                               OnClick="@ToggleMic"
                               ToolTip="Mute/Unmute Microphone" />
                
                <MudIconButton Icon="@Icons.Material.Filled.VideocamOff"
                               Color="Color.Warning"
                               OnClick="@ToggleCamera"
                               ToolTip="Enable/Disable Camera" />
                
                <MudIconButton Icon="@Icons.Material.Filled.ScreenShare"
                               Color="Color.Info"
                               OnClick="@ShareScreen"
                               ToolTip="Share Your Screen" />
                
                <MudIconButton Icon="@Icons.Material.Filled.CallEnd"
                               Color="Color.Error"
                               OnClick="@EndCall"
                               ToolTip="End Call" />
            </div>

            <MudPaper Style="margin-top:1rem; padding:1rem; height:200px; display:flex; flex-direction:column;">
                <div id="chatMessages" 
                     style="flex:1; overflow-y:auto; padding:0.5rem; border:1px solid #e0e0e0; border-radius:4px;">
                </div>
                <div style="display:flex; gap:0.5rem; margin-top:0.5rem;">
                    <MudTextField @ref="chatInputRef"
                                  @bind-Value="chatMessage" 
                                  Placeholder="Type a message..." 
                                  Variant="Variant.Outlined" 
                                  Style="flex:1;" 
                                  Immediate="true"
                                  OnKeyDown="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatMessage)) await SendChatMessage(); })" />
                    <InputFile OnChange="OnFileSelected" style="display:none" id="fileInput" key="@inputFileKey" />

                    <MudButton Color="Color.Secondary" OnClick="TriggerFileUpload">
                        Anexar
                    </MudButton>
                    <MudButton Color="Color.Primary" 
                               OnClick="@SendChatMessage" 
                               Disabled="@(string.IsNullOrWhiteSpace(chatMessage))">
                        Send
                    </MudButton>
                </div>
            </MudPaper>

        </MudPaper>

    </div>
</section>

@code {
    [Parameter] public string SessionId { get; set; }
    private bool isGuest = true;
    private bool isUser = false;
    private bool isAdmin = false;
    private bool isReady = false;
    private string chatMessage = string.Empty;
    private MudTextField<string> chatInputRef;
    private ElementReference fileInputRef;
    private string inputFileKey = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity?.IsAuthenticated == true)
        {
            isGuest = false;
            isAdmin = currentUser.IsInRole("Admin");
            isUser = !isAdmin;
        }

        isReady = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isReady)
        {
            isReady = false;
            await JSRuntime.InvokeVoidAsync("VideoCall.init", SessionId);
        }
    }

    private async Task TriggerFileUpload()
    {
        await JSRuntime.InvokeVoidAsync("VideoCallHelpers.triggerFileInput", "fileInput");
    }


    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);

                var fileName = file.Name;
                var base64 = Convert.ToBase64String(buffer);
                var contentType = file.ContentType;

                await JSRuntime.InvokeVoidAsync("VideoCall.sendFileAttachment", fileName, base64, contentType);
                inputFileKey = Guid.NewGuid().ToString();
            }
            catch (Exception ex)
            {
                await LogService.LogError("OnFileSelected", ex.Message);
            }
        }
    }

    private async Task SendChatMessage()
    {
        if (!string.IsNullOrWhiteSpace(chatMessage))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User.Identity?.Name ?? "Guest";
            await JSRuntime.InvokeVoidAsync("VideoCall.sendChatMessage", userName, chatMessage);
            chatMessage = string.Empty;
            if (chatInputRef != null)
            await chatInputRef.Clear();
            StateHasChanged();
        }
    }

    private async Task JoinCall() => await JSRuntime.InvokeVoidAsync("VideoCall.startCall");
    private async Task EndCall() => await JSRuntime.InvokeVoidAsync("VideoCall.endCall");
    private async Task ToggleMic() => await JSRuntime.InvokeVoidAsync("VideoCall.toggleMic");
    private async Task ToggleCamera() => await JSRuntime.InvokeVoidAsync("VideoCall.toggleCamera");
    private async Task ShareScreen() => await JSRuntime.InvokeVoidAsync("VideoCall.shareScreen");
}