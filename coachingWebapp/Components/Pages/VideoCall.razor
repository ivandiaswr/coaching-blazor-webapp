@page "/session/{SessionId}"
@rendermode InteractiveServer
<MudSnackbarProvider />

<section id="video-session" class="services-section">
    <div class="container">
        
        <header class="services-header">
            <h1>Video Session</h1>
            <p class="header-description">
                Join your session below.
            </p>
        </header>

        @if (isAdmin)
        {
            <MudAlert Severity="Severity.Success">
                <b>Admin:</b> You’re managing this session.
            </MudAlert>
        }
        else if (isUser)
        {
            <MudAlert Severity="Severity.Info">
                <b>Welcome back!</b> You're joining this session as a client.
            </MudAlert>
        }
        else
        {
            isGuest = true;
            <MudAlert Severity="Severity.Warning">
                <b>Guest access:</b> You can join this session as a guest. Your camera and microphone will be used, but you won't have access to dashboard features.
            </MudAlert>
        }

        <MudPaper Class="session-paper">
            <p><b>Session:</b> @SessionId</p>

            <div class="video-container">
                <div class="video-position">
                    <video id="localVideo" autoplay playsinline muted controls class="video-element" @key="@("localVideo")" />
                    @if (!isCallActive)
                    {
                        <div class="session-video-overlay">
                            <span class="overlay-text">You need to connect...</span>
                        </div>
                    }
                    else if (isCallActive && !isLocalStreamActive)
                    {
                        <div class="session-video-overlay">
                            <span class="overlay-text">Camera/Mic Not Available</span>
                        </div>
                    }
                </div>
                <div class="video-position">
                    <video id="remoteVideo" autoplay playsinline controls class="video-element" @key="@("remoteVideo")" />
                    @if (!isCallActive)
                    {
                        <div class="session-video-overlay">
                            <span class="overlay-text pulsing"> Waiting for @(!isAdmin ? "Ítala" : "Client")...</span>
                        </div>
                    }
                    else if (isCallActive && !isRemoteConnected)
                    {
                        <div class="session-video-overlay">
                            <span class="overlay-text pulsing">Waiting for @(!isAdmin ? "Ítala" : "Client")</span><br />
                            <span class="overlay-subtext">(disconnected)</span>
                        </div>
                    }
                </div>
            </div>

            <div class="button-container">
                <MudIconButton Icon="@(isCallActive ? Icons.Material.Filled.Call : Icons.Material.Filled.Call)"
                            Color="@(isCallActive ? Color.Success : Color.Default)"
                            Variant="@(isCallActive ? Variant.Filled : Variant.Outlined)"
                            OnClick="@JoinCall"
                            ToolTip="@(isCallActive ? "Call Active" : "Start/Join Call")"
                            AriaLabel="@(isCallActive ? "Call Active" : "Start/Join Call")" />

                <MudIconButton Icon="@(isMuted ? Icons.Material.Filled.MicOff : Icons.Material.Filled.Mic)"
                            Color="@(isMuted ? Color.Secondary : Color.Default)"
                            Variant="@(isMuted ? Variant.Filled : Variant.Outlined)"
                            OnClick="@ToggleMic"
                            ToolTip="@(isMuted ? "Unmute Microphone" : "Mute Microphone")"
                            AriaLabel="@(isMuted ? "Unmute Microphone" : "Mute Microphone")"
                            Disabled="@(!isCallActive)" />

                <MudIconButton Icon="@(isCameraOff ? Icons.Material.Filled.VideocamOff : Icons.Material.Filled.Videocam)"
                            Color="@(isCameraOff ? Color.Secondary : Color.Default)"
                            Variant="@(isCameraOff ? Variant.Filled : Variant.Outlined)"
                            OnClick="@ToggleCamera"
                            ToolTip="@(isCameraOff ? "Enable Camera" : "Disable Camera")"
                            AriaLabel="@(isCameraOff ? "Enable Camera" : "Disable Camera")"
                            Disabled="@(!isCallActive)" />

                <MudIconButton Icon="@(isScreenSharing ? Icons.Material.Filled.StopScreenShare : Icons.Material.Filled.ScreenShare)"
                            Color="@(isScreenSharing ? Color.Success : Color.Default)"
                            Variant="@(isScreenSharing ? Variant.Filled : Variant.Outlined)"
                            OnClick="@ShareScreen"
                            ToolTip="@(isScreenSharing ? "Stop Sharing Screen" : "Share Your Screen")"
                            AriaLabel="@(isScreenSharing ? "Stop Sharing Screen" : "Share Your Screen")"
                            Disabled="@(!isCallActive)" />

                <MudIconButton Icon="@Icons.Material.Filled.CallEnd"
                            Color="Color.Error"
                            Variant="Variant.Filled"
                            OnClick="@EndCall"
                            ToolTip="End Call"
                            AriaLabel="End Call"
                            Disabled="@(!isCallActive)" />
            </div>

            <MudPaper Class="chat-paper">
                <div id="chatMessages" class="chat-messages"></div>
                <div class="chat-input-container">
                    <MudTextField @ref="chatInputRef"
                                  @bind-Value="chatMessage" 
                                  Placeholder="Type a message..." 
                                  Variant="Variant.Outlined" 
                                  Class="chat-textfield"
                                  Immediate="true"
                                  OnKeyDown="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatMessage)) await SendChatMessage(); })" />
                    <InputFile OnChange="OnFileSelected" class="file-input" id="fileInput" key="@inputFileKey" />

                    <MudButton Color="Color.Secondary" OnClick="TriggerFileUpload">
                        Attach
                    </MudButton>
                    <MudButton Color="Color.Primary" 
                               OnClick="@SendChatMessage" 
                               Disabled="@(string.IsNullOrWhiteSpace(chatMessage))">
                        Send
                    </MudButton>
                </div>
            </MudPaper>

        </MudPaper>

    </div>
</section>

@code {
    [Parameter] public string SessionId { get; set; }
    private bool isGuest = true;
    private bool isUser = false;
    private bool isAdmin = false;
    private bool isReady = false;
    private bool isCallActive = false;
    private bool isMuted = false;
    private bool isCameraOff = false;
    private bool isScreenSharing = false;
    private string chatMessage = string.Empty;
    private MudTextField<string> chatInputRef;
    private ElementReference fileInputRef;
    private string inputFileKey = Guid.NewGuid().ToString();
    private const long MaxFileSize = 10 * 1024 * 1024;
    private bool isLocalStreamActive = false;
    private bool isRemoteConnected = false;
    private DotNetObjectReference<VideoCall>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity?.IsAuthenticated == true)
        {
            isGuest = false;
            isAdmin = currentUser.IsInRole("Admin");
            isUser = !isAdmin;
        }

        isReady = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isReady)
        {
            isReady = false;
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("VideoCall.init", SessionId, dotNetRef);
        }
    }

    [JSInvokable]
    public void OnRemoteStreamConnected(bool isConnected)
    {
        isRemoteConnected = isConnected;
        StateHasChanged();
    }

    private async Task TriggerFileUpload()
    {
        await JSRuntime.InvokeVoidAsync("VideoCallHelpers.triggerFileInput", "fileInput");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.Size > MaxFileSize)
            {
                Snackbar.Add("The selected file exceeds the 10 MB limit. Please choose a smaller file.", Severity.Warning);
                return;
            }

            try
            {
                await using var stream = file.OpenReadStream(MaxFileSize);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var buffer = ms.ToArray();

                var fileName = file.Name;
                var base64 = Convert.ToBase64String(buffer);
                var contentType = file.ContentType;

                await JSRuntime.InvokeVoidAsync("VideoCall.sendFileAttachment", fileName, base64, contentType);
                inputFileKey = Guid.NewGuid().ToString();
            }
            catch (Exception ex)
            {
                await LogService.LogError("OnFileSelected", ex.Message);
            }
        }
    }

    private async Task SendChatMessage()
    {
        if (!string.IsNullOrWhiteSpace(chatMessage))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User.Identity?.Name ?? "Guest";
            await JSRuntime.InvokeVoidAsync("VideoCall.sendChatMessage", userName, chatMessage);
            chatMessage = string.Empty;
            if (chatInputRef != null)
                await chatInputRef.Clear();
            StateHasChanged();
        }
    }

    private async Task JoinCall()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("VideoCall.startCall");
            isCallActive = true;
            isLocalStreamActive = true;
            Snackbar.Add("Call started!", Severity.Success);
        }
        catch (Exception ex)
        {
            isLocalStreamActive = false;
            isCallActive = false;
            Snackbar.Add("Failed to start call: " + ex.Message, Severity.Error);
            await LogService.LogError("JoinCall", ex.Message);
        }
        StateHasChanged();
    }

    private async Task EndCall()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("VideoCall.endCall");
            isCallActive = false;
            isMuted = false;
            isCameraOff = false;
            isScreenSharing = false;
            isLocalStreamActive = false;
            isRemoteConnected = false;
            Snackbar.Add("Call ended.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to end call.", Severity.Error);
            await LogService.LogError("EndCall", ex.Message);
        }
    }

    private async Task ToggleMic()
    {
        try
        {
            isMuted = await JSRuntime.InvokeAsync<bool>("VideoCall.toggleMic");
            Snackbar.Add(isMuted ? "Microphone muted." : "Microphone unmuted.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to toggle microphone.", Severity.Error);
            await LogService.LogError("ToggleMic", ex.Message);
        }
    }

    private async Task ToggleCamera()
    {
        try
        {
            isCameraOff = await JSRuntime.InvokeAsync<bool>("VideoCall.toggleCamera");
            Snackbar.Add(isCameraOff ? "Camera disabled." : "Camera enabled.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to toggle camera.", Severity.Error);
            await LogService.LogError("ToggleCamera", ex.Message);
        }
    }

    private async Task ShareScreen()
    {
        try
        {
            isScreenSharing = await JSRuntime.InvokeAsync<bool>("VideoCall.shareScreen");
            Snackbar.Add(isScreenSharing ? "Screen sharing started." : "Screen sharing stopped.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to toggle screen sharing.", Severity.Error);
            await LogService.LogError("ShareScreen", ex.Message);
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}