@page "/session/{SessionId}"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@implements IAsyncDisposable

<MudSnackbarProvider />

<PageTitle>@pageTitle</PageTitle>

<section id="video-session" class="services-section">
    <div class="container">
        <header class="services-header">
            <h1>Video Session</h1>
            <p class="header-description">Join your session below.</p>
        </header>

        @if (isAdmin)
        {
            <MudAlert Severity="Severity.Success"><b>Admin:</b> You’re managing this session.</MudAlert>
        }
        else if (isUser)
        {
            <MudAlert Severity="Severity.Info"><b>Welcome back!</b> You're joining this session as a client.</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Warning"><b>Guest access:</b> You can join this session as a guest.</MudAlert>
        }

        <MudPaper Class="session-paper">
            <p><b>Session:</b> @SessionId</p>

            <div class="video-container">
                <div class="video-position">
                    <video id="localVideo" autoplay muted controls="false" class="video-element"
                        style="@(!isLocalStreamActive ? "display: none;" : "")"></video>
                    @if (!isCallActive)
                    {
                        <div class="session-video-overlay pulsing"><span class="overlay-text">You need to connect...</span>
                        </div>
                    }
                    else if (isCallActive && !isLocalStreamActive)
                    {
                        <div class="session-video-overlay"><span class="overlay-text">Camera/Mic Not Available</span></div>
                    }
                </div>
                <div class="video-position">
                    <video id="remoteVideo" autoplay playsinline class="video-element" controls
                        controlsList="nodownload nofullscreen" volume="0.5"></video>
                    @if (!isCallActive)
                    {
                        <div class="session-video-overlay"><span class="overlay-text pulsing">Waiting for @(!isAdmin ?
                                                            "Ítala" : "Client")...</span></div>
                    }
                    else if (isCallActive && !isRemoteConnected)
                    {
                        @if (isOtherParticipantPresent)
                        {
                            <div class="session-video-overlay">
                                <span class="overlay-text pulsing">Connecting to @(!isAdmin ? "Ítala" :
                                                                "Client")...</span><br />
                                <span class="overlay-subtext">(in session)</span>
                            </div>
                        }
                        else
                        {
                            <div class="session-video-overlay"><span class="overlay-text">Waiting for @(!isAdmin ? "Ítala" :
                                                                "Client")...</span></div>
                        }
                    }
                </div>
            </div>

            <div class="button-container">
                <MudIconButton Icon="@(isCallActive? Icons.Material.Filled.Call : Icons.Material.Filled.Call)"
                    Color="@(isCallActive ? Color.Success : Color.Default)"
                    Variant="@(isCallActive ? Variant.Filled : Variant.Outlined)" OnClick="@JoinCall"
                    ToolTip="@(isCallActive ? "Call Active" : "Start/Join Call")" />

                <MudIconButton Icon="@(isMuted? Icons.Material.Filled.MicOff : Icons.Material.Filled.Mic)"
                    Color="@(isMuted ? Color.Secondary : Color.Default)"
                    Variant="@(isMuted ? Variant.Filled : Variant.Outlined)" OnClick="@ToggleMic"
                    ToolTip="@(isMuted ? "Unmute Microphone" : "Mute Microphone")" />

                <MudIconButton
                    Icon="@(isCameraOff ? Icons.Material.Filled.VideocamOff : Icons.Material.Filled.Videocam)"
                    Color="@(isCameraOff ? Color.Secondary : Color.Default)"
                    Variant="@(isCameraOff ? Variant.Filled : Variant.Outlined)" OnClick="@ToggleCamera"
                    ToolTip="@(isCameraOff ? "Turn On Camera" : "Turn Off Camera")" />

                <MudIconButton
                    Icon="@(isScreenSharing ? Icons.Material.Filled.StopScreenShare : Icons.Material.Filled.ScreenShare)"
                    Color="@(isScreenSharing ? Color.Info : Color.Default)"
                    Variant="@(isScreenSharing ? Variant.Filled : Variant.Outlined)" OnClick="@ShareScreen"
                    ToolTip="@(isScreenSharing ? "Stop Sharing" : "Share Screen")" />

                <MudIconButton Icon="@Icons.Material.Filled.CallEnd" Color="Color.Error" Variant="Variant.Filled"
                    OnClick="@EndCall" ToolTip="End Call" />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Color="Color.Primary" Variant="Variant.Outlined"
                    OnClick="@ToggleFullscreen" ToolTip="Fullscreen Remote Video" />

                <div style="display: flex; align-items: center; gap: 0.5rem; min-width: 120px;">
                    <MudIcon Icon="@Icons.Material.Filled.VolumeUp" Style="color: #666;" />
                    <MudSlider T="double" Value="remoteVideoVolume" Min="0" Max="1" Step="0.1" Style="min-width: 80px;"
                        ToolTip="Remote Video Volume" ValueChanged="@OnVolumeChanged" />
                </div>
            </div>

            <div class="chat-container">
                <div class="chat-messages" id="chat-box">
                    @foreach (var message in chatMessages)
                    {
                        <div class="message @(message.IsSentByCurrentUser ? "sent" : "received")">
                            <div class="message-header">
                                <span class="username">@message.DisplayName</span>
                                <span class="timestamp">@message.Timestamp</span>
                            </div>
                            <div class="message-content">
                                <span class="text">@message.Message</span>
                            </div>
                        </div>
                    }
                </div>
                <div class="chat-input">
                    <MudTextField @ref="chatInputRef" @bind-Value="chatMessage" Label="Type a message..."
                        Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send"
                        OnAdornmentClick="SendChatMessage" OnKeyUp="HandleChatInputKeyUp" />
                </div>
            </div>
        </MudPaper>
    </div>
</section>

@code {
    [Parameter]
    public string? SessionId { get; set; }
    public string pageTitle => "Video Call - Coaching WebApp";
    private IJSObjectReference? module;
    private DotNetObjectReference<VideoCall>? dotNetRef;

    private bool isCallActive = false;
    private bool isMuted = false;
    private bool isCameraOff = false;
    private bool isScreenSharing = false;
    private bool isLocalStreamActive = false;
    private bool isRemoteConnected = false;
    private bool isOtherParticipantPresent = false;
    private bool isAdmin = false;
    private bool isUser = false;
    private double remoteVideoVolume = 0.5;
    private string chatMessage = string.Empty;
    private List<ChatMessage> chatMessages = new List<ChatMessage>();
    private MudTextField<string> chatInputRef = new();

    public class ChatMessage
    {
        public string UserName { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Timestamp { get; set; } = "";
        public string Message { get; set; } = "";
        public bool IsSentByCurrentUser { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Admin");
            isUser = !isAdmin;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/videoCall.js");
            dotNetRef = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("init", SessionId, dotNetRef);
        }
    }

    private async Task JoinCall()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("setCallStarted", true);
            await module.InvokeVoidAsync("startCall");
            Snackbar.Add("Joining call...", Severity.Info);
        }
    }

    private async Task EndCall()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("endCall");
            Snackbar.Add("Call ended", Severity.Error);
        }
    }

    private async Task ToggleMic()
    {
        if (module != null)
        {
            isMuted = await module.InvokeAsync<bool>("toggleMic");
            var message = isMuted ? "Microphone muted" : "Microphone unmuted";
            var severity = isMuted ? Severity.Warning : Severity.Success;
            Snackbar.Add(message, severity);
            StateHasChanged();
        }
    }

    private async Task ToggleCamera()
    {
        if (module != null)
        {
            isCameraOff = await module.InvokeAsync<bool>("toggleCamera");
            var message = isCameraOff ? "Camera turned off" : "Camera turned on";
            var severity = isCameraOff ? Severity.Warning : Severity.Success;
            Snackbar.Add(message, severity);
            StateHasChanged();
        }
    }

    private async Task ShareScreen()
    {
        if (module != null)
        {
            isScreenSharing = await module.InvokeAsync<bool>("shareScreen");
            var message = isScreenSharing ? "Screen sharing started" : "Screen sharing stopped";
            var severity = isScreenSharing ? Severity.Info : Severity.Normal;
            Snackbar.Add(message, severity);
            StateHasChanged();
        }
    }

    private async Task ToggleFullscreen()
    {
        Snackbar.Add("Toggling fullscreen...", Severity.Info);
        if (module != null)
        {
            await module.InvokeVoidAsync("toggleFullscreen");
        }
    }

    private async Task OnVolumeChanged(double newValue)
    {
        remoteVideoVolume = newValue;
        if (module != null)
        {
            await module.InvokeVoidAsync("setRemoteVideoVolume", remoteVideoVolume);
        }
    }

    private string GetDisplayName(string userName, string userRole)
    {
        if (string.IsNullOrEmpty(userName) || userName == "Guest")
            return "Guest";

        if (userRole == "Admin")
            return "Ítala (Coach)";
        else
            return "Client";
    }

    private async Task SendChatMessage()
    {
        if (module != null && !string.IsNullOrWhiteSpace(chatMessage))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User.Identity?.Name ?? "Guest";
            await module.InvokeVoidAsync("sendChatMessage", userName, chatMessage);
            chatMessage = string.Empty;
            await chatInputRef.Clear();
            StateHasChanged();
        }
    }

    private async Task HandleChatInputKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendChatMessage();
        }
    }

    [JSInvokable]
    public bool IsCurrentUserAdmin() => isAdmin;

    [JSInvokable]
    public void OnCallStarted()
    {
        isCallActive = true;
        Snackbar.Add("Call started successfully", Severity.Success);
        StateHasChanged();
    }

    [JSInvokable]
    public void OnCallEnded()
    {
        isCallActive = false;
        isRemoteConnected = false;
        isLocalStreamActive = false;
        isOtherParticipantPresent = false;
        if (module != null)
        {
            module.InvokeVoidAsync("setCallStarted", false);
        }
        StateHasChanged();
    }

    [JSInvokable]
    public void OnRemoteStreamConnected()
    {
        isRemoteConnected = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnRemoteStreamDisconnected()
    {
        isRemoteConnected = false;
        Snackbar.Add("Participant disconnected", Severity.Warning);
        StateHasChanged();
    }

    [JSInvokable]
    public void OnLocalStreamActive(bool active)
    {
        isLocalStreamActive = active;
        if (!active)
        {
            Snackbar.Add("Camera/microphone access failed", Severity.Error);
        }
        StateHasChanged();
    }

    [JSInvokable]
    public void OnOtherParticipantChanged(bool present)
    {
        isOtherParticipantPresent = present;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnChatMessageReceived(string userName, string timestamp, string message, string userRole)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User.Identity?.Name ?? "Guest";
        chatMessages.Add(new ChatMessage
        {
            UserName = userName,
            DisplayName = GetDisplayName(userName, userRole),
            Timestamp = timestamp,
            Message = message,
            IsSentByCurrentUser = (userName == currentUser)
        });
        StateHasChanged();
    }

    [JSInvokable]
    public void OnFileAttachmentReceived(string userName, string timestamp, string fileName, string base64Data, string
    contentType)
    {
        Console.WriteLine($"File received: {fileName} from {userName}");
    }

    public async ValueTask DisposeAsync()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("cleanup");
            await module.DisposeAsync();
        }
        dotNetRef?.Dispose();
        GC.SuppressFinalize(this);
    }
}
