@page "/login"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager

<section id="login">
    <EditForm Model="@loginModel" OnValidSubmit="LoginUser" FormName="loginForm">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Email">Email</label>
            <InputText @bind-Value="loginModel.Email" class="form-control" aria-placeholder="Your Email" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>
        <div>
            <label for="Password">Password</label>
            <InputText @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <div class="form-control">
            <label>
                <InputCheckbox @bind-Value="loginModel.RememberMe" /> Remember Me
            </label>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
    
    @if(!string.IsNullOrEmpty(loginError))
    {
        <div class="alert alert-message">@loginError</div>
    }
</section>   

@code {
    private LoginModel loginModel = new();
    private string loginError = string.Empty;
    
    private async Task LoginUser()
    {
       
        try
        {
            var result = await JSRuntime.InvokeAsync<SessionResult>("login", loginModel);

            if (result.Success)
            {
                NavigationManager.NavigateTo("/admin-dashboard", forceLoad: true);
            }
            else
            {
                 loginError = result.Error;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex.Message}");
            loginError = "An unexpected error occurred. Please try again.";
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        @* var hasher = new PasswordHasher<IdentityUser>();
        var hashedPassword = hasher.HashPassword(null, "Scorpionforlife13?");
        Console.WriteLine($"Hashed Password: {hashedPassword}"); *@

        @* var hasher = new PasswordHasher<IdentityUser>();
        var isPasswordValid = hasher.VerifyHashedPassword(null, 
            "AQAAAAIAAYagAAAAEHQETUbR1K+7UTUp2MQ78/BdLbXLAtX146f8f7yU8/v0uepkSh/d7SvlM8EGqZ8JXw==", 
            "Scorpionforlife13?");
        Console.WriteLine($"Password is valid: {isPasswordValid}"); *@

        @* var users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            Console.WriteLine($"User: {user.Email}, NormalizedEmail: {user.NormalizedEmail}");
        } *@

        @* var user = new IdentityUser
        {
            UserName = "ivansacfofu@gmail.com",
            Email = "ivansacfofu@gmail.com",
            EmailConfirmed = true
        };

        var result = await UserManager.CreateAsync(user, "Scorpionforlife13?!"); *@
    }
}