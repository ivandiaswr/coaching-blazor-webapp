@page "/login"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject LogService LogService

<PageTitle>@pageTitle</PageTitle>

<section id="login">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm" class="login-form">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Your Email" autocomplete="email" required />
            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Your Password" autocomplete="current-password" required />
            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
        </div>

        <p class="mt-2">
            <a href="/forgot-password">Forgot your password?</a>
        </p>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Logging in...</span>
            }
            else
            {
                <span>Login</span>
            }
        </button>

        @if (!string.IsNullOrEmpty(loginError))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @loginError
                @if (loginError.Contains("No account exists"))
                {
                    <p class="mt-2">Need an account? <a href="/register">Register here</a>.</p>
                }
            </div>
        }
    </EditForm>
</section>

@code {
    private string pageTitle = "Login | √çtala Veloso";
    private LoginModel loginModel = new();
    private string loginError = string.Empty;
    private bool isSubmitting = false;

    private async Task HandleLogin()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        loginError = string.Empty;

        try
        {
            await LogService.LogInfo("HandleLogin", $"Starting login attempt for email: {loginModel.Email}");
            var result = await JSRuntime.InvokeAsync<SessionResult>("login", loginModel);

            if (!result.Success)
            {
                loginError = result.Error ?? "Invalid email or password.";
                await LogService.LogWarning("HandleLogin", $"Login failed for email: {loginModel.Email}. Error: {loginError}");
            }
            else
            {
                await LogService.LogInfo("HandleLogin", $"Successful login for email: {loginModel.Email}");
            }
        }
        catch (Exception ex)
        {
            loginError = "An error occurred during login. Please try again.";
            await LogService.LogError("HandleLogin", $"Login error for email: {loginModel.Email}. Exception: {ex.Message}");
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
            await LogService.LogInfo("HandleLogin", $"Login attempt completed for email: {loginModel.Email}");
        }
    }
}