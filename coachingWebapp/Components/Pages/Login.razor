@page "/login"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@using System.Net.Http.Json

@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager

<PageTitle>@pageTitle</PageTitle>

<section id="login">
    <EditForm Model="@loginModel" OnValidSubmit="LoginUser" FormName="loginForm">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Email">Email</label>
            <InputText @bind-Value="loginModel.Email" class="form-control" aria-placeholder="Your Email" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        
    </EditForm>
    
    @if(!string.IsNullOrEmpty(loginError))
    {
        <div class="alert alert-message">@loginError</div>
    }
</section>   

@code {
    private string pageTitle = "Login | Ítala Veloso";
    private LoginModel loginModel = new();
    private string loginError = string.Empty;
    private async Task LoginUser()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<SessionResult>("login", loginModel);

            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/admin-dashboard'");
            }
            else
            {
                loginError = result.Error;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex.Message}");
            loginError = "Erro ao iniciar sessão.";
        }

        StateHasChanged();
    }
} 