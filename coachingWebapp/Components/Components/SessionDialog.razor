<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Class="dialog-title">
            <MudIcon Icon="@Icons.Material.Filled.Event" Class="mr-2" Size="Size.Small" />
            Session Details
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (Session != null)
        {
            <MudPaper Class="pa-4 session-details-card" Elevation="2">
                <MudGrid Spacing="3" Class="session-details-grid">
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" Class="mb-3">Session Information</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Name</MudText>
                        <MudText Typo="Typo.body1">@Session.FullName</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Email</MudText>
                        <MudText Typo="Typo.body1">@Session.Email</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Session Category</MudText>
                        <MudText Typo="Typo.body1">@Session.SessionCategory.GetDisplayName()</MudText>
                    </MudItem>
                    <MudItem xs="12" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Message</MudText>
                        <MudText Typo="Typo.body2" Class="mt-1">@(string.IsNullOrEmpty(Session.Message) ? "No message provided." : Session.Message)</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Preferred Date & Time</MudText>
                        <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.PreferredDateTime).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Created At</MudText>
                        <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.CreatedAt).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Type</MudText>
                        <MudText Typo="Typo.body1">
                            @if (Session.DiscoveryCall)
                            {
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">Discovery Call</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Primary" Size="Size.Small">Single Session</MudChip>
                            }
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" Class="mt-4">
                        <MudText Typo="Typo.h5" Class="mb-3">Payment Information</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="session-detail-item">
                        <MudText Typo="Typo.caption" Color="Color.Primary">Payment Status</MudText>
                        <MudText Typo="Typo.body1">
                            @if (Session.IsPaid)
                            {
                                <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small">Paid</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Error" Icon="@Icons.Material.Filled.Error" Size="Size.Small">Not Paid</MudChip>
                            }
                        </MudText>
                    </MudItem>
                    @if (Session.IsPaid && Session.PaidAt != default)
                    {
                        <MudItem xs="12" sm="6" Class="session-detail-item">
                            <MudText Typo="Typo.caption" Color="Color.Primary">Paid At</MudText>
                            <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.PaidAt).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                        </MudItem>
                    }
                    @if (!string.IsNullOrEmpty(Session.StripeSessionId))
                    {
                        <MudItem xs="12" Class="session-detail-item">
                            <MudText Typo="Typo.caption" Color="Color.Primary">Stripe Session ID</MudText>
                            <MudText Typo="Typo.body2" Style="word-break: break-all;">@Session.StripeSessionId</MudText>
                        </MudItem>
                    }

                    @if (Session.VideoSession != null)
                    {
                        <MudItem xs="12" Class="mt-4">
                            <MudText Typo="Typo.h5" Class="mb-3">Video Information</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6" Class="session-detail-item">
                            <MudText Typo="Typo.caption" Color="Color.Primary">Session ID</MudText>
                            <MudText Typo="Typo.body2">@Session.VideoSession.SessionId</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6" Class="session-detail-item">
                            <MudText Typo="Typo.caption" Color="Color.Primary">Created At</MudText>
                            <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.VideoSession.CreatedAt).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6" Class="session-detail-item">
                            <MudText Typo="Typo.caption" Color="Color.Primary">Scheduled At</MudText>
                            <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.VideoSession.ScheduledAt).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                        </MudItem>
                        @if (Session.VideoSession.StartedAt.HasValue)
                        {
                            <MudItem xs="12" sm="6" Class="session-detail-item">
                                <MudText Typo="Typo.caption" Color="Color.Primary">Started At</MudText>
                                <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.VideoSession.StartedAt.Value).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                            </MudItem>
                        }
                        @if (Session.VideoSession.EndedAt.HasValue)
                        {
                            <MudItem xs="12" sm="6" Class="session-detail-item">
                                <MudText Typo="Typo.caption" Color="Color.Primary">Ended At</MudText>
                                <MudText Typo="Typo.body1">@ConvertToLocalTime(Session.VideoSession.EndedAt.Value).ToString("dd MMM yyyy HH:mm") (@CurrentTimeZone)</MudText>
                            </MudItem>
                        }
                    }
                </MudGrid>
            </MudPaper>
        }
        else
        {
            <MudText Typo="Typo.body1" Class="pa-4 text-center">
                No session information available.
            </MudText>
        }
    </DialogContent>
    <DialogActions>
        @if (Session != null)
        {
            <MudAlert Severity="@GetAlertSeverity()" Class="ma-3" Variant="Variant.Filled" Dense="true">
                @GetSessionStatusMessage()
            </MudAlert>
        }
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Close</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.VideoCall"
                   Class="go-to-session-btn"
                   OnClick="GoToSessionPage"
                   Disabled="@(!CanJoinSession)"
                   AriaLabel="Go to session">
            Go to Session
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Session Session { get; set; }

    private string CurrentTimeZone { get; set; } = "UTC";
    private const int DefaultSessionDurationMinutes = 45;
    private const int JoinWindowBufferMinutes = 15;
    private const int ClockSkewBufferMinutes = 5;

    protected override async Task OnInitializedAsync()
    {
        await LoadTimeZone();
    }

    private async Task LoadTimeZone()
    {
        try
        {
            CurrentTimeZone = await JSRuntime.InvokeAsync<string>("eval", "Intl.DateTimeFormat().resolvedOptions().timeZone");
            
            if (!TimeZoneInfo.GetSystemTimeZones().Any(tz => tz.Id == CurrentTimeZone))
            {
                CurrentTimeZone = "UTC";
                Snackbar.Add("Unable to detect your time zone. Defaulting to UTC.", Severity.Warning);
                await LogService.LogError("LoadTimeZone", $"Invalid time zone detected: {CurrentTimeZone}. Defaulting to UTC.");
            }
        }
        catch (Exception ex)
        {
            CurrentTimeZone = "UTC";
            Snackbar.Add("Failed to detect time zone. Using UTC.", Severity.Warning);
            await LogService.LogError("LoadTimeZone", $"Time zone detection failed: {ex.Message}");
        }
    }

    private bool CanJoinSession
    {
        get
        {
            if (Session == null || Session.VideoSession == null || !Session.VideoSession.IsActive || string.IsNullOrEmpty(Session.VideoSession.SessionId))
                return false;

            var now = DateTime.UtcNow;
            var sessionStart = Session.VideoSession.ScheduledAt; // Use VideoSession.ScheduledAt for consistency
            var sessionEnd = sessionStart.AddMinutes(DefaultSessionDurationMinutes + ClockSkewBufferMinutes);
            var joinWindowStart = sessionStart.AddMinutes(-JoinWindowBufferMinutes);

            return !Session.VideoSession.EndedAt.HasValue && now >= joinWindowStart && now <= sessionEnd;
        }
    }

    private Severity GetAlertSeverity()
    {
        if (Session == null || Session.VideoSession == null || string.IsNullOrEmpty(Session.VideoSession.SessionId))
            return Severity.Error;

        var now = DateTime.UtcNow;
        var sessionStart = Session.VideoSession.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(DefaultSessionDurationMinutes + ClockSkewBufferMinutes);
        var joinWindowStart = sessionStart.AddMinutes(-JoinWindowBufferMinutes);

        if (now < joinWindowStart)
            return Severity.Info;
        if (now > sessionEnd || Session.VideoSession.EndedAt.HasValue)
            return Severity.Warning;
        return CanJoinSession ? Severity.Success : Severity.Error;
    }

    private string GetSessionStatusMessage()
    {
        if (Session == null)
            return "No session selected.";
        if (Session.VideoSession == null || string.IsNullOrEmpty(Session.VideoSession.SessionId))
            return "No video session available for this session.";

        var now = DateTime.UtcNow;
        var sessionStart = Session.VideoSession.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(DefaultSessionDurationMinutes + ClockSkewBufferMinutes);
        var joinWindowStart = sessionStart.AddMinutes(-JoinWindowBufferMinutes);

        try
        {
            var localTime = ConvertToLocalTime(sessionStart);
            if (now < joinWindowStart)
                return $"Session starts at {localTime:dd MMM yyyy HH:mm} ({CurrentTimeZone}). Join available {JoinWindowBufferMinutes} minutes before.";
            if (now > sessionEnd || Session.VideoSession.EndedAt.HasValue)
                return "This session has ended. Contact support for assistance.";
            return CanJoinSession ? "Ready to join the session!" : "Session missed. Contact support.";
        }
        catch (Exception ex)
        {
            LogService.LogError("GetSessionStatusMessage", $"Time conversion error for session {Session.VideoSession.SessionId}: {ex.Message}");
            return "Error displaying session time. Contact support.";
        }
    }

    private DateTime ConvertToLocalTime(DateTime utcTime)
    {
        try
        {
            var timeZone = TimeZoneInfo.FindSystemTimeZoneById(CurrentTimeZone);
            return TimeZoneInfo.ConvertTimeFromUtc(utcTime, timeZone);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Time zone conversion failed. Displaying UTC time.", Severity.Warning);
            LogService.LogError("ConvertToLocalTime", $"Failed to convert UTC time {utcTime:yyyy-MM-dd HH:mm:ss} to {CurrentTimeZone}: {ex.Message}");
            return utcTime;
        }
    }

    private async Task GoToSessionPage()
    {
        if (Session == null || Session.VideoSession == null || string.IsNullOrEmpty(Session.VideoSession.SessionId))
        {
            Snackbar.Add("No valid session selected.", Severity.Error);
            await LogService.LogError("GoToSessionPage", "No valid session selected: Session or VideoSession is null or SessionId is empty.");
            return;
        }

        var now = DateTime.UtcNow;
        var sessionStart = Session.VideoSession.ScheduledAt;
        var sessionEnd = sessionStart.AddMinutes(DefaultSessionDurationMinutes + ClockSkewBufferMinutes);
        var joinWindowStart = sessionStart.AddMinutes(-JoinWindowBufferMinutes);

        try
        {
            if (now < joinWindowStart)
            {
                var localJoinTime = ConvertToLocalTime(joinWindowStart);
                var minutesUntilJoin = Math.Ceiling((joinWindowStart - now).TotalMinutes);
                Snackbar.Add($"Session starts in {minutesUntilJoin} minute(s) at {localJoinTime:HH:mm} ({CurrentTimeZone}).", Severity.Info);
                await LogService.LogError("GoToSessionPage", $"Attempt to join session {Session.VideoSession.SessionId} too early. Join window starts at {joinWindowStart:yyyy-MM-dd HH:mm:ss} UTC.");
                return;
            }

            if (now > sessionEnd || Session.VideoSession.EndedAt.HasValue)
            {
                Snackbar.Add("This session has ended or was canceled.", Severity.Error);
                await LogService.LogError("GoToSessionPage", $"Session {Session.VideoSession.SessionId} has ended or was canceled. Current time: {now:yyyy-MM-dd HH:mm:ss} UTC, Session end: {sessionEnd:yyyy-MM-dd HH:mm:ss} UTC.");
                return;
            }

            NavigationManager.NavigateTo($"/session/{Session.VideoSession.SessionId}");
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to join session. Please try again or contact support.", Severity.Error);
            await LogService.LogError("GoToSessionPage", $"Failed to join session {Session.VideoSession.SessionId}: {ex.Message}");
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}