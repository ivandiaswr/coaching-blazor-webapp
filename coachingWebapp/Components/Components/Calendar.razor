@using MudBlazor
@using System.Globalization

<div class="calendar-modal @(IsVisible ? "show" : "")" @onclick="Close">
    <div class="calendar-modal-content" @onclick:stopPropagation="true">
        <div class="timezone-info">
            Timezone: <strong>@CurrentTimeZoneDisplay</strong>
        </div>

        <MudCalendar T="CalendarItem"
                     @ref="calendar"
                     Items="@calendarItems"
                     View="@CurrentView"
                     Date="@InitialDate"
                     FirstDayOfWeek="DayOfWeek.Monday"
                     ShowTodayButton="true"
                     SlotDuration="00:45:00"
                     StartHour="10"
                     EndHour="21"
                     lang="en"
                     id="calendar-scroll-target" 
                     ItemClicked="OnSlotClicked"
                     Class="responsive-calendar" />
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public List<DateTime> Slots { get; set; } = new();
    [Parameter] public List<(DateTimeOffset Start, DateTimeOffset End)> BusyTimes { get; set; } = new();
    [Parameter] public List<UnavailableTime> AdminUnavailabilities { get; set; } = new();
    [Parameter] public DateTime? FirstAvailableDate { get; set; }
    [Parameter] public EventCallback<string> OnSlotSelected { get; set; }
    [Parameter] public string CurrentTimeZoneDisplay { get; set; } = "detecting...";
    [Parameter] public EventCallback<CalendarItem> OnEventClick { get; set; }

    private MudCalendar calendar;
    private List<CalendarItem> calendarItems = new();
    private DateTime InitialDate => FirstAvailableDate ?? DateTime.Now;
    private CalendarView CurrentView => WindowWidth <= 1024 ? CalendarView.Day : CalendarView.Week;
    private int WindowWidth { get; set; } = 1920;

    protected override void OnParametersSet()
    {
        calendarItems.Clear();

        foreach (var busy in BusyTimes)
        {
            calendarItems.Add(new CalendarItem
            {
                Start = busy.Start.LocalDateTime,
                End = busy.End.LocalDateTime,
                Text = "â›” Busy"
            });
        }

        foreach (var slot in Slots)
        {
            calendarItems.Add(new CalendarItem
            {
                Start = slot,
                End = slot.AddMinutes(45),
                Text = "ðŸŸ¢ Available"
            });
        }

        foreach (var unavailable in AdminUnavailabilities)
        {
            if (unavailable.IsRecurring)
            {
                var startDate = (FirstAvailableDate ?? DateTime.Now).Date;
                var endDate = startDate.AddDays(25);
                var adjustedDayOfWeek = (DayOfWeek)((((int)unavailable.DayOfWeek + 1) % 7));
                for (var date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    if (date.DayOfWeek == adjustedDayOfWeek)
                    {
                        calendarItems.Add(new CalendarItem
                        {
                            Start = date.Add(unavailable.StartTime ?? TimeSpan.Zero),
                            End = date.Add(unavailable.EndTime ?? TimeSpan.Zero),
                            Text = "ðŸ”´ " + unavailable.Reason
                        });
                    }
                }
            }
            else
            {
                calendarItems.Add(new CalendarItem
                {
                    Start = unavailable.Date.Add(unavailable.StartTime ?? TimeSpan.Zero),
                    End = unavailable.Date.Add(unavailable.EndTime ?? TimeSpan.Zero),
                    Text = "ðŸ”´ " + unavailable.Reason
                });
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            WindowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
            await JSRuntime.InvokeVoidAsync("window.colorCalendarSlots");
            StateHasChanged();
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("scrollCalendarToHour", "calendar-scroll-target", 10);
        }
        catch (Exception ex)
        {
            await LogService.LogError("ScrollCalendarToHour JS Error", ex.Message);
        }
    }

    private async Task OnSlotClicked(CalendarItem item)
    {
        if (item.Text.Contains("Available"))
        {
            await OnSlotSelected.InvokeAsync(item.Start.ToString("o"));
        }

        await OnEventClick.InvokeAsync(item);
    }

    private async void Close()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}
