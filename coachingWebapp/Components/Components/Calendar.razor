@using MudBlazor
@using System.Globalization

<div class="calendar-modal @(IsVisible ? "show" : "")" @onclick="Close">
    <div class="calendar-modal-content" @onclick:stopPropagation="true">
        <div class="timezone-info">
            Timezone: <strong>@CurrentTimeZoneDisplay</strong>
        </div>

        @if (IsTimeZoneValid)
        {
            <MudCalendar T="CalendarItem"
                @ref="calendar"
                Items="@calendarItems"
                View="@CurrentView"
                StartDate="@InitialDateTime"
                ShowTodayButton="true"
                SlotDuration="00:45:00"
                StartHour="0"
                EndHour="23"
                lang="en"
                id="calendarEventTarget"
                ItemClicked="OnSlotClicked"
                Class="responsive-calendar" />
        }
        else
        {
            <MudText>Invalid time zone: @CurrentTimeZoneDisplay. Using UTC.</MudText>
            <MudCalendar T="CalendarItem"
                @ref="calendar"
                Items="@calendarItems"
                View="@CurrentView"
                StartDate="@InitialDateTime"
                ShowTodayButton="true"
                SlotDuration="00:45:00"
                StartHour="0"
                EndHour="23"
                lang="en"
                id="calendarEventTarget"
                ItemClicked="OnSlotClicked"
                Class="responsive-calendar" />
        }
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public List<DateTime> AvailableSlots { get; set; } = new();
    [Parameter] public List<(DateTimeOffset Start, DateTimeOffset End)> BusyTimes { get; set; } = new();
    [Parameter] public List<UnavailableTime> AdminUnavailabilities { get; set; } = new();
    [Parameter] public DateTime? FirstAvailableDate { get; set; }
    [Parameter] public EventCallback<string> OnSlotSelected { get; set; }
    [Parameter] public string CurrentTimeZoneDisplay { get; set; } = "UTC";
    private bool IsTimeZoneValid { get; set; } = false;
    [Parameter] public EventCallback<CalendarItem> OnEventClick { get; set; }

    private MudCalendar calendar;
    private List<CalendarItem> calendarItems = new();
    private DateTime InitialDateTime => FirstAvailableDate?.ToUniversalTime() ?? DateTime.UtcNow.AddDays(2);
    private CalendarView CurrentView => WindowWidth <= 1024 ? CalendarView.Day : CalendarView.Week;
    private int WindowWidth { get; set; } = 1920;

    protected override void OnParametersSet()
    {
        calendarItems.Clear();
        TimeZoneInfo userTimeZoneInfo;

        try
        {
            userTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(CurrentTimeZoneDisplay);
            IsTimeZoneValid = true;
            LogService.LogInfo("Calendar.OnParametersSet", $"Using time zone: {CurrentTimeZoneDisplay}");
        }
        catch (TimeZoneNotFoundException ex)
        {
            LogService.LogError("Calendar.OnParametersSet", $"Invalid time zone: {CurrentTimeZoneDisplay}. Falling back to UTC. Exception: {ex.Message}");
            userTimeZoneInfo = TimeZoneInfo.Utc;
            IsTimeZoneValid = false;
            CurrentTimeZoneDisplay = "UTC";
        }

        try
        {
            LogService.LogInfo("Calendar.OnParametersSet", $"Processing {AvailableSlots.Count} slots, {BusyTimes.Count} busy times, {AdminUnavailabilities.Count} unavailabilities.");

            foreach (var busy in BusyTimes)
            {
                calendarItems.Add(new CalendarItem
                {
                    Start = TimeZoneInfo.ConvertTimeFromUtc(busy.Start.UtcDateTime, userTimeZoneInfo),
                    End = TimeZoneInfo.ConvertTimeFromUtc(busy.End.UtcDateTime, userTimeZoneInfo),
                    Text = "â›” Busy"
                });
            }

            foreach (var slot in AvailableSlots)
            {
                calendarItems.Add(new CalendarItem
                {
                    Start = TimeZoneInfo.ConvertTimeFromUtc(slot, userTimeZoneInfo),
                    End = TimeZoneInfo.ConvertTimeFromUtc(slot.AddMinutes(45), userTimeZoneInfo),
                    Text = "ðŸŸ¢ Available"
                });
            }

            var adminTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
            foreach (var unavailable in AdminUnavailabilities)
            {
                if (unavailable.StartTime == null || unavailable.EndTime == null)
                {
                    LogService.LogWarning("Calendar.OnParametersSet", $"Skipping unavailability with null StartTime/EndTime: {(unavailable.IsRecurring ? $"Recurring {unavailable.DayOfWeek}" : $"Date {unavailable.Date:yyyy-MM-dd}")}");
                    continue;
                }

                if (unavailable.IsRecurring)
                {
                    var startDate = (FirstAvailableDate ?? DateTime.UtcNow).Date;
                    var endDate = startDate.AddDays(25);
                    for (var date = startDate; date <= endDate; date = date.AddDays(1))
                    {
                        if (date.DayOfWeek == unavailable.DayOfWeek)
                        {
                            var bstStart = new DateTime(date.Year, date.Month, date.Day, unavailable.StartTime.Value.Hours, unavailable.StartTime.Value.Minutes, 0, DateTimeKind.Unspecified);
                            var bstEnd = new DateTime(date.Year, date.Month, date.Day, unavailable.EndTime.Value.Hours, unavailable.EndTime.Value.Minutes, 0, DateTimeKind.Unspecified);
                            var utcStart = TimeZoneInfo.ConvertTimeToUtc(bstStart, adminTimeZone);
                            var utcEnd = TimeZoneInfo.ConvertTimeToUtc(bstEnd, adminTimeZone);
                            calendarItems.Add(new CalendarItem
                            {
                                Start = TimeZoneInfo.ConvertTimeFromUtc(utcStart, userTimeZoneInfo),
                                End = TimeZoneInfo.ConvertTimeFromUtc(utcEnd, userTimeZoneInfo),
                                Text = "ðŸ”´ " + (unavailable.Reason ?? "Unavailable")
                            });
                        }
                    }
                }
                else
                {
                    var bstStart = new DateTime(unavailable.Date.Year, unavailable.Date.Month, unavailable.Date.Day, unavailable.StartTime.Value.Hours, unavailable.StartTime.Value.Minutes, 0, DateTimeKind.Unspecified);
                    var bstEnd = new DateTime(unavailable.Date.Year, unavailable.Date.Month, unavailable.Date.Day, unavailable.EndTime.Value.Hours, unavailable.EndTime.Value.Minutes, 0, DateTimeKind.Unspecified);
                    var utcStart = TimeZoneInfo.ConvertTimeToUtc(bstStart, adminTimeZone);
                    var utcEnd = TimeZoneInfo.ConvertTimeToUtc(bstEnd, adminTimeZone);
                    calendarItems.Add(new CalendarItem
                    {
                        Start = TimeZoneInfo.ConvertTimeFromUtc(utcStart, userTimeZoneInfo),
                        End = TimeZoneInfo.ConvertTimeFromUtc(utcEnd, userTimeZoneInfo),
                        Text = "ðŸ”´ " + (unavailable.Reason ?? "Unavailable")
                    });
                }
            }

            LogService.LogInfo("Calendar.OnParametersSet", $"Populated {calendarItems.Count} calendar items: {calendarItems.Count(c => c.Text.Contains("Available"))} available, {calendarItems.Count(c => c.Text.Contains("Busy"))} busy, {calendarItems.Count(c => c.Text.Contains("ðŸ”´"))} unavailable.");
        }
        catch (Exception ex)
        {
            LogService.LogError("Calendar.OnParametersSet", $"Error populating calendar items: {ex.Message}, StackTrace: {ex.StackTrace}");
            calendarItems.Clear();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            WindowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
            await JSRuntime.InvokeVoidAsync("window.colorCalendarSlots");
            StateHasChanged();
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("scrollCalendarToHour", "calendarEventTarget", 10);
        }
        catch (Exception ex)
        {
            await LogService.LogError("ScrollCalendarToHour JS Error", $"Exception: {ex.Message}");
        }
    }

    private async Task OnSlotClicked(CalendarItem item)
    {
        if (item.Text.Contains("Available"))
        {
            await OnSlotSelected.InvokeAsync(item.Start.ToString("o"));
        }

        await OnEventClick.InvokeAsync(item);
    }

    private async void Close()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}