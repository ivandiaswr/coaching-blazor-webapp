<MudDialog>
<TitleContent>
    <MudText Typo="Typo.h6" Class="mb-1">Confirm Your Booking</MudText>
</TitleContent>

<DialogContent>
    <MudStack Spacing="2">
        <MudAlert Class="mb-2" Severity="Severity.Warning" Variant="Variant.Outlined" Dense="true">
            @if (SelectedOption?.RequiresPurchase == true)
            {
                <span>Youâ€™ll be redirected to the payment screen next.</span>
            }
            else
            {
                <span>Your session will be booked using your available sessions.</span>
            }
        </MudAlert>
        <MudPaper Class="pa-3" Elevation="1" Style="border-left: 4px solid var(--mud-palette-primary);">
            <MudText Typo="Typo.subtitle2"><b>Option:</b> @SelectedOption?.Title</MudText>
            <MudText Typo="Typo.body2"><b>Description:</b> @SelectedOption?.Description</MudText>
            <MudText Typo="Typo.body2"><b>Date & Time:</b> @SelectedDateTime</MudText>
            <MudText Typo="Typo.body2"><b>Price:</b> @((SelectedOption?.RequiresPurchase == true ?
                                FormatPrice(SelectedOption.PriceConverted ?? 0, SelectedOption.Currency) : "Included"))</MudText>
            <MudText Typo="Typo.body2"><b>Payment Method:</b> @(SelectedOption?.RequiresPurchase == true ? "Stripe"
                                : "None (Using available sessions)")</MudText>
        </MudPaper>
    </MudStack>
</DialogContent>

<DialogActions>
    <MudButton OnClick="@Close" Color="Color.Default" Variant="Variant.Text">
        Cancel
    </MudButton>
    <MudButton Class="mr-4" OnClick="@OnConfirmClicked" Color="Color.Primary" Variant="Variant.Filled">
        @(SelectedOption?.RequiresPurchase == true ? "Continue to Payment" : "Continue without Payment")
    </MudButton>
</DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public BookingOption SelectedOption { get; set; } = default!;
    [Parameter] public string SelectedDateTime { get; set; } = default!;

    private void OnConfirmClicked() => MudDialog.Close(DialogResult.Ok(true));
    private void Close() => MudDialog.Close(DialogResult.Cancel());

    private string FormatPrice(decimal price, string currency)
    {
        var cultureMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
{
{ "GBP", "en-GB" }, { "EUR", "fr-FR" }, { "USD", "en-US" }, { "JPY", "ja-JP" },
{ "CAD", "en-CA" }, { "AUD", "en-AU" }, { "BRL", "pt-BR" }, { "MXN", "es-MX" },
{ "CNY", "zh-CN" }, { "HKD", "zh-HK" }, { "SGD", "en-SG" }, { "MYR", "ms-MY" },
{ "THB", "th-TH" }, { "IDR", "id-ID" }, { "PHP", "fil-PH" }, { "AED", "ar-AE" },
{ "SAR", "ar-SA" }, { "INR", "hi-IN" }, { "ZAR", "en-ZA" }, { "NGN", "en-NG" }
};

        var culture = cultureMap.TryGetValue(currency, out var cultureCode) ? CultureInfo.GetCultureInfo(cultureCode) :
        CultureInfo.InvariantCulture;
        return price.ToString("C", culture);
    }
}